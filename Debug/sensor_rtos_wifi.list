
sensor_rtos_wifi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000086f0  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  080088a0  080088a0  000098a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008998  08008998  0000a0bc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008998  08008998  00009998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080089a0  080089a0  0000a0bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080089a0  080089a0  000099a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080089a4  080089a4  000099a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000bc  20000000  080089a8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a0bc  2**0
                  CONTENTS
 10 .bss          00004db0  200000bc  200000bc  0000a0bc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004e6c  20004e6c  0000a0bc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a0bc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015418  00000000  00000000  0000a0ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000030f2  00000000  00000000  0001f504  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001208  00000000  00000000  000225f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e01  00000000  00000000  00023800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003227  00000000  00000000  00024601  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000152f6  00000000  00000000  00027828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000de961  00000000  00000000  0003cb1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011b47f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000507c  00000000  00000000  0011b4c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  00120540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000bc 	.word	0x200000bc
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008888 	.word	0x08008888

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000c0 	.word	0x200000c0
 80001ec:	08008888 	.word	0x08008888

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b988 	b.w	80005c8 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	468e      	mov	lr, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	4688      	mov	r8, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d962      	bls.n	80003ac <__udivmoddi4+0xdc>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	b14e      	cbz	r6, 8000300 <__udivmoddi4+0x30>
 80002ec:	f1c6 0320 	rsb	r3, r6, #32
 80002f0:	fa01 f806 	lsl.w	r8, r1, r6
 80002f4:	fa20 f303 	lsr.w	r3, r0, r3
 80002f8:	40b7      	lsls	r7, r6
 80002fa:	ea43 0808 	orr.w	r8, r3, r8
 80002fe:	40b4      	lsls	r4, r6
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	fa1f fc87 	uxth.w	ip, r7
 8000308:	fbb8 f1fe 	udiv	r1, r8, lr
 800030c:	0c23      	lsrs	r3, r4, #16
 800030e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000312:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000316:	fb01 f20c 	mul.w	r2, r1, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x62>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f101 30ff 	add.w	r0, r1, #4294967295
 8000324:	f080 80ea 	bcs.w	80004fc <__udivmoddi4+0x22c>
 8000328:	429a      	cmp	r2, r3
 800032a:	f240 80e7 	bls.w	80004fc <__udivmoddi4+0x22c>
 800032e:	3902      	subs	r1, #2
 8000330:	443b      	add	r3, r7
 8000332:	1a9a      	subs	r2, r3, r2
 8000334:	b2a3      	uxth	r3, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000342:	fb00 fc0c 	mul.w	ip, r0, ip
 8000346:	459c      	cmp	ip, r3
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0x8e>
 800034a:	18fb      	adds	r3, r7, r3
 800034c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000350:	f080 80d6 	bcs.w	8000500 <__udivmoddi4+0x230>
 8000354:	459c      	cmp	ip, r3
 8000356:	f240 80d3 	bls.w	8000500 <__udivmoddi4+0x230>
 800035a:	443b      	add	r3, r7
 800035c:	3802      	subs	r0, #2
 800035e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000362:	eba3 030c 	sub.w	r3, r3, ip
 8000366:	2100      	movs	r1, #0
 8000368:	b11d      	cbz	r5, 8000372 <__udivmoddi4+0xa2>
 800036a:	40f3      	lsrs	r3, r6
 800036c:	2200      	movs	r2, #0
 800036e:	e9c5 3200 	strd	r3, r2, [r5]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d905      	bls.n	8000386 <__udivmoddi4+0xb6>
 800037a:	b10d      	cbz	r5, 8000380 <__udivmoddi4+0xb0>
 800037c:	e9c5 0100 	strd	r0, r1, [r5]
 8000380:	2100      	movs	r1, #0
 8000382:	4608      	mov	r0, r1
 8000384:	e7f5      	b.n	8000372 <__udivmoddi4+0xa2>
 8000386:	fab3 f183 	clz	r1, r3
 800038a:	2900      	cmp	r1, #0
 800038c:	d146      	bne.n	800041c <__udivmoddi4+0x14c>
 800038e:	4573      	cmp	r3, lr
 8000390:	d302      	bcc.n	8000398 <__udivmoddi4+0xc8>
 8000392:	4282      	cmp	r2, r0
 8000394:	f200 8105 	bhi.w	80005a2 <__udivmoddi4+0x2d2>
 8000398:	1a84      	subs	r4, r0, r2
 800039a:	eb6e 0203 	sbc.w	r2, lr, r3
 800039e:	2001      	movs	r0, #1
 80003a0:	4690      	mov	r8, r2
 80003a2:	2d00      	cmp	r5, #0
 80003a4:	d0e5      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003a6:	e9c5 4800 	strd	r4, r8, [r5]
 80003aa:	e7e2      	b.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f000 8090 	beq.w	80004d2 <__udivmoddi4+0x202>
 80003b2:	fab2 f682 	clz	r6, r2
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	f040 80a4 	bne.w	8000504 <__udivmoddi4+0x234>
 80003bc:	1a8a      	subs	r2, r1, r2
 80003be:	0c03      	lsrs	r3, r0, #16
 80003c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c4:	b280      	uxth	r0, r0
 80003c6:	b2bc      	uxth	r4, r7
 80003c8:	2101      	movs	r1, #1
 80003ca:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ce:	fb0e 221c 	mls	r2, lr, ip, r2
 80003d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003d6:	fb04 f20c 	mul.w	r2, r4, ip
 80003da:	429a      	cmp	r2, r3
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x11e>
 80003de:	18fb      	adds	r3, r7, r3
 80003e0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x11c>
 80003e6:	429a      	cmp	r2, r3
 80003e8:	f200 80e0 	bhi.w	80005ac <__udivmoddi4+0x2dc>
 80003ec:	46c4      	mov	ip, r8
 80003ee:	1a9b      	subs	r3, r3, r2
 80003f0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003f4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003f8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003fc:	fb02 f404 	mul.w	r4, r2, r4
 8000400:	429c      	cmp	r4, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x144>
 8000404:	18fb      	adds	r3, r7, r3
 8000406:	f102 30ff 	add.w	r0, r2, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x142>
 800040c:	429c      	cmp	r4, r3
 800040e:	f200 80ca 	bhi.w	80005a6 <__udivmoddi4+0x2d6>
 8000412:	4602      	mov	r2, r0
 8000414:	1b1b      	subs	r3, r3, r4
 8000416:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800041a:	e7a5      	b.n	8000368 <__udivmoddi4+0x98>
 800041c:	f1c1 0620 	rsb	r6, r1, #32
 8000420:	408b      	lsls	r3, r1
 8000422:	fa22 f706 	lsr.w	r7, r2, r6
 8000426:	431f      	orrs	r7, r3
 8000428:	fa0e f401 	lsl.w	r4, lr, r1
 800042c:	fa20 f306 	lsr.w	r3, r0, r6
 8000430:	fa2e fe06 	lsr.w	lr, lr, r6
 8000434:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000438:	4323      	orrs	r3, r4
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	fa1f fc87 	uxth.w	ip, r7
 8000442:	fbbe f0f9 	udiv	r0, lr, r9
 8000446:	0c1c      	lsrs	r4, r3, #16
 8000448:	fb09 ee10 	mls	lr, r9, r0, lr
 800044c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000450:	fb00 fe0c 	mul.w	lr, r0, ip
 8000454:	45a6      	cmp	lr, r4
 8000456:	fa02 f201 	lsl.w	r2, r2, r1
 800045a:	d909      	bls.n	8000470 <__udivmoddi4+0x1a0>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000462:	f080 809c 	bcs.w	800059e <__udivmoddi4+0x2ce>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f240 8099 	bls.w	800059e <__udivmoddi4+0x2ce>
 800046c:	3802      	subs	r0, #2
 800046e:	443c      	add	r4, r7
 8000470:	eba4 040e 	sub.w	r4, r4, lr
 8000474:	fa1f fe83 	uxth.w	lr, r3
 8000478:	fbb4 f3f9 	udiv	r3, r4, r9
 800047c:	fb09 4413 	mls	r4, r9, r3, r4
 8000480:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000484:	fb03 fc0c 	mul.w	ip, r3, ip
 8000488:	45a4      	cmp	ip, r4
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x1ce>
 800048c:	193c      	adds	r4, r7, r4
 800048e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000492:	f080 8082 	bcs.w	800059a <__udivmoddi4+0x2ca>
 8000496:	45a4      	cmp	ip, r4
 8000498:	d97f      	bls.n	800059a <__udivmoddi4+0x2ca>
 800049a:	3b02      	subs	r3, #2
 800049c:	443c      	add	r4, r7
 800049e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a2:	eba4 040c 	sub.w	r4, r4, ip
 80004a6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004aa:	4564      	cmp	r4, ip
 80004ac:	4673      	mov	r3, lr
 80004ae:	46e1      	mov	r9, ip
 80004b0:	d362      	bcc.n	8000578 <__udivmoddi4+0x2a8>
 80004b2:	d05f      	beq.n	8000574 <__udivmoddi4+0x2a4>
 80004b4:	b15d      	cbz	r5, 80004ce <__udivmoddi4+0x1fe>
 80004b6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ba:	eb64 0409 	sbc.w	r4, r4, r9
 80004be:	fa04 f606 	lsl.w	r6, r4, r6
 80004c2:	fa22 f301 	lsr.w	r3, r2, r1
 80004c6:	431e      	orrs	r6, r3
 80004c8:	40cc      	lsrs	r4, r1
 80004ca:	e9c5 6400 	strd	r6, r4, [r5]
 80004ce:	2100      	movs	r1, #0
 80004d0:	e74f      	b.n	8000372 <__udivmoddi4+0xa2>
 80004d2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004d6:	0c01      	lsrs	r1, r0, #16
 80004d8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004dc:	b280      	uxth	r0, r0
 80004de:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004e2:	463b      	mov	r3, r7
 80004e4:	4638      	mov	r0, r7
 80004e6:	463c      	mov	r4, r7
 80004e8:	46b8      	mov	r8, r7
 80004ea:	46be      	mov	lr, r7
 80004ec:	2620      	movs	r6, #32
 80004ee:	fbb1 f1f7 	udiv	r1, r1, r7
 80004f2:	eba2 0208 	sub.w	r2, r2, r8
 80004f6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004fa:	e766      	b.n	80003ca <__udivmoddi4+0xfa>
 80004fc:	4601      	mov	r1, r0
 80004fe:	e718      	b.n	8000332 <__udivmoddi4+0x62>
 8000500:	4610      	mov	r0, r2
 8000502:	e72c      	b.n	800035e <__udivmoddi4+0x8e>
 8000504:	f1c6 0220 	rsb	r2, r6, #32
 8000508:	fa2e f302 	lsr.w	r3, lr, r2
 800050c:	40b7      	lsls	r7, r6
 800050e:	40b1      	lsls	r1, r6
 8000510:	fa20 f202 	lsr.w	r2, r0, r2
 8000514:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000518:	430a      	orrs	r2, r1
 800051a:	fbb3 f8fe 	udiv	r8, r3, lr
 800051e:	b2bc      	uxth	r4, r7
 8000520:	fb0e 3318 	mls	r3, lr, r8, r3
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb08 f904 	mul.w	r9, r8, r4
 800052e:	40b0      	lsls	r0, r6
 8000530:	4589      	cmp	r9, r1
 8000532:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000536:	b280      	uxth	r0, r0
 8000538:	d93e      	bls.n	80005b8 <__udivmoddi4+0x2e8>
 800053a:	1879      	adds	r1, r7, r1
 800053c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000540:	d201      	bcs.n	8000546 <__udivmoddi4+0x276>
 8000542:	4589      	cmp	r9, r1
 8000544:	d81f      	bhi.n	8000586 <__udivmoddi4+0x2b6>
 8000546:	eba1 0109 	sub.w	r1, r1, r9
 800054a:	fbb1 f9fe 	udiv	r9, r1, lr
 800054e:	fb09 f804 	mul.w	r8, r9, r4
 8000552:	fb0e 1119 	mls	r1, lr, r9, r1
 8000556:	b292      	uxth	r2, r2
 8000558:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800055c:	4542      	cmp	r2, r8
 800055e:	d229      	bcs.n	80005b4 <__udivmoddi4+0x2e4>
 8000560:	18ba      	adds	r2, r7, r2
 8000562:	f109 31ff 	add.w	r1, r9, #4294967295
 8000566:	d2c4      	bcs.n	80004f2 <__udivmoddi4+0x222>
 8000568:	4542      	cmp	r2, r8
 800056a:	d2c2      	bcs.n	80004f2 <__udivmoddi4+0x222>
 800056c:	f1a9 0102 	sub.w	r1, r9, #2
 8000570:	443a      	add	r2, r7
 8000572:	e7be      	b.n	80004f2 <__udivmoddi4+0x222>
 8000574:	45f0      	cmp	r8, lr
 8000576:	d29d      	bcs.n	80004b4 <__udivmoddi4+0x1e4>
 8000578:	ebbe 0302 	subs.w	r3, lr, r2
 800057c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000580:	3801      	subs	r0, #1
 8000582:	46e1      	mov	r9, ip
 8000584:	e796      	b.n	80004b4 <__udivmoddi4+0x1e4>
 8000586:	eba7 0909 	sub.w	r9, r7, r9
 800058a:	4449      	add	r1, r9
 800058c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000590:	fbb1 f9fe 	udiv	r9, r1, lr
 8000594:	fb09 f804 	mul.w	r8, r9, r4
 8000598:	e7db      	b.n	8000552 <__udivmoddi4+0x282>
 800059a:	4673      	mov	r3, lr
 800059c:	e77f      	b.n	800049e <__udivmoddi4+0x1ce>
 800059e:	4650      	mov	r0, sl
 80005a0:	e766      	b.n	8000470 <__udivmoddi4+0x1a0>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e6fd      	b.n	80003a2 <__udivmoddi4+0xd2>
 80005a6:	443b      	add	r3, r7
 80005a8:	3a02      	subs	r2, #2
 80005aa:	e733      	b.n	8000414 <__udivmoddi4+0x144>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	443b      	add	r3, r7
 80005b2:	e71c      	b.n	80003ee <__udivmoddi4+0x11e>
 80005b4:	4649      	mov	r1, r9
 80005b6:	e79c      	b.n	80004f2 <__udivmoddi4+0x222>
 80005b8:	eba1 0109 	sub.w	r1, r1, r9
 80005bc:	46c4      	mov	ip, r8
 80005be:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c2:	fb09 f804 	mul.w	r8, r9, r4
 80005c6:	e7c4      	b.n	8000552 <__udivmoddi4+0x282>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <QMC_Init>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void QMC_Init(){
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b086      	sub	sp, #24
 80005d0:	af04      	add	r7, sp, #16
	uint8_t reset;

    reset = 0x1D;
 80005d2:	231d      	movs	r3, #29
 80005d4:	71fb      	strb	r3, [r7, #7]

    HAL_I2C_Mem_Write(&hi2c1,QMC_ADDR,QMC_CON,1,&reset,1,1000);
 80005d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005da:	9302      	str	r3, [sp, #8]
 80005dc:	2301      	movs	r3, #1
 80005de:	9301      	str	r3, [sp, #4]
 80005e0:	1dfb      	adds	r3, r7, #7
 80005e2:	9300      	str	r3, [sp, #0]
 80005e4:	2301      	movs	r3, #1
 80005e6:	2209      	movs	r2, #9
 80005e8:	211a      	movs	r1, #26
 80005ea:	480b      	ldr	r0, [pc, #44]	@ (8000618 <QMC_Init+0x4c>)
 80005ec:	f001 f94e 	bl	800188c <HAL_I2C_Mem_Write>

    reset = 0x01;
 80005f0:	2301      	movs	r3, #1
 80005f2:	71fb      	strb	r3, [r7, #7]

    HAL_I2C_Mem_Write(&hi2c1,QMC_ADDR,QMC_SR,1,&reset,1,1000);
 80005f4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005f8:	9302      	str	r3, [sp, #8]
 80005fa:	2301      	movs	r3, #1
 80005fc:	9301      	str	r3, [sp, #4]
 80005fe:	1dfb      	adds	r3, r7, #7
 8000600:	9300      	str	r3, [sp, #0]
 8000602:	2301      	movs	r3, #1
 8000604:	220b      	movs	r2, #11
 8000606:	211a      	movs	r1, #26
 8000608:	4803      	ldr	r0, [pc, #12]	@ (8000618 <QMC_Init+0x4c>)
 800060a:	f001 f93f 	bl	800188c <HAL_I2C_Mem_Write>

}
 800060e:	bf00      	nop
 8000610:	3708      	adds	r7, #8
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	200002e4 	.word	0x200002e4

0800061c <QMC_READ>:

void QMC_READ(QMC *Qd){
 800061c:	b580      	push	{r7, lr}
 800061e:	b088      	sub	sp, #32
 8000620:	af04      	add	r7, sp, #16
 8000622:	6078      	str	r0, [r7, #4]
 uint8_t flag;
     HAL_I2C_Mem_Read(&hi2c1,QMC_ADDR,QMC_SR,1,&flag,1,1000);
 8000624:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000628:	9302      	str	r3, [sp, #8]
 800062a:	2301      	movs	r3, #1
 800062c:	9301      	str	r3, [sp, #4]
 800062e:	f107 030f 	add.w	r3, r7, #15
 8000632:	9300      	str	r3, [sp, #0]
 8000634:	2301      	movs	r3, #1
 8000636:	220b      	movs	r2, #11
 8000638:	211a      	movs	r1, #26
 800063a:	480b      	ldr	r0, [pc, #44]	@ (8000668 <QMC_READ+0x4c>)
 800063c:	f001 fa20 	bl	8001a80 <HAL_I2C_Mem_Read>

     if(flag & 0x01){
 8000640:	7bfb      	ldrb	r3, [r7, #15]
 8000642:	f003 0301 	and.w	r3, r3, #1
 8000646:	2b00      	cmp	r3, #0
 8000648:	d00a      	beq.n	8000660 <QMC_READ+0x44>

    	 HAL_I2C_Mem_Read_IT(&hi2c1,QMC_ADDR,QMC_DATA,1,Qd->qmc_data,6);
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	3306      	adds	r3, #6
 800064e:	2206      	movs	r2, #6
 8000650:	9201      	str	r2, [sp, #4]
 8000652:	9300      	str	r3, [sp, #0]
 8000654:	2301      	movs	r3, #1
 8000656:	2200      	movs	r2, #0
 8000658:	211a      	movs	r1, #26
 800065a:	4803      	ldr	r0, [pc, #12]	@ (8000668 <QMC_READ+0x4c>)
 800065c:	f001 fc42 	bl	8001ee4 <HAL_I2C_Mem_Read_IT>
     }
}
 8000660:	bf00      	nop
 8000662:	3710      	adds	r7, #16
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	200002e4 	.word	0x200002e4

0800066c <HAL_I2C_MemRxCpltCallback>:
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800066c:	b480      	push	{r7}
 800066e:	b083      	sub	sp, #12
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
	if(hi2c->Instance == I2C1){
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a16      	ldr	r2, [pc, #88]	@ (80006d4 <HAL_I2C_MemRxCpltCallback+0x68>)
 800067a:	4293      	cmp	r3, r2
 800067c:	d123      	bne.n	80006c6 <HAL_I2C_MemRxCpltCallback+0x5a>
		Q.x = (int16_t)(Q.qmc_data[0]<<8)|Q.qmc_data[1];
 800067e:	4b16      	ldr	r3, [pc, #88]	@ (80006d8 <HAL_I2C_MemRxCpltCallback+0x6c>)
 8000680:	799b      	ldrb	r3, [r3, #6]
 8000682:	b21b      	sxth	r3, r3
 8000684:	021b      	lsls	r3, r3, #8
 8000686:	b21a      	sxth	r2, r3
 8000688:	4b13      	ldr	r3, [pc, #76]	@ (80006d8 <HAL_I2C_MemRxCpltCallback+0x6c>)
 800068a:	79db      	ldrb	r3, [r3, #7]
 800068c:	b21b      	sxth	r3, r3
 800068e:	4313      	orrs	r3, r2
 8000690:	b21a      	sxth	r2, r3
 8000692:	4b11      	ldr	r3, [pc, #68]	@ (80006d8 <HAL_I2C_MemRxCpltCallback+0x6c>)
 8000694:	801a      	strh	r2, [r3, #0]
		Q.y = (int16_t)(Q.qmc_data[2]<<8)|Q.qmc_data[3];
 8000696:	4b10      	ldr	r3, [pc, #64]	@ (80006d8 <HAL_I2C_MemRxCpltCallback+0x6c>)
 8000698:	7a1b      	ldrb	r3, [r3, #8]
 800069a:	b21b      	sxth	r3, r3
 800069c:	021b      	lsls	r3, r3, #8
 800069e:	b21a      	sxth	r2, r3
 80006a0:	4b0d      	ldr	r3, [pc, #52]	@ (80006d8 <HAL_I2C_MemRxCpltCallback+0x6c>)
 80006a2:	7a5b      	ldrb	r3, [r3, #9]
 80006a4:	b21b      	sxth	r3, r3
 80006a6:	4313      	orrs	r3, r2
 80006a8:	b21a      	sxth	r2, r3
 80006aa:	4b0b      	ldr	r3, [pc, #44]	@ (80006d8 <HAL_I2C_MemRxCpltCallback+0x6c>)
 80006ac:	805a      	strh	r2, [r3, #2]
		Q.z = (int16_t)(Q.qmc_data[4]<<8)|Q.qmc_data[5];
 80006ae:	4b0a      	ldr	r3, [pc, #40]	@ (80006d8 <HAL_I2C_MemRxCpltCallback+0x6c>)
 80006b0:	7a9b      	ldrb	r3, [r3, #10]
 80006b2:	b21b      	sxth	r3, r3
 80006b4:	021b      	lsls	r3, r3, #8
 80006b6:	b21a      	sxth	r2, r3
 80006b8:	4b07      	ldr	r3, [pc, #28]	@ (80006d8 <HAL_I2C_MemRxCpltCallback+0x6c>)
 80006ba:	7adb      	ldrb	r3, [r3, #11]
 80006bc:	b21b      	sxth	r3, r3
 80006be:	4313      	orrs	r3, r2
 80006c0:	b21a      	sxth	r2, r3
 80006c2:	4b05      	ldr	r3, [pc, #20]	@ (80006d8 <HAL_I2C_MemRxCpltCallback+0x6c>)
 80006c4:	809a      	strh	r2, [r3, #4]
	}
}
 80006c6:	bf00      	nop
 80006c8:	370c      	adds	r7, #12
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	40005400 	.word	0x40005400
 80006d8:	200002d8 	.word	0x200002d8

080006dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006e0:	f000 fc00 	bl	8000ee4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006e4:	f000 f81c 	bl	8000720 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006e8:	f000 f918 	bl	800091c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80006ec:	f000 f8c2 	bl	8000874 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 80006f0:	f000 f880 	bl	80007f4 <MX_I2C1_Init>
  MX_USART6_UART_Init();
 80006f4:	f000 f8e8 	bl	80008c8 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80006f8:	f004 fea2 	bl	8005440 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of sensorTask_Init */
  sensorTask_InitHandle = osThreadNew(sensorTask, NULL, &sensorTask_Init_attributes);
 80006fc:	4a05      	ldr	r2, [pc, #20]	@ (8000714 <main+0x38>)
 80006fe:	2100      	movs	r1, #0
 8000700:	4805      	ldr	r0, [pc, #20]	@ (8000718 <main+0x3c>)
 8000702:	f004 fee7 	bl	80054d4 <osThreadNew>
 8000706:	4603      	mov	r3, r0
 8000708:	4a04      	ldr	r2, [pc, #16]	@ (800071c <main+0x40>)
 800070a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800070c:	f004 febc 	bl	8005488 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000710:	bf00      	nop
 8000712:	e7fd      	b.n	8000710 <main+0x34>
 8000714:	08008928 	.word	0x08008928
 8000718:	08000a79 	.word	0x08000a79
 800071c:	200003c8 	.word	0x200003c8

08000720 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b094      	sub	sp, #80	@ 0x50
 8000724:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000726:	f107 0320 	add.w	r3, r7, #32
 800072a:	2230      	movs	r2, #48	@ 0x30
 800072c:	2100      	movs	r1, #0
 800072e:	4618      	mov	r0, r3
 8000730:	f007 fc2c 	bl	8007f8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000734:	f107 030c 	add.w	r3, r7, #12
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]
 800073e:	609a      	str	r2, [r3, #8]
 8000740:	60da      	str	r2, [r3, #12]
 8000742:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000744:	2300      	movs	r3, #0
 8000746:	60bb      	str	r3, [r7, #8]
 8000748:	4b28      	ldr	r3, [pc, #160]	@ (80007ec <SystemClock_Config+0xcc>)
 800074a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800074c:	4a27      	ldr	r2, [pc, #156]	@ (80007ec <SystemClock_Config+0xcc>)
 800074e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000752:	6413      	str	r3, [r2, #64]	@ 0x40
 8000754:	4b25      	ldr	r3, [pc, #148]	@ (80007ec <SystemClock_Config+0xcc>)
 8000756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000758:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800075c:	60bb      	str	r3, [r7, #8]
 800075e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000760:	2300      	movs	r3, #0
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	4b22      	ldr	r3, [pc, #136]	@ (80007f0 <SystemClock_Config+0xd0>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a21      	ldr	r2, [pc, #132]	@ (80007f0 <SystemClock_Config+0xd0>)
 800076a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800076e:	6013      	str	r3, [r2, #0]
 8000770:	4b1f      	ldr	r3, [pc, #124]	@ (80007f0 <SystemClock_Config+0xd0>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000778:	607b      	str	r3, [r7, #4]
 800077a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800077c:	2301      	movs	r3, #1
 800077e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000780:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000784:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000786:	2302      	movs	r3, #2
 8000788:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800078a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800078e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000790:	2304      	movs	r3, #4
 8000792:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000794:	23a8      	movs	r3, #168	@ 0xa8
 8000796:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000798:	2302      	movs	r3, #2
 800079a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800079c:	2307      	movs	r3, #7
 800079e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a0:	f107 0320 	add.w	r3, r7, #32
 80007a4:	4618      	mov	r0, r3
 80007a6:	f003 fd73 	bl	8004290 <HAL_RCC_OscConfig>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007b0:	f000 f9e2 	bl	8000b78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b4:	230f      	movs	r3, #15
 80007b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007b8:	2302      	movs	r3, #2
 80007ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007bc:	2300      	movs	r3, #0
 80007be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007c0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80007c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007cc:	f107 030c 	add.w	r3, r7, #12
 80007d0:	2105      	movs	r1, #5
 80007d2:	4618      	mov	r0, r3
 80007d4:	f003 ffd4 	bl	8004780 <HAL_RCC_ClockConfig>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007de:	f000 f9cb 	bl	8000b78 <Error_Handler>
  }
}
 80007e2:	bf00      	nop
 80007e4:	3750      	adds	r7, #80	@ 0x50
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	40023800 	.word	0x40023800
 80007f0:	40007000 	.word	0x40007000

080007f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007f8:	4b1b      	ldr	r3, [pc, #108]	@ (8000868 <MX_I2C1_Init+0x74>)
 80007fa:	4a1c      	ldr	r2, [pc, #112]	@ (800086c <MX_I2C1_Init+0x78>)
 80007fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007fe:	4b1a      	ldr	r3, [pc, #104]	@ (8000868 <MX_I2C1_Init+0x74>)
 8000800:	4a1b      	ldr	r2, [pc, #108]	@ (8000870 <MX_I2C1_Init+0x7c>)
 8000802:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000804:	4b18      	ldr	r3, [pc, #96]	@ (8000868 <MX_I2C1_Init+0x74>)
 8000806:	2200      	movs	r2, #0
 8000808:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800080a:	4b17      	ldr	r3, [pc, #92]	@ (8000868 <MX_I2C1_Init+0x74>)
 800080c:	2200      	movs	r2, #0
 800080e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000810:	4b15      	ldr	r3, [pc, #84]	@ (8000868 <MX_I2C1_Init+0x74>)
 8000812:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000816:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000818:	4b13      	ldr	r3, [pc, #76]	@ (8000868 <MX_I2C1_Init+0x74>)
 800081a:	2200      	movs	r2, #0
 800081c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800081e:	4b12      	ldr	r3, [pc, #72]	@ (8000868 <MX_I2C1_Init+0x74>)
 8000820:	2200      	movs	r2, #0
 8000822:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000824:	4b10      	ldr	r3, [pc, #64]	@ (8000868 <MX_I2C1_Init+0x74>)
 8000826:	2200      	movs	r2, #0
 8000828:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800082a:	4b0f      	ldr	r3, [pc, #60]	@ (8000868 <MX_I2C1_Init+0x74>)
 800082c:	2200      	movs	r2, #0
 800082e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000830:	480d      	ldr	r0, [pc, #52]	@ (8000868 <MX_I2C1_Init+0x74>)
 8000832:	f000 fed1 	bl	80015d8 <HAL_I2C_Init>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800083c:	f000 f99c 	bl	8000b78 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000840:	2100      	movs	r1, #0
 8000842:	4809      	ldr	r0, [pc, #36]	@ (8000868 <MX_I2C1_Init+0x74>)
 8000844:	f003 fca9 	bl	800419a <HAL_I2CEx_ConfigAnalogFilter>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800084e:	f000 f993 	bl	8000b78 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000852:	2100      	movs	r1, #0
 8000854:	4804      	ldr	r0, [pc, #16]	@ (8000868 <MX_I2C1_Init+0x74>)
 8000856:	f003 fcdc 	bl	8004212 <HAL_I2CEx_ConfigDigitalFilter>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000860:	f000 f98a 	bl	8000b78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000864:	bf00      	nop
 8000866:	bd80      	pop	{r7, pc}
 8000868:	200002e4 	.word	0x200002e4
 800086c:	40005400 	.word	0x40005400
 8000870:	000186a0 	.word	0x000186a0

08000874 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000878:	4b11      	ldr	r3, [pc, #68]	@ (80008c0 <MX_USART3_UART_Init+0x4c>)
 800087a:	4a12      	ldr	r2, [pc, #72]	@ (80008c4 <MX_USART3_UART_Init+0x50>)
 800087c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800087e:	4b10      	ldr	r3, [pc, #64]	@ (80008c0 <MX_USART3_UART_Init+0x4c>)
 8000880:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000884:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000886:	4b0e      	ldr	r3, [pc, #56]	@ (80008c0 <MX_USART3_UART_Init+0x4c>)
 8000888:	2200      	movs	r2, #0
 800088a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800088c:	4b0c      	ldr	r3, [pc, #48]	@ (80008c0 <MX_USART3_UART_Init+0x4c>)
 800088e:	2200      	movs	r2, #0
 8000890:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000892:	4b0b      	ldr	r3, [pc, #44]	@ (80008c0 <MX_USART3_UART_Init+0x4c>)
 8000894:	2200      	movs	r2, #0
 8000896:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000898:	4b09      	ldr	r3, [pc, #36]	@ (80008c0 <MX_USART3_UART_Init+0x4c>)
 800089a:	220c      	movs	r2, #12
 800089c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800089e:	4b08      	ldr	r3, [pc, #32]	@ (80008c0 <MX_USART3_UART_Init+0x4c>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008a4:	4b06      	ldr	r3, [pc, #24]	@ (80008c0 <MX_USART3_UART_Init+0x4c>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008aa:	4805      	ldr	r0, [pc, #20]	@ (80008c0 <MX_USART3_UART_Init+0x4c>)
 80008ac:	f004 f988 	bl	8004bc0 <HAL_UART_Init>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80008b6:	f000 f95f 	bl	8000b78 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	20000338 	.word	0x20000338
 80008c4:	40004800 	.word	0x40004800

080008c8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80008cc:	4b11      	ldr	r3, [pc, #68]	@ (8000914 <MX_USART6_UART_Init+0x4c>)
 80008ce:	4a12      	ldr	r2, [pc, #72]	@ (8000918 <MX_USART6_UART_Init+0x50>)
 80008d0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80008d2:	4b10      	ldr	r3, [pc, #64]	@ (8000914 <MX_USART6_UART_Init+0x4c>)
 80008d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008d8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80008da:	4b0e      	ldr	r3, [pc, #56]	@ (8000914 <MX_USART6_UART_Init+0x4c>)
 80008dc:	2200      	movs	r2, #0
 80008de:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80008e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000914 <MX_USART6_UART_Init+0x4c>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80008e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000914 <MX_USART6_UART_Init+0x4c>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80008ec:	4b09      	ldr	r3, [pc, #36]	@ (8000914 <MX_USART6_UART_Init+0x4c>)
 80008ee:	220c      	movs	r2, #12
 80008f0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008f2:	4b08      	ldr	r3, [pc, #32]	@ (8000914 <MX_USART6_UART_Init+0x4c>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80008f8:	4b06      	ldr	r3, [pc, #24]	@ (8000914 <MX_USART6_UART_Init+0x4c>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80008fe:	4805      	ldr	r0, [pc, #20]	@ (8000914 <MX_USART6_UART_Init+0x4c>)
 8000900:	f004 f95e 	bl	8004bc0 <HAL_UART_Init>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800090a:	f000 f935 	bl	8000b78 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	20000380 	.word	0x20000380
 8000918:	40011400 	.word	0x40011400

0800091c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b08c      	sub	sp, #48	@ 0x30
 8000920:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000922:	f107 031c 	add.w	r3, r7, #28
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
 800092a:	605a      	str	r2, [r3, #4]
 800092c:	609a      	str	r2, [r3, #8]
 800092e:	60da      	str	r2, [r3, #12]
 8000930:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	61bb      	str	r3, [r7, #24]
 8000936:	4b4c      	ldr	r3, [pc, #304]	@ (8000a68 <MX_GPIO_Init+0x14c>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093a:	4a4b      	ldr	r2, [pc, #300]	@ (8000a68 <MX_GPIO_Init+0x14c>)
 800093c:	f043 0304 	orr.w	r3, r3, #4
 8000940:	6313      	str	r3, [r2, #48]	@ 0x30
 8000942:	4b49      	ldr	r3, [pc, #292]	@ (8000a68 <MX_GPIO_Init+0x14c>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000946:	f003 0304 	and.w	r3, r3, #4
 800094a:	61bb      	str	r3, [r7, #24]
 800094c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	617b      	str	r3, [r7, #20]
 8000952:	4b45      	ldr	r3, [pc, #276]	@ (8000a68 <MX_GPIO_Init+0x14c>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000956:	4a44      	ldr	r2, [pc, #272]	@ (8000a68 <MX_GPIO_Init+0x14c>)
 8000958:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800095c:	6313      	str	r3, [r2, #48]	@ 0x30
 800095e:	4b42      	ldr	r3, [pc, #264]	@ (8000a68 <MX_GPIO_Init+0x14c>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000962:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000966:	617b      	str	r3, [r7, #20]
 8000968:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	613b      	str	r3, [r7, #16]
 800096e:	4b3e      	ldr	r3, [pc, #248]	@ (8000a68 <MX_GPIO_Init+0x14c>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000972:	4a3d      	ldr	r2, [pc, #244]	@ (8000a68 <MX_GPIO_Init+0x14c>)
 8000974:	f043 0302 	orr.w	r3, r3, #2
 8000978:	6313      	str	r3, [r2, #48]	@ 0x30
 800097a:	4b3b      	ldr	r3, [pc, #236]	@ (8000a68 <MX_GPIO_Init+0x14c>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097e:	f003 0302 	and.w	r3, r3, #2
 8000982:	613b      	str	r3, [r7, #16]
 8000984:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	60fb      	str	r3, [r7, #12]
 800098a:	4b37      	ldr	r3, [pc, #220]	@ (8000a68 <MX_GPIO_Init+0x14c>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098e:	4a36      	ldr	r2, [pc, #216]	@ (8000a68 <MX_GPIO_Init+0x14c>)
 8000990:	f043 0308 	orr.w	r3, r3, #8
 8000994:	6313      	str	r3, [r2, #48]	@ 0x30
 8000996:	4b34      	ldr	r3, [pc, #208]	@ (8000a68 <MX_GPIO_Init+0x14c>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099a:	f003 0308 	and.w	r3, r3, #8
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	60bb      	str	r3, [r7, #8]
 80009a6:	4b30      	ldr	r3, [pc, #192]	@ (8000a68 <MX_GPIO_Init+0x14c>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009aa:	4a2f      	ldr	r2, [pc, #188]	@ (8000a68 <MX_GPIO_Init+0x14c>)
 80009ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009b2:	4b2d      	ldr	r3, [pc, #180]	@ (8000a68 <MX_GPIO_Init+0x14c>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009ba:	60bb      	str	r3, [r7, #8]
 80009bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	607b      	str	r3, [r7, #4]
 80009c2:	4b29      	ldr	r3, [pc, #164]	@ (8000a68 <MX_GPIO_Init+0x14c>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c6:	4a28      	ldr	r2, [pc, #160]	@ (8000a68 <MX_GPIO_Init+0x14c>)
 80009c8:	f043 0301 	orr.w	r3, r3, #1
 80009cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ce:	4b26      	ldr	r3, [pc, #152]	@ (8000a68 <MX_GPIO_Init+0x14c>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d2:	f003 0301 	and.w	r3, r3, #1
 80009d6:	607b      	str	r3, [r7, #4]
 80009d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80009da:	2200      	movs	r2, #0
 80009dc:	f244 0181 	movw	r1, #16513	@ 0x4081
 80009e0:	4822      	ldr	r0, [pc, #136]	@ (8000a6c <MX_GPIO_Init+0x150>)
 80009e2:	f000 fddf 	bl	80015a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80009e6:	2200      	movs	r2, #0
 80009e8:	2140      	movs	r1, #64	@ 0x40
 80009ea:	4821      	ldr	r0, [pc, #132]	@ (8000a70 <MX_GPIO_Init+0x154>)
 80009ec:	f000 fdda 	bl	80015a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80009f0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009f6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80009fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a00:	f107 031c 	add.w	r3, r7, #28
 8000a04:	4619      	mov	r1, r3
 8000a06:	481b      	ldr	r0, [pc, #108]	@ (8000a74 <MX_GPIO_Init+0x158>)
 8000a08:	f000 fc20 	bl	800124c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a0c:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000a10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a12:	2301      	movs	r3, #1
 8000a14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a1e:	f107 031c 	add.w	r3, r7, #28
 8000a22:	4619      	mov	r1, r3
 8000a24:	4811      	ldr	r0, [pc, #68]	@ (8000a6c <MX_GPIO_Init+0x150>)
 8000a26:	f000 fc11 	bl	800124c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a2a:	2340      	movs	r3, #64	@ 0x40
 8000a2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	2300      	movs	r3, #0
 8000a34:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a36:	2300      	movs	r3, #0
 8000a38:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a3a:	f107 031c 	add.w	r3, r7, #28
 8000a3e:	4619      	mov	r1, r3
 8000a40:	480b      	ldr	r0, [pc, #44]	@ (8000a70 <MX_GPIO_Init+0x154>)
 8000a42:	f000 fc03 	bl	800124c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a46:	2380      	movs	r3, #128	@ 0x80
 8000a48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a52:	f107 031c 	add.w	r3, r7, #28
 8000a56:	4619      	mov	r1, r3
 8000a58:	4805      	ldr	r0, [pc, #20]	@ (8000a70 <MX_GPIO_Init+0x154>)
 8000a5a:	f000 fbf7 	bl	800124c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a5e:	bf00      	nop
 8000a60:	3730      	adds	r7, #48	@ 0x30
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40023800 	.word	0x40023800
 8000a6c:	40020400 	.word	0x40020400
 8000a70:	40021800 	.word	0x40021800
 8000a74:	40020800 	.word	0x40020800

08000a78 <sensorTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_sensorTask */
void sensorTask(void *argument)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af02      	add	r7, sp, #8
 8000a7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	  QMC_Init();
 8000a80:	f7ff fda4 	bl	80005cc <QMC_Init>

	HAL_UART_Transmit(&huart6,cwjap,strlen((char*)cwjap),100);
 8000a84:	4833      	ldr	r0, [pc, #204]	@ (8000b54 <sensorTask+0xdc>)
 8000a86:	f7ff fbb3 	bl	80001f0 <strlen>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	b29a      	uxth	r2, r3
 8000a8e:	2364      	movs	r3, #100	@ 0x64
 8000a90:	4930      	ldr	r1, [pc, #192]	@ (8000b54 <sensorTask+0xdc>)
 8000a92:	4831      	ldr	r0, [pc, #196]	@ (8000b58 <sensorTask+0xe0>)
 8000a94:	f004 f8e4 	bl	8004c60 <HAL_UART_Transmit>
	osDelay(5000);
 8000a98:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000a9c:	f004 fdac 	bl	80055f8 <osDelay>

  /* Infinite loop */
  for(;;)
  {
	  HAL_UART_Transmit(&huart6,tcp,strlen((char*)tcp),100);
 8000aa0:	482e      	ldr	r0, [pc, #184]	@ (8000b5c <sensorTask+0xe4>)
 8000aa2:	f7ff fba5 	bl	80001f0 <strlen>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	b29a      	uxth	r2, r3
 8000aaa:	2364      	movs	r3, #100	@ 0x64
 8000aac:	492b      	ldr	r1, [pc, #172]	@ (8000b5c <sensorTask+0xe4>)
 8000aae:	482a      	ldr	r0, [pc, #168]	@ (8000b58 <sensorTask+0xe0>)
 8000ab0:	f004 f8d6 	bl	8004c60 <HAL_UART_Transmit>
	  osDelay(1000);
 8000ab4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ab8:	f004 fd9e 	bl	80055f8 <osDelay>
	  QMC_READ(&Q);
 8000abc:	4828      	ldr	r0, [pc, #160]	@ (8000b60 <sensorTask+0xe8>)
 8000abe:	f7ff fdad 	bl	800061c <QMC_READ>
      osDelay(10);
 8000ac2:	200a      	movs	r0, #10
 8000ac4:	f004 fd98 	bl	80055f8 <osDelay>
    sprintf(wibuf,"GET /test?data=%d,%d,%d HTTP/1.1\r\nHost: 192.168.146.237\r\nConnection: close\r\n\r\n",Q.x,Q.y,Q.z);
 8000ac8:	4b25      	ldr	r3, [pc, #148]	@ (8000b60 <sensorTask+0xe8>)
 8000aca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ace:	461a      	mov	r2, r3
 8000ad0:	4b23      	ldr	r3, [pc, #140]	@ (8000b60 <sensorTask+0xe8>)
 8000ad2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4b21      	ldr	r3, [pc, #132]	@ (8000b60 <sensorTask+0xe8>)
 8000ada:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000ade:	9300      	str	r3, [sp, #0]
 8000ae0:	460b      	mov	r3, r1
 8000ae2:	4920      	ldr	r1, [pc, #128]	@ (8000b64 <sensorTask+0xec>)
 8000ae4:	4820      	ldr	r0, [pc, #128]	@ (8000b68 <sensorTask+0xf0>)
 8000ae6:	f007 fa2f 	bl	8007f48 <siprintf>

    sprintf(buf, "AT+CIPSEND=%d\r\n", strlen(wibuf));
 8000aea:	481f      	ldr	r0, [pc, #124]	@ (8000b68 <sensorTask+0xf0>)
 8000aec:	f7ff fb80 	bl	80001f0 <strlen>
 8000af0:	4603      	mov	r3, r0
 8000af2:	461a      	mov	r2, r3
 8000af4:	491d      	ldr	r1, [pc, #116]	@ (8000b6c <sensorTask+0xf4>)
 8000af6:	481e      	ldr	r0, [pc, #120]	@ (8000b70 <sensorTask+0xf8>)
 8000af8:	f007 fa26 	bl	8007f48 <siprintf>
    HAL_UART_Transmit(&huart6,(uint8_t*)buf,strlen(buf),100);
 8000afc:	481c      	ldr	r0, [pc, #112]	@ (8000b70 <sensorTask+0xf8>)
 8000afe:	f7ff fb77 	bl	80001f0 <strlen>
 8000b02:	4603      	mov	r3, r0
 8000b04:	b29a      	uxth	r2, r3
 8000b06:	2364      	movs	r3, #100	@ 0x64
 8000b08:	4919      	ldr	r1, [pc, #100]	@ (8000b70 <sensorTask+0xf8>)
 8000b0a:	4813      	ldr	r0, [pc, #76]	@ (8000b58 <sensorTask+0xe0>)
 8000b0c:	f004 f8a8 	bl	8004c60 <HAL_UART_Transmit>
    osDelay(300);
 8000b10:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000b14:	f004 fd70 	bl	80055f8 <osDelay>
    HAL_UART_Transmit(&huart6,(uint8_t*)wibuf,strlen(wibuf),100);
 8000b18:	4813      	ldr	r0, [pc, #76]	@ (8000b68 <sensorTask+0xf0>)
 8000b1a:	f7ff fb69 	bl	80001f0 <strlen>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	b29a      	uxth	r2, r3
 8000b22:	2364      	movs	r3, #100	@ 0x64
 8000b24:	4910      	ldr	r1, [pc, #64]	@ (8000b68 <sensorTask+0xf0>)
 8000b26:	480c      	ldr	r0, [pc, #48]	@ (8000b58 <sensorTask+0xe0>)
 8000b28:	f004 f89a 	bl	8004c60 <HAL_UART_Transmit>
    osDelay(300);
 8000b2c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000b30:	f004 fd62 	bl	80055f8 <osDelay>
    HAL_UART_Transmit(&huart6,close,strlen((char*)close),100);
 8000b34:	480f      	ldr	r0, [pc, #60]	@ (8000b74 <sensorTask+0xfc>)
 8000b36:	f7ff fb5b 	bl	80001f0 <strlen>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	b29a      	uxth	r2, r3
 8000b3e:	2364      	movs	r3, #100	@ 0x64
 8000b40:	490c      	ldr	r1, [pc, #48]	@ (8000b74 <sensorTask+0xfc>)
 8000b42:	4805      	ldr	r0, [pc, #20]	@ (8000b58 <sensorTask+0xe0>)
 8000b44:	f004 f88c 	bl	8004c60 <HAL_UART_Transmit>
    osDelay(300);
 8000b48:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000b4c:	f004 fd54 	bl	80055f8 <osDelay>
  {
 8000b50:	bf00      	nop
 8000b52:	e7a5      	b.n	8000aa0 <sensorTask+0x28>
 8000b54:	20000000 	.word	0x20000000
 8000b58:	20000380 	.word	0x20000380
 8000b5c:	20000020 	.word	0x20000020
 8000b60:	200002d8 	.word	0x200002d8
 8000b64:	080088b0 	.word	0x080088b0
 8000b68:	200001d8 	.word	0x200001d8
 8000b6c:	08008900 	.word	0x08008900
 8000b70:	200000d8 	.word	0x200000d8
 8000b74:	2000004c 	.word	0x2000004c

08000b78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b7c:	b672      	cpsid	i
}
 8000b7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b80:	bf00      	nop
 8000b82:	e7fd      	b.n	8000b80 <Error_Handler+0x8>

08000b84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	607b      	str	r3, [r7, #4]
 8000b8e:	4b12      	ldr	r3, [pc, #72]	@ (8000bd8 <HAL_MspInit+0x54>)
 8000b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b92:	4a11      	ldr	r2, [pc, #68]	@ (8000bd8 <HAL_MspInit+0x54>)
 8000b94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b98:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b9a:	4b0f      	ldr	r3, [pc, #60]	@ (8000bd8 <HAL_MspInit+0x54>)
 8000b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ba2:	607b      	str	r3, [r7, #4]
 8000ba4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	603b      	str	r3, [r7, #0]
 8000baa:	4b0b      	ldr	r3, [pc, #44]	@ (8000bd8 <HAL_MspInit+0x54>)
 8000bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bae:	4a0a      	ldr	r2, [pc, #40]	@ (8000bd8 <HAL_MspInit+0x54>)
 8000bb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bb4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bb6:	4b08      	ldr	r3, [pc, #32]	@ (8000bd8 <HAL_MspInit+0x54>)
 8000bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bbe:	603b      	str	r3, [r7, #0]
 8000bc0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	210f      	movs	r1, #15
 8000bc6:	f06f 0001 	mvn.w	r0, #1
 8000bca:	f000 fad8 	bl	800117e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40023800 	.word	0x40023800

08000bdc <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b08a      	sub	sp, #40	@ 0x28
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be4:	f107 0314 	add.w	r3, r7, #20
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	605a      	str	r2, [r3, #4]
 8000bee:	609a      	str	r2, [r3, #8]
 8000bf0:	60da      	str	r2, [r3, #12]
 8000bf2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a21      	ldr	r2, [pc, #132]	@ (8000c80 <HAL_I2C_MspInit+0xa4>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d13c      	bne.n	8000c78 <HAL_I2C_MspInit+0x9c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bfe:	2300      	movs	r3, #0
 8000c00:	613b      	str	r3, [r7, #16]
 8000c02:	4b20      	ldr	r3, [pc, #128]	@ (8000c84 <HAL_I2C_MspInit+0xa8>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c06:	4a1f      	ldr	r2, [pc, #124]	@ (8000c84 <HAL_I2C_MspInit+0xa8>)
 8000c08:	f043 0302 	orr.w	r3, r3, #2
 8000c0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c0e:	4b1d      	ldr	r3, [pc, #116]	@ (8000c84 <HAL_I2C_MspInit+0xa8>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c12:	f003 0302 	and.w	r3, r3, #2
 8000c16:	613b      	str	r3, [r7, #16]
 8000c18:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c1a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000c1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c20:	2312      	movs	r3, #18
 8000c22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c24:	2300      	movs	r3, #0
 8000c26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c28:	2303      	movs	r3, #3
 8000c2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c2c:	2304      	movs	r3, #4
 8000c2e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c30:	f107 0314 	add.w	r3, r7, #20
 8000c34:	4619      	mov	r1, r3
 8000c36:	4814      	ldr	r0, [pc, #80]	@ (8000c88 <HAL_I2C_MspInit+0xac>)
 8000c38:	f000 fb08 	bl	800124c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	4b10      	ldr	r3, [pc, #64]	@ (8000c84 <HAL_I2C_MspInit+0xa8>)
 8000c42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c44:	4a0f      	ldr	r2, [pc, #60]	@ (8000c84 <HAL_I2C_MspInit+0xa8>)
 8000c46:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c4a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c4c:	4b0d      	ldr	r3, [pc, #52]	@ (8000c84 <HAL_I2C_MspInit+0xa8>)
 8000c4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c54:	60fb      	str	r3, [r7, #12]
 8000c56:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	2105      	movs	r1, #5
 8000c5c:	201f      	movs	r0, #31
 8000c5e:	f000 fa8e 	bl	800117e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000c62:	201f      	movs	r0, #31
 8000c64:	f000 faa7 	bl	80011b6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8000c68:	2200      	movs	r2, #0
 8000c6a:	2105      	movs	r1, #5
 8000c6c:	2020      	movs	r0, #32
 8000c6e:	f000 fa86 	bl	800117e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000c72:	2020      	movs	r0, #32
 8000c74:	f000 fa9f 	bl	80011b6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000c78:	bf00      	nop
 8000c7a:	3728      	adds	r7, #40	@ 0x28
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	40005400 	.word	0x40005400
 8000c84:	40023800 	.word	0x40023800
 8000c88:	40020400 	.word	0x40020400

08000c8c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b08c      	sub	sp, #48	@ 0x30
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c94:	f107 031c 	add.w	r3, r7, #28
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	609a      	str	r2, [r3, #8]
 8000ca0:	60da      	str	r2, [r3, #12]
 8000ca2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a32      	ldr	r2, [pc, #200]	@ (8000d74 <HAL_UART_MspInit+0xe8>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d12d      	bne.n	8000d0a <HAL_UART_MspInit+0x7e>
  {
    /* USER CODE BEGIN USART3_MspInit 0 */

    /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	61bb      	str	r3, [r7, #24]
 8000cb2:	4b31      	ldr	r3, [pc, #196]	@ (8000d78 <HAL_UART_MspInit+0xec>)
 8000cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cb6:	4a30      	ldr	r2, [pc, #192]	@ (8000d78 <HAL_UART_MspInit+0xec>)
 8000cb8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000cbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cbe:	4b2e      	ldr	r3, [pc, #184]	@ (8000d78 <HAL_UART_MspInit+0xec>)
 8000cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cc2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000cc6:	61bb      	str	r3, [r7, #24]
 8000cc8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	617b      	str	r3, [r7, #20]
 8000cce:	4b2a      	ldr	r3, [pc, #168]	@ (8000d78 <HAL_UART_MspInit+0xec>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd2:	4a29      	ldr	r2, [pc, #164]	@ (8000d78 <HAL_UART_MspInit+0xec>)
 8000cd4:	f043 0308 	orr.w	r3, r3, #8
 8000cd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cda:	4b27      	ldr	r3, [pc, #156]	@ (8000d78 <HAL_UART_MspInit+0xec>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cde:	f003 0308 	and.w	r3, r3, #8
 8000ce2:	617b      	str	r3, [r7, #20]
 8000ce4:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000ce6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000cea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cec:	2302      	movs	r3, #2
 8000cee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf4:	2303      	movs	r3, #3
 8000cf6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000cf8:	2307      	movs	r3, #7
 8000cfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cfc:	f107 031c 	add.w	r3, r7, #28
 8000d00:	4619      	mov	r1, r3
 8000d02:	481e      	ldr	r0, [pc, #120]	@ (8000d7c <HAL_UART_MspInit+0xf0>)
 8000d04:	f000 faa2 	bl	800124c <HAL_GPIO_Init>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 8000d08:	e030      	b.n	8000d6c <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART6)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4a1c      	ldr	r2, [pc, #112]	@ (8000d80 <HAL_UART_MspInit+0xf4>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d12b      	bne.n	8000d6c <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000d14:	2300      	movs	r3, #0
 8000d16:	613b      	str	r3, [r7, #16]
 8000d18:	4b17      	ldr	r3, [pc, #92]	@ (8000d78 <HAL_UART_MspInit+0xec>)
 8000d1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d1c:	4a16      	ldr	r2, [pc, #88]	@ (8000d78 <HAL_UART_MspInit+0xec>)
 8000d1e:	f043 0320 	orr.w	r3, r3, #32
 8000d22:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d24:	4b14      	ldr	r3, [pc, #80]	@ (8000d78 <HAL_UART_MspInit+0xec>)
 8000d26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d28:	f003 0320 	and.w	r3, r3, #32
 8000d2c:	613b      	str	r3, [r7, #16]
 8000d2e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d30:	2300      	movs	r3, #0
 8000d32:	60fb      	str	r3, [r7, #12]
 8000d34:	4b10      	ldr	r3, [pc, #64]	@ (8000d78 <HAL_UART_MspInit+0xec>)
 8000d36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d38:	4a0f      	ldr	r2, [pc, #60]	@ (8000d78 <HAL_UART_MspInit+0xec>)
 8000d3a:	f043 0304 	orr.w	r3, r3, #4
 8000d3e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d40:	4b0d      	ldr	r3, [pc, #52]	@ (8000d78 <HAL_UART_MspInit+0xec>)
 8000d42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d44:	f003 0304 	and.w	r3, r3, #4
 8000d48:	60fb      	str	r3, [r7, #12]
 8000d4a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d4c:	23c0      	movs	r3, #192	@ 0xc0
 8000d4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d50:	2302      	movs	r3, #2
 8000d52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d54:	2300      	movs	r3, #0
 8000d56:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d58:	2303      	movs	r3, #3
 8000d5a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000d5c:	2308      	movs	r3, #8
 8000d5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d60:	f107 031c 	add.w	r3, r7, #28
 8000d64:	4619      	mov	r1, r3
 8000d66:	4807      	ldr	r0, [pc, #28]	@ (8000d84 <HAL_UART_MspInit+0xf8>)
 8000d68:	f000 fa70 	bl	800124c <HAL_GPIO_Init>
}
 8000d6c:	bf00      	nop
 8000d6e:	3730      	adds	r7, #48	@ 0x30
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	40004800 	.word	0x40004800
 8000d78:	40023800 	.word	0x40023800
 8000d7c:	40020c00 	.word	0x40020c00
 8000d80:	40011400 	.word	0x40011400
 8000d84:	40020800 	.word	0x40020800

08000d88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d8c:	bf00      	nop
 8000d8e:	e7fd      	b.n	8000d8c <NMI_Handler+0x4>

08000d90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d94:	bf00      	nop
 8000d96:	e7fd      	b.n	8000d94 <HardFault_Handler+0x4>

08000d98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d9c:	bf00      	nop
 8000d9e:	e7fd      	b.n	8000d9c <MemManage_Handler+0x4>

08000da0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000da4:	bf00      	nop
 8000da6:	e7fd      	b.n	8000da4 <BusFault_Handler+0x4>

08000da8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dac:	bf00      	nop
 8000dae:	e7fd      	b.n	8000dac <UsageFault_Handler+0x4>

08000db0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr

08000dbe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dc2:	f000 f8e1 	bl	8000f88 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000dc6:	f006 f83f 	bl	8006e48 <xTaskGetSchedulerState>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	d001      	beq.n	8000dd4 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000dd0:	f006 fe3a 	bl	8007a48 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dd4:	bf00      	nop
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000ddc:	4802      	ldr	r0, [pc, #8]	@ (8000de8 <I2C1_EV_IRQHandler+0x10>)
 8000dde:	f001 f93b 	bl	8002058 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000de2:	bf00      	nop
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	200002e4 	.word	0x200002e4

08000dec <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000df0:	4802      	ldr	r0, [pc, #8]	@ (8000dfc <I2C1_ER_IRQHandler+0x10>)
 8000df2:	f001 faa2 	bl	800233a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000df6:	bf00      	nop
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	200002e4 	.word	0x200002e4

08000e00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b086      	sub	sp, #24
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e08:	4a14      	ldr	r2, [pc, #80]	@ (8000e5c <_sbrk+0x5c>)
 8000e0a:	4b15      	ldr	r3, [pc, #84]	@ (8000e60 <_sbrk+0x60>)
 8000e0c:	1ad3      	subs	r3, r2, r3
 8000e0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e14:	4b13      	ldr	r3, [pc, #76]	@ (8000e64 <_sbrk+0x64>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d102      	bne.n	8000e22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e1c:	4b11      	ldr	r3, [pc, #68]	@ (8000e64 <_sbrk+0x64>)
 8000e1e:	4a12      	ldr	r2, [pc, #72]	@ (8000e68 <_sbrk+0x68>)
 8000e20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e22:	4b10      	ldr	r3, [pc, #64]	@ (8000e64 <_sbrk+0x64>)
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4413      	add	r3, r2
 8000e2a:	693a      	ldr	r2, [r7, #16]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d207      	bcs.n	8000e40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e30:	f007 f8b4 	bl	8007f9c <__errno>
 8000e34:	4603      	mov	r3, r0
 8000e36:	220c      	movs	r2, #12
 8000e38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e3e:	e009      	b.n	8000e54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e40:	4b08      	ldr	r3, [pc, #32]	@ (8000e64 <_sbrk+0x64>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e46:	4b07      	ldr	r3, [pc, #28]	@ (8000e64 <_sbrk+0x64>)
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4413      	add	r3, r2
 8000e4e:	4a05      	ldr	r2, [pc, #20]	@ (8000e64 <_sbrk+0x64>)
 8000e50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e52:	68fb      	ldr	r3, [r7, #12]
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	3718      	adds	r7, #24
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	20030000 	.word	0x20030000
 8000e60:	00000400 	.word	0x00000400
 8000e64:	200003cc 	.word	0x200003cc
 8000e68:	20004e70 	.word	0x20004e70

08000e6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e70:	4b06      	ldr	r3, [pc, #24]	@ (8000e8c <SystemInit+0x20>)
 8000e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e76:	4a05      	ldr	r2, [pc, #20]	@ (8000e8c <SystemInit+0x20>)
 8000e78:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e7c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e80:	bf00      	nop
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	e000ed00 	.word	0xe000ed00

08000e90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000e90:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ec8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e94:	f7ff ffea 	bl	8000e6c <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e98:	480c      	ldr	r0, [pc, #48]	@ (8000ecc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e9a:	490d      	ldr	r1, [pc, #52]	@ (8000ed0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e9c:	4a0d      	ldr	r2, [pc, #52]	@ (8000ed4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ea0:	e002      	b.n	8000ea8 <LoopCopyDataInit>

08000ea2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ea2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ea4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ea6:	3304      	adds	r3, #4

08000ea8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ea8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eaa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000eac:	d3f9      	bcc.n	8000ea2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eae:	4a0a      	ldr	r2, [pc, #40]	@ (8000ed8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000eb0:	4c0a      	ldr	r4, [pc, #40]	@ (8000edc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000eb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eb4:	e001      	b.n	8000eba <LoopFillZerobss>

08000eb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eb8:	3204      	adds	r2, #4

08000eba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ebc:	d3fb      	bcc.n	8000eb6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000ebe:	f007 f873 	bl	8007fa8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ec2:	f7ff fc0b 	bl	80006dc <main>
  bx  lr    
 8000ec6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000ec8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000ecc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ed0:	200000bc 	.word	0x200000bc
  ldr r2, =_sidata
 8000ed4:	080089a8 	.word	0x080089a8
  ldr r2, =_sbss
 8000ed8:	200000bc 	.word	0x200000bc
  ldr r4, =_ebss
 8000edc:	20004e6c 	.word	0x20004e6c

08000ee0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ee0:	e7fe      	b.n	8000ee0 <ADC_IRQHandler>
	...

08000ee4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ee8:	4b0e      	ldr	r3, [pc, #56]	@ (8000f24 <HAL_Init+0x40>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a0d      	ldr	r2, [pc, #52]	@ (8000f24 <HAL_Init+0x40>)
 8000eee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ef2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ef4:	4b0b      	ldr	r3, [pc, #44]	@ (8000f24 <HAL_Init+0x40>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a0a      	ldr	r2, [pc, #40]	@ (8000f24 <HAL_Init+0x40>)
 8000efa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000efe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f00:	4b08      	ldr	r3, [pc, #32]	@ (8000f24 <HAL_Init+0x40>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a07      	ldr	r2, [pc, #28]	@ (8000f24 <HAL_Init+0x40>)
 8000f06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f0c:	2003      	movs	r0, #3
 8000f0e:	f000 f92b 	bl	8001168 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f12:	200f      	movs	r0, #15
 8000f14:	f000 f808 	bl	8000f28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f18:	f7ff fe34 	bl	8000b84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f1c:	2300      	movs	r3, #0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	40023c00 	.word	0x40023c00

08000f28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f30:	4b12      	ldr	r3, [pc, #72]	@ (8000f7c <HAL_InitTick+0x54>)
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	4b12      	ldr	r3, [pc, #72]	@ (8000f80 <HAL_InitTick+0x58>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	4619      	mov	r1, r3
 8000f3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f46:	4618      	mov	r0, r3
 8000f48:	f000 f943 	bl	80011d2 <HAL_SYSTICK_Config>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
 8000f54:	e00e      	b.n	8000f74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2b0f      	cmp	r3, #15
 8000f5a:	d80a      	bhi.n	8000f72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	6879      	ldr	r1, [r7, #4]
 8000f60:	f04f 30ff 	mov.w	r0, #4294967295
 8000f64:	f000 f90b 	bl	800117e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f68:	4a06      	ldr	r2, [pc, #24]	@ (8000f84 <HAL_InitTick+0x5c>)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	e000      	b.n	8000f74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3708      	adds	r7, #8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	2000005c 	.word	0x2000005c
 8000f80:	20000064 	.word	0x20000064
 8000f84:	20000060 	.word	0x20000060

08000f88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f8c:	4b06      	ldr	r3, [pc, #24]	@ (8000fa8 <HAL_IncTick+0x20>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	461a      	mov	r2, r3
 8000f92:	4b06      	ldr	r3, [pc, #24]	@ (8000fac <HAL_IncTick+0x24>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4413      	add	r3, r2
 8000f98:	4a04      	ldr	r2, [pc, #16]	@ (8000fac <HAL_IncTick+0x24>)
 8000f9a:	6013      	str	r3, [r2, #0]
}
 8000f9c:	bf00      	nop
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	20000064 	.word	0x20000064
 8000fac:	200003d0 	.word	0x200003d0

08000fb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fb4:	4b03      	ldr	r3, [pc, #12]	@ (8000fc4 <HAL_GetTick+0x14>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	200003d0 	.word	0x200003d0

08000fc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b085      	sub	sp, #20
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	f003 0307 	and.w	r3, r3, #7
 8000fd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fd8:	4b0c      	ldr	r3, [pc, #48]	@ (800100c <__NVIC_SetPriorityGrouping+0x44>)
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fde:	68ba      	ldr	r2, [r7, #8]
 8000fe0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ff0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ff4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ff8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ffa:	4a04      	ldr	r2, [pc, #16]	@ (800100c <__NVIC_SetPriorityGrouping+0x44>)
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	60d3      	str	r3, [r2, #12]
}
 8001000:	bf00      	nop
 8001002:	3714      	adds	r7, #20
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	e000ed00 	.word	0xe000ed00

08001010 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001014:	4b04      	ldr	r3, [pc, #16]	@ (8001028 <__NVIC_GetPriorityGrouping+0x18>)
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	0a1b      	lsrs	r3, r3, #8
 800101a:	f003 0307 	and.w	r3, r3, #7
}
 800101e:	4618      	mov	r0, r3
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	e000ed00 	.word	0xe000ed00

0800102c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103a:	2b00      	cmp	r3, #0
 800103c:	db0b      	blt.n	8001056 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800103e:	79fb      	ldrb	r3, [r7, #7]
 8001040:	f003 021f 	and.w	r2, r3, #31
 8001044:	4907      	ldr	r1, [pc, #28]	@ (8001064 <__NVIC_EnableIRQ+0x38>)
 8001046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104a:	095b      	lsrs	r3, r3, #5
 800104c:	2001      	movs	r0, #1
 800104e:	fa00 f202 	lsl.w	r2, r0, r2
 8001052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001056:	bf00      	nop
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	e000e100 	.word	0xe000e100

08001068 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	6039      	str	r1, [r7, #0]
 8001072:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001074:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001078:	2b00      	cmp	r3, #0
 800107a:	db0a      	blt.n	8001092 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	b2da      	uxtb	r2, r3
 8001080:	490c      	ldr	r1, [pc, #48]	@ (80010b4 <__NVIC_SetPriority+0x4c>)
 8001082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001086:	0112      	lsls	r2, r2, #4
 8001088:	b2d2      	uxtb	r2, r2
 800108a:	440b      	add	r3, r1
 800108c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001090:	e00a      	b.n	80010a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	b2da      	uxtb	r2, r3
 8001096:	4908      	ldr	r1, [pc, #32]	@ (80010b8 <__NVIC_SetPriority+0x50>)
 8001098:	79fb      	ldrb	r3, [r7, #7]
 800109a:	f003 030f 	and.w	r3, r3, #15
 800109e:	3b04      	subs	r3, #4
 80010a0:	0112      	lsls	r2, r2, #4
 80010a2:	b2d2      	uxtb	r2, r2
 80010a4:	440b      	add	r3, r1
 80010a6:	761a      	strb	r2, [r3, #24]
}
 80010a8:	bf00      	nop
 80010aa:	370c      	adds	r7, #12
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr
 80010b4:	e000e100 	.word	0xe000e100
 80010b8:	e000ed00 	.word	0xe000ed00

080010bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010bc:	b480      	push	{r7}
 80010be:	b089      	sub	sp, #36	@ 0x24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	60f8      	str	r0, [r7, #12]
 80010c4:	60b9      	str	r1, [r7, #8]
 80010c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	f003 0307 	and.w	r3, r3, #7
 80010ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	f1c3 0307 	rsb	r3, r3, #7
 80010d6:	2b04      	cmp	r3, #4
 80010d8:	bf28      	it	cs
 80010da:	2304      	movcs	r3, #4
 80010dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	3304      	adds	r3, #4
 80010e2:	2b06      	cmp	r3, #6
 80010e4:	d902      	bls.n	80010ec <NVIC_EncodePriority+0x30>
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	3b03      	subs	r3, #3
 80010ea:	e000      	b.n	80010ee <NVIC_EncodePriority+0x32>
 80010ec:	2300      	movs	r3, #0
 80010ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f0:	f04f 32ff 	mov.w	r2, #4294967295
 80010f4:	69bb      	ldr	r3, [r7, #24]
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	43da      	mvns	r2, r3
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	401a      	ands	r2, r3
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001104:	f04f 31ff 	mov.w	r1, #4294967295
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	fa01 f303 	lsl.w	r3, r1, r3
 800110e:	43d9      	mvns	r1, r3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001114:	4313      	orrs	r3, r2
         );
}
 8001116:	4618      	mov	r0, r3
 8001118:	3724      	adds	r7, #36	@ 0x24
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
	...

08001124 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	3b01      	subs	r3, #1
 8001130:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001134:	d301      	bcc.n	800113a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001136:	2301      	movs	r3, #1
 8001138:	e00f      	b.n	800115a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800113a:	4a0a      	ldr	r2, [pc, #40]	@ (8001164 <SysTick_Config+0x40>)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	3b01      	subs	r3, #1
 8001140:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001142:	210f      	movs	r1, #15
 8001144:	f04f 30ff 	mov.w	r0, #4294967295
 8001148:	f7ff ff8e 	bl	8001068 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800114c:	4b05      	ldr	r3, [pc, #20]	@ (8001164 <SysTick_Config+0x40>)
 800114e:	2200      	movs	r2, #0
 8001150:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001152:	4b04      	ldr	r3, [pc, #16]	@ (8001164 <SysTick_Config+0x40>)
 8001154:	2207      	movs	r2, #7
 8001156:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001158:	2300      	movs	r3, #0
}
 800115a:	4618      	mov	r0, r3
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	e000e010 	.word	0xe000e010

08001168 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f7ff ff29 	bl	8000fc8 <__NVIC_SetPriorityGrouping>
}
 8001176:	bf00      	nop
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800117e:	b580      	push	{r7, lr}
 8001180:	b086      	sub	sp, #24
 8001182:	af00      	add	r7, sp, #0
 8001184:	4603      	mov	r3, r0
 8001186:	60b9      	str	r1, [r7, #8]
 8001188:	607a      	str	r2, [r7, #4]
 800118a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800118c:	2300      	movs	r3, #0
 800118e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001190:	f7ff ff3e 	bl	8001010 <__NVIC_GetPriorityGrouping>
 8001194:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001196:	687a      	ldr	r2, [r7, #4]
 8001198:	68b9      	ldr	r1, [r7, #8]
 800119a:	6978      	ldr	r0, [r7, #20]
 800119c:	f7ff ff8e 	bl	80010bc <NVIC_EncodePriority>
 80011a0:	4602      	mov	r2, r0
 80011a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011a6:	4611      	mov	r1, r2
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff ff5d 	bl	8001068 <__NVIC_SetPriority>
}
 80011ae:	bf00      	nop
 80011b0:	3718      	adds	r7, #24
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b082      	sub	sp, #8
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	4603      	mov	r3, r0
 80011be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff ff31 	bl	800102c <__NVIC_EnableIRQ>
}
 80011ca:	bf00      	nop
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b082      	sub	sp, #8
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f7ff ffa2 	bl	8001124 <SysTick_Config>
 80011e0:	4603      	mov	r3, r0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}

080011ea <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011ea:	b480      	push	{r7}
 80011ec:	b083      	sub	sp, #12
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	2b02      	cmp	r3, #2
 80011fc:	d004      	beq.n	8001208 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2280      	movs	r2, #128	@ 0x80
 8001202:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001204:	2301      	movs	r3, #1
 8001206:	e00c      	b.n	8001222 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2205      	movs	r2, #5
 800120c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f022 0201 	bic.w	r2, r2, #1
 800121e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001220:	2300      	movs	r3, #0
}
 8001222:	4618      	mov	r0, r3
 8001224:	370c      	adds	r7, #12
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr

0800122e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800122e:	b480      	push	{r7}
 8001230:	b083      	sub	sp, #12
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800123c:	b2db      	uxtb	r3, r3
}
 800123e:	4618      	mov	r0, r3
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
	...

0800124c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800124c:	b480      	push	{r7}
 800124e:	b089      	sub	sp, #36	@ 0x24
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001256:	2300      	movs	r3, #0
 8001258:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800125a:	2300      	movs	r3, #0
 800125c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800125e:	2300      	movs	r3, #0
 8001260:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001262:	2300      	movs	r3, #0
 8001264:	61fb      	str	r3, [r7, #28]
 8001266:	e177      	b.n	8001558 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001268:	2201      	movs	r2, #1
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	697a      	ldr	r2, [r7, #20]
 8001278:	4013      	ands	r3, r2
 800127a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800127c:	693a      	ldr	r2, [r7, #16]
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	429a      	cmp	r2, r3
 8001282:	f040 8166 	bne.w	8001552 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f003 0303 	and.w	r3, r3, #3
 800128e:	2b01      	cmp	r3, #1
 8001290:	d005      	beq.n	800129e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800129a:	2b02      	cmp	r3, #2
 800129c:	d130      	bne.n	8001300 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	2203      	movs	r2, #3
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	43db      	mvns	r3, r3
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	4013      	ands	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	68da      	ldr	r2, [r3, #12]
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	fa02 f303 	lsl.w	r3, r2, r3
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012d4:	2201      	movs	r2, #1
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	43db      	mvns	r3, r3
 80012de:	69ba      	ldr	r2, [r7, #24]
 80012e0:	4013      	ands	r3, r2
 80012e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	091b      	lsrs	r3, r3, #4
 80012ea:	f003 0201 	and.w	r2, r3, #1
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f003 0303 	and.w	r3, r3, #3
 8001308:	2b03      	cmp	r3, #3
 800130a:	d017      	beq.n	800133c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	2203      	movs	r2, #3
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	43db      	mvns	r3, r3
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	4013      	ands	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	689a      	ldr	r2, [r3, #8]
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	4313      	orrs	r3, r2
 8001334:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f003 0303 	and.w	r3, r3, #3
 8001344:	2b02      	cmp	r3, #2
 8001346:	d123      	bne.n	8001390 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	08da      	lsrs	r2, r3, #3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	3208      	adds	r2, #8
 8001350:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001354:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	f003 0307 	and.w	r3, r3, #7
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	220f      	movs	r2, #15
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	43db      	mvns	r3, r3
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	4013      	ands	r3, r2
 800136a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	691a      	ldr	r2, [r3, #16]
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	f003 0307 	and.w	r3, r3, #7
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	4313      	orrs	r3, r2
 8001380:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	08da      	lsrs	r2, r3, #3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	3208      	adds	r2, #8
 800138a:	69b9      	ldr	r1, [r7, #24]
 800138c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	2203      	movs	r2, #3
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	43db      	mvns	r3, r3
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	4013      	ands	r3, r2
 80013a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f003 0203 	and.w	r2, r3, #3
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	f000 80c0 	beq.w	8001552 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	60fb      	str	r3, [r7, #12]
 80013d6:	4b66      	ldr	r3, [pc, #408]	@ (8001570 <HAL_GPIO_Init+0x324>)
 80013d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013da:	4a65      	ldr	r2, [pc, #404]	@ (8001570 <HAL_GPIO_Init+0x324>)
 80013dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80013e2:	4b63      	ldr	r3, [pc, #396]	@ (8001570 <HAL_GPIO_Init+0x324>)
 80013e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013ea:	60fb      	str	r3, [r7, #12]
 80013ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013ee:	4a61      	ldr	r2, [pc, #388]	@ (8001574 <HAL_GPIO_Init+0x328>)
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	089b      	lsrs	r3, r3, #2
 80013f4:	3302      	adds	r3, #2
 80013f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	f003 0303 	and.w	r3, r3, #3
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	220f      	movs	r2, #15
 8001406:	fa02 f303 	lsl.w	r3, r2, r3
 800140a:	43db      	mvns	r3, r3
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	4013      	ands	r3, r2
 8001410:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4a58      	ldr	r2, [pc, #352]	@ (8001578 <HAL_GPIO_Init+0x32c>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d037      	beq.n	800148a <HAL_GPIO_Init+0x23e>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a57      	ldr	r2, [pc, #348]	@ (800157c <HAL_GPIO_Init+0x330>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d031      	beq.n	8001486 <HAL_GPIO_Init+0x23a>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4a56      	ldr	r2, [pc, #344]	@ (8001580 <HAL_GPIO_Init+0x334>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d02b      	beq.n	8001482 <HAL_GPIO_Init+0x236>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4a55      	ldr	r2, [pc, #340]	@ (8001584 <HAL_GPIO_Init+0x338>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d025      	beq.n	800147e <HAL_GPIO_Init+0x232>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a54      	ldr	r2, [pc, #336]	@ (8001588 <HAL_GPIO_Init+0x33c>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d01f      	beq.n	800147a <HAL_GPIO_Init+0x22e>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4a53      	ldr	r2, [pc, #332]	@ (800158c <HAL_GPIO_Init+0x340>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d019      	beq.n	8001476 <HAL_GPIO_Init+0x22a>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4a52      	ldr	r2, [pc, #328]	@ (8001590 <HAL_GPIO_Init+0x344>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d013      	beq.n	8001472 <HAL_GPIO_Init+0x226>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a51      	ldr	r2, [pc, #324]	@ (8001594 <HAL_GPIO_Init+0x348>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d00d      	beq.n	800146e <HAL_GPIO_Init+0x222>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4a50      	ldr	r2, [pc, #320]	@ (8001598 <HAL_GPIO_Init+0x34c>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d007      	beq.n	800146a <HAL_GPIO_Init+0x21e>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4a4f      	ldr	r2, [pc, #316]	@ (800159c <HAL_GPIO_Init+0x350>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d101      	bne.n	8001466 <HAL_GPIO_Init+0x21a>
 8001462:	2309      	movs	r3, #9
 8001464:	e012      	b.n	800148c <HAL_GPIO_Init+0x240>
 8001466:	230a      	movs	r3, #10
 8001468:	e010      	b.n	800148c <HAL_GPIO_Init+0x240>
 800146a:	2308      	movs	r3, #8
 800146c:	e00e      	b.n	800148c <HAL_GPIO_Init+0x240>
 800146e:	2307      	movs	r3, #7
 8001470:	e00c      	b.n	800148c <HAL_GPIO_Init+0x240>
 8001472:	2306      	movs	r3, #6
 8001474:	e00a      	b.n	800148c <HAL_GPIO_Init+0x240>
 8001476:	2305      	movs	r3, #5
 8001478:	e008      	b.n	800148c <HAL_GPIO_Init+0x240>
 800147a:	2304      	movs	r3, #4
 800147c:	e006      	b.n	800148c <HAL_GPIO_Init+0x240>
 800147e:	2303      	movs	r3, #3
 8001480:	e004      	b.n	800148c <HAL_GPIO_Init+0x240>
 8001482:	2302      	movs	r3, #2
 8001484:	e002      	b.n	800148c <HAL_GPIO_Init+0x240>
 8001486:	2301      	movs	r3, #1
 8001488:	e000      	b.n	800148c <HAL_GPIO_Init+0x240>
 800148a:	2300      	movs	r3, #0
 800148c:	69fa      	ldr	r2, [r7, #28]
 800148e:	f002 0203 	and.w	r2, r2, #3
 8001492:	0092      	lsls	r2, r2, #2
 8001494:	4093      	lsls	r3, r2
 8001496:	69ba      	ldr	r2, [r7, #24]
 8001498:	4313      	orrs	r3, r2
 800149a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800149c:	4935      	ldr	r1, [pc, #212]	@ (8001574 <HAL_GPIO_Init+0x328>)
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	089b      	lsrs	r3, r3, #2
 80014a2:	3302      	adds	r3, #2
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014aa:	4b3d      	ldr	r3, [pc, #244]	@ (80015a0 <HAL_GPIO_Init+0x354>)
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	43db      	mvns	r3, r3
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	4013      	ands	r3, r2
 80014b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d003      	beq.n	80014ce <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80014c6:	69ba      	ldr	r2, [r7, #24]
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014ce:	4a34      	ldr	r2, [pc, #208]	@ (80015a0 <HAL_GPIO_Init+0x354>)
 80014d0:	69bb      	ldr	r3, [r7, #24]
 80014d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014d4:	4b32      	ldr	r3, [pc, #200]	@ (80015a0 <HAL_GPIO_Init+0x354>)
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	43db      	mvns	r3, r3
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	4013      	ands	r3, r2
 80014e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d003      	beq.n	80014f8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014f8:	4a29      	ldr	r2, [pc, #164]	@ (80015a0 <HAL_GPIO_Init+0x354>)
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014fe:	4b28      	ldr	r3, [pc, #160]	@ (80015a0 <HAL_GPIO_Init+0x354>)
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	43db      	mvns	r3, r3
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	4013      	ands	r3, r2
 800150c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001516:	2b00      	cmp	r3, #0
 8001518:	d003      	beq.n	8001522 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800151a:	69ba      	ldr	r2, [r7, #24]
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	4313      	orrs	r3, r2
 8001520:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001522:	4a1f      	ldr	r2, [pc, #124]	@ (80015a0 <HAL_GPIO_Init+0x354>)
 8001524:	69bb      	ldr	r3, [r7, #24]
 8001526:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001528:	4b1d      	ldr	r3, [pc, #116]	@ (80015a0 <HAL_GPIO_Init+0x354>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	43db      	mvns	r3, r3
 8001532:	69ba      	ldr	r2, [r7, #24]
 8001534:	4013      	ands	r3, r2
 8001536:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001540:	2b00      	cmp	r3, #0
 8001542:	d003      	beq.n	800154c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001544:	69ba      	ldr	r2, [r7, #24]
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	4313      	orrs	r3, r2
 800154a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800154c:	4a14      	ldr	r2, [pc, #80]	@ (80015a0 <HAL_GPIO_Init+0x354>)
 800154e:	69bb      	ldr	r3, [r7, #24]
 8001550:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	3301      	adds	r3, #1
 8001556:	61fb      	str	r3, [r7, #28]
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	2b0f      	cmp	r3, #15
 800155c:	f67f ae84 	bls.w	8001268 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001560:	bf00      	nop
 8001562:	bf00      	nop
 8001564:	3724      	adds	r7, #36	@ 0x24
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	40023800 	.word	0x40023800
 8001574:	40013800 	.word	0x40013800
 8001578:	40020000 	.word	0x40020000
 800157c:	40020400 	.word	0x40020400
 8001580:	40020800 	.word	0x40020800
 8001584:	40020c00 	.word	0x40020c00
 8001588:	40021000 	.word	0x40021000
 800158c:	40021400 	.word	0x40021400
 8001590:	40021800 	.word	0x40021800
 8001594:	40021c00 	.word	0x40021c00
 8001598:	40022000 	.word	0x40022000
 800159c:	40022400 	.word	0x40022400
 80015a0:	40013c00 	.word	0x40013c00

080015a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	460b      	mov	r3, r1
 80015ae:	807b      	strh	r3, [r7, #2]
 80015b0:	4613      	mov	r3, r2
 80015b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015b4:	787b      	ldrb	r3, [r7, #1]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d003      	beq.n	80015c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015ba:	887a      	ldrh	r2, [r7, #2]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015c0:	e003      	b.n	80015ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015c2:	887b      	ldrh	r3, [r7, #2]
 80015c4:	041a      	lsls	r2, r3, #16
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	619a      	str	r2, [r3, #24]
}
 80015ca:	bf00      	nop
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
	...

080015d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d101      	bne.n	80015ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e12b      	b.n	8001842 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d106      	bne.n	8001604 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2200      	movs	r2, #0
 80015fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f7ff faec 	bl	8000bdc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2224      	movs	r2, #36	@ 0x24
 8001608:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f022 0201 	bic.w	r2, r2, #1
 800161a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800162a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800163a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800163c:	f003 fa98 	bl	8004b70 <HAL_RCC_GetPCLK1Freq>
 8001640:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	4a81      	ldr	r2, [pc, #516]	@ (800184c <HAL_I2C_Init+0x274>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d807      	bhi.n	800165c <HAL_I2C_Init+0x84>
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	4a80      	ldr	r2, [pc, #512]	@ (8001850 <HAL_I2C_Init+0x278>)
 8001650:	4293      	cmp	r3, r2
 8001652:	bf94      	ite	ls
 8001654:	2301      	movls	r3, #1
 8001656:	2300      	movhi	r3, #0
 8001658:	b2db      	uxtb	r3, r3
 800165a:	e006      	b.n	800166a <HAL_I2C_Init+0x92>
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	4a7d      	ldr	r2, [pc, #500]	@ (8001854 <HAL_I2C_Init+0x27c>)
 8001660:	4293      	cmp	r3, r2
 8001662:	bf94      	ite	ls
 8001664:	2301      	movls	r3, #1
 8001666:	2300      	movhi	r3, #0
 8001668:	b2db      	uxtb	r3, r3
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e0e7      	b.n	8001842 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	4a78      	ldr	r2, [pc, #480]	@ (8001858 <HAL_I2C_Init+0x280>)
 8001676:	fba2 2303 	umull	r2, r3, r2, r3
 800167a:	0c9b      	lsrs	r3, r3, #18
 800167c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	68ba      	ldr	r2, [r7, #8]
 800168e:	430a      	orrs	r2, r1
 8001690:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	6a1b      	ldr	r3, [r3, #32]
 8001698:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	4a6a      	ldr	r2, [pc, #424]	@ (800184c <HAL_I2C_Init+0x274>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d802      	bhi.n	80016ac <HAL_I2C_Init+0xd4>
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	3301      	adds	r3, #1
 80016aa:	e009      	b.n	80016c0 <HAL_I2C_Init+0xe8>
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80016b2:	fb02 f303 	mul.w	r3, r2, r3
 80016b6:	4a69      	ldr	r2, [pc, #420]	@ (800185c <HAL_I2C_Init+0x284>)
 80016b8:	fba2 2303 	umull	r2, r3, r2, r3
 80016bc:	099b      	lsrs	r3, r3, #6
 80016be:	3301      	adds	r3, #1
 80016c0:	687a      	ldr	r2, [r7, #4]
 80016c2:	6812      	ldr	r2, [r2, #0]
 80016c4:	430b      	orrs	r3, r1
 80016c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	69db      	ldr	r3, [r3, #28]
 80016ce:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80016d2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	495c      	ldr	r1, [pc, #368]	@ (800184c <HAL_I2C_Init+0x274>)
 80016dc:	428b      	cmp	r3, r1
 80016de:	d819      	bhi.n	8001714 <HAL_I2C_Init+0x13c>
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	1e59      	subs	r1, r3, #1
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80016ee:	1c59      	adds	r1, r3, #1
 80016f0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80016f4:	400b      	ands	r3, r1
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d00a      	beq.n	8001710 <HAL_I2C_Init+0x138>
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	1e59      	subs	r1, r3, #1
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	fbb1 f3f3 	udiv	r3, r1, r3
 8001708:	3301      	adds	r3, #1
 800170a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800170e:	e051      	b.n	80017b4 <HAL_I2C_Init+0x1dc>
 8001710:	2304      	movs	r3, #4
 8001712:	e04f      	b.n	80017b4 <HAL_I2C_Init+0x1dc>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d111      	bne.n	8001740 <HAL_I2C_Init+0x168>
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	1e58      	subs	r0, r3, #1
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6859      	ldr	r1, [r3, #4]
 8001724:	460b      	mov	r3, r1
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	440b      	add	r3, r1
 800172a:	fbb0 f3f3 	udiv	r3, r0, r3
 800172e:	3301      	adds	r3, #1
 8001730:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001734:	2b00      	cmp	r3, #0
 8001736:	bf0c      	ite	eq
 8001738:	2301      	moveq	r3, #1
 800173a:	2300      	movne	r3, #0
 800173c:	b2db      	uxtb	r3, r3
 800173e:	e012      	b.n	8001766 <HAL_I2C_Init+0x18e>
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	1e58      	subs	r0, r3, #1
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6859      	ldr	r1, [r3, #4]
 8001748:	460b      	mov	r3, r1
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	440b      	add	r3, r1
 800174e:	0099      	lsls	r1, r3, #2
 8001750:	440b      	add	r3, r1
 8001752:	fbb0 f3f3 	udiv	r3, r0, r3
 8001756:	3301      	adds	r3, #1
 8001758:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800175c:	2b00      	cmp	r3, #0
 800175e:	bf0c      	ite	eq
 8001760:	2301      	moveq	r3, #1
 8001762:	2300      	movne	r3, #0
 8001764:	b2db      	uxtb	r3, r3
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <HAL_I2C_Init+0x196>
 800176a:	2301      	movs	r3, #1
 800176c:	e022      	b.n	80017b4 <HAL_I2C_Init+0x1dc>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d10e      	bne.n	8001794 <HAL_I2C_Init+0x1bc>
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	1e58      	subs	r0, r3, #1
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6859      	ldr	r1, [r3, #4]
 800177e:	460b      	mov	r3, r1
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	440b      	add	r3, r1
 8001784:	fbb0 f3f3 	udiv	r3, r0, r3
 8001788:	3301      	adds	r3, #1
 800178a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800178e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001792:	e00f      	b.n	80017b4 <HAL_I2C_Init+0x1dc>
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	1e58      	subs	r0, r3, #1
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6859      	ldr	r1, [r3, #4]
 800179c:	460b      	mov	r3, r1
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	440b      	add	r3, r1
 80017a2:	0099      	lsls	r1, r3, #2
 80017a4:	440b      	add	r3, r1
 80017a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80017aa:	3301      	adds	r3, #1
 80017ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017b0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80017b4:	6879      	ldr	r1, [r7, #4]
 80017b6:	6809      	ldr	r1, [r1, #0]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	69da      	ldr	r2, [r3, #28]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6a1b      	ldr	r3, [r3, #32]
 80017ce:	431a      	orrs	r2, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	430a      	orrs	r2, r1
 80017d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80017e2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	6911      	ldr	r1, [r2, #16]
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	68d2      	ldr	r2, [r2, #12]
 80017ee:	4311      	orrs	r1, r2
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	6812      	ldr	r2, [r2, #0]
 80017f4:	430b      	orrs	r3, r1
 80017f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	68db      	ldr	r3, [r3, #12]
 80017fe:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	695a      	ldr	r2, [r3, #20]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	699b      	ldr	r3, [r3, #24]
 800180a:	431a      	orrs	r2, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	430a      	orrs	r2, r1
 8001812:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f042 0201 	orr.w	r2, r2, #1
 8001822:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2200      	movs	r2, #0
 8001828:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2220      	movs	r2, #32
 800182e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2200      	movs	r2, #0
 8001836:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2200      	movs	r2, #0
 800183c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001840:	2300      	movs	r3, #0
}
 8001842:	4618      	mov	r0, r3
 8001844:	3710      	adds	r7, #16
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	000186a0 	.word	0x000186a0
 8001850:	001e847f 	.word	0x001e847f
 8001854:	003d08ff 	.word	0x003d08ff
 8001858:	431bde83 	.word	0x431bde83
 800185c:	10624dd3 	.word	0x10624dd3

08001860 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	695b      	ldr	r3, [r3, #20]
 800186e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001872:	2b80      	cmp	r3, #128	@ 0x80
 8001874:	d103      	bne.n	800187e <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	2200      	movs	r2, #0
 800187c:	611a      	str	r2, [r3, #16]
  }
}
 800187e:	bf00      	nop
 8001880:	370c      	adds	r7, #12
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
	...

0800188c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b088      	sub	sp, #32
 8001890:	af02      	add	r7, sp, #8
 8001892:	60f8      	str	r0, [r7, #12]
 8001894:	4608      	mov	r0, r1
 8001896:	4611      	mov	r1, r2
 8001898:	461a      	mov	r2, r3
 800189a:	4603      	mov	r3, r0
 800189c:	817b      	strh	r3, [r7, #10]
 800189e:	460b      	mov	r3, r1
 80018a0:	813b      	strh	r3, [r7, #8]
 80018a2:	4613      	mov	r3, r2
 80018a4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80018a6:	f7ff fb83 	bl	8000fb0 <HAL_GetTick>
 80018aa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	2b20      	cmp	r3, #32
 80018b6:	f040 80d9 	bne.w	8001a6c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	9300      	str	r3, [sp, #0]
 80018be:	2319      	movs	r3, #25
 80018c0:	2201      	movs	r2, #1
 80018c2:	496d      	ldr	r1, [pc, #436]	@ (8001a78 <HAL_I2C_Mem_Write+0x1ec>)
 80018c4:	68f8      	ldr	r0, [r7, #12]
 80018c6:	f002 f9e5 	bl	8003c94 <I2C_WaitOnFlagUntilTimeout>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80018d0:	2302      	movs	r3, #2
 80018d2:	e0cc      	b.n	8001a6e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d101      	bne.n	80018e2 <HAL_I2C_Mem_Write+0x56>
 80018de:	2302      	movs	r3, #2
 80018e0:	e0c5      	b.n	8001a6e <HAL_I2C_Mem_Write+0x1e2>
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	2201      	movs	r2, #1
 80018e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0301 	and.w	r3, r3, #1
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d007      	beq.n	8001908 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f042 0201 	orr.w	r2, r2, #1
 8001906:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001916:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	2221      	movs	r2, #33	@ 0x21
 800191c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	2240      	movs	r2, #64	@ 0x40
 8001924:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	2200      	movs	r2, #0
 800192c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	6a3a      	ldr	r2, [r7, #32]
 8001932:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001938:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800193e:	b29a      	uxth	r2, r3
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	4a4d      	ldr	r2, [pc, #308]	@ (8001a7c <HAL_I2C_Mem_Write+0x1f0>)
 8001948:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800194a:	88f8      	ldrh	r0, [r7, #6]
 800194c:	893a      	ldrh	r2, [r7, #8]
 800194e:	8979      	ldrh	r1, [r7, #10]
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	9301      	str	r3, [sp, #4]
 8001954:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001956:	9300      	str	r3, [sp, #0]
 8001958:	4603      	mov	r3, r0
 800195a:	68f8      	ldr	r0, [r7, #12]
 800195c:	f001 ff74 	bl	8003848 <I2C_RequestMemoryWrite>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d052      	beq.n	8001a0c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e081      	b.n	8001a6e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800196a:	697a      	ldr	r2, [r7, #20]
 800196c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800196e:	68f8      	ldr	r0, [r7, #12]
 8001970:	f002 faaa 	bl	8003ec8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d00d      	beq.n	8001996 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800197e:	2b04      	cmp	r3, #4
 8001980:	d107      	bne.n	8001992 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001990:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e06b      	b.n	8001a6e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800199a:	781a      	ldrb	r2, [r3, #0]
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019a6:	1c5a      	adds	r2, r3, #1
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019b0:	3b01      	subs	r3, #1
 80019b2:	b29a      	uxth	r2, r3
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019bc:	b29b      	uxth	r3, r3
 80019be:	3b01      	subs	r3, #1
 80019c0:	b29a      	uxth	r2, r3
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	695b      	ldr	r3, [r3, #20]
 80019cc:	f003 0304 	and.w	r3, r3, #4
 80019d0:	2b04      	cmp	r3, #4
 80019d2:	d11b      	bne.n	8001a0c <HAL_I2C_Mem_Write+0x180>
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d017      	beq.n	8001a0c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019e0:	781a      	ldrb	r2, [r3, #0]
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ec:	1c5a      	adds	r2, r3, #1
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019f6:	3b01      	subs	r3, #1
 80019f8:	b29a      	uxth	r2, r3
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	3b01      	subs	r3, #1
 8001a06:	b29a      	uxth	r2, r3
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d1aa      	bne.n	800196a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a14:	697a      	ldr	r2, [r7, #20]
 8001a16:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001a18:	68f8      	ldr	r0, [r7, #12]
 8001a1a:	f002 fa9d 	bl	8003f58 <I2C_WaitOnBTFFlagUntilTimeout>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d00d      	beq.n	8001a40 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a28:	2b04      	cmp	r3, #4
 8001a2a:	d107      	bne.n	8001a3c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a3a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e016      	b.n	8001a6e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	2220      	movs	r2, #32
 8001a54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	2200      	movs	r2, #0
 8001a64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	e000      	b.n	8001a6e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001a6c:	2302      	movs	r3, #2
  }
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3718      	adds	r7, #24
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	00100002 	.word	0x00100002
 8001a7c:	ffff0000 	.word	0xffff0000

08001a80 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b08c      	sub	sp, #48	@ 0x30
 8001a84:	af02      	add	r7, sp, #8
 8001a86:	60f8      	str	r0, [r7, #12]
 8001a88:	4608      	mov	r0, r1
 8001a8a:	4611      	mov	r1, r2
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	4603      	mov	r3, r0
 8001a90:	817b      	strh	r3, [r7, #10]
 8001a92:	460b      	mov	r3, r1
 8001a94:	813b      	strh	r3, [r7, #8]
 8001a96:	4613      	mov	r3, r2
 8001a98:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001a9a:	f7ff fa89 	bl	8000fb0 <HAL_GetTick>
 8001a9e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	2b20      	cmp	r3, #32
 8001aaa:	f040 8214 	bne.w	8001ed6 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ab0:	9300      	str	r3, [sp, #0]
 8001ab2:	2319      	movs	r3, #25
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	497b      	ldr	r1, [pc, #492]	@ (8001ca4 <HAL_I2C_Mem_Read+0x224>)
 8001ab8:	68f8      	ldr	r0, [r7, #12]
 8001aba:	f002 f8eb 	bl	8003c94 <I2C_WaitOnFlagUntilTimeout>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	e207      	b.n	8001ed8 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d101      	bne.n	8001ad6 <HAL_I2C_Mem_Read+0x56>
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	e200      	b.n	8001ed8 <HAL_I2C_Mem_Read+0x458>
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	2201      	movs	r2, #1
 8001ada:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0301 	and.w	r3, r3, #1
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d007      	beq.n	8001afc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f042 0201 	orr.w	r2, r2, #1
 8001afa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b0a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	2222      	movs	r2, #34	@ 0x22
 8001b10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	2240      	movs	r2, #64	@ 0x40
 8001b18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001b26:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001b2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b32:	b29a      	uxth	r2, r3
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	4a5b      	ldr	r2, [pc, #364]	@ (8001ca8 <HAL_I2C_Mem_Read+0x228>)
 8001b3c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001b3e:	88f8      	ldrh	r0, [r7, #6]
 8001b40:	893a      	ldrh	r2, [r7, #8]
 8001b42:	8979      	ldrh	r1, [r7, #10]
 8001b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b46:	9301      	str	r3, [sp, #4]
 8001b48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b4a:	9300      	str	r3, [sp, #0]
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	68f8      	ldr	r0, [r7, #12]
 8001b50:	f001 ff10 	bl	8003974 <I2C_RequestMemoryRead>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e1bc      	b.n	8001ed8 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d113      	bne.n	8001b8e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b66:	2300      	movs	r3, #0
 8001b68:	623b      	str	r3, [r7, #32]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	695b      	ldr	r3, [r3, #20]
 8001b70:	623b      	str	r3, [r7, #32]
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	699b      	ldr	r3, [r3, #24]
 8001b78:	623b      	str	r3, [r7, #32]
 8001b7a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b8a:	601a      	str	r2, [r3, #0]
 8001b8c:	e190      	b.n	8001eb0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d11b      	bne.n	8001bce <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ba4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	61fb      	str	r3, [r7, #28]
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	695b      	ldr	r3, [r3, #20]
 8001bb0:	61fb      	str	r3, [r7, #28]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	699b      	ldr	r3, [r3, #24]
 8001bb8:	61fb      	str	r3, [r7, #28]
 8001bba:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	e170      	b.n	8001eb0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d11b      	bne.n	8001c0e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001be4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001bf4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	61bb      	str	r3, [r7, #24]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	695b      	ldr	r3, [r3, #20]
 8001c00:	61bb      	str	r3, [r7, #24]
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	699b      	ldr	r3, [r3, #24]
 8001c08:	61bb      	str	r3, [r7, #24]
 8001c0a:	69bb      	ldr	r3, [r7, #24]
 8001c0c:	e150      	b.n	8001eb0 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c0e:	2300      	movs	r3, #0
 8001c10:	617b      	str	r3, [r7, #20]
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	695b      	ldr	r3, [r3, #20]
 8001c18:	617b      	str	r3, [r7, #20]
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	699b      	ldr	r3, [r3, #24]
 8001c20:	617b      	str	r3, [r7, #20]
 8001c22:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001c24:	e144      	b.n	8001eb0 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c2a:	2b03      	cmp	r3, #3
 8001c2c:	f200 80f1 	bhi.w	8001e12 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d123      	bne.n	8001c80 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c3a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001c3c:	68f8      	ldr	r0, [r7, #12]
 8001c3e:	f002 fa05 	bl	800404c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e145      	b.n	8001ed8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	691a      	ldr	r2, [r3, #16]
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c56:	b2d2      	uxtb	r2, r2
 8001c58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c5e:	1c5a      	adds	r2, r3, #1
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c68:	3b01      	subs	r3, #1
 8001c6a:	b29a      	uxth	r2, r3
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	3b01      	subs	r3, #1
 8001c78:	b29a      	uxth	r2, r3
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001c7e:	e117      	b.n	8001eb0 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d14e      	bne.n	8001d26 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c8a:	9300      	str	r3, [sp, #0]
 8001c8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c8e:	2200      	movs	r2, #0
 8001c90:	4906      	ldr	r1, [pc, #24]	@ (8001cac <HAL_I2C_Mem_Read+0x22c>)
 8001c92:	68f8      	ldr	r0, [r7, #12]
 8001c94:	f001 fffe 	bl	8003c94 <I2C_WaitOnFlagUntilTimeout>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d008      	beq.n	8001cb0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e11a      	b.n	8001ed8 <HAL_I2C_Mem_Read+0x458>
 8001ca2:	bf00      	nop
 8001ca4:	00100002 	.word	0x00100002
 8001ca8:	ffff0000 	.word	0xffff0000
 8001cac:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001cbe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	691a      	ldr	r2, [r3, #16]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cca:	b2d2      	uxtb	r2, r2
 8001ccc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cd2:	1c5a      	adds	r2, r3, #1
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cdc:	3b01      	subs	r3, #1
 8001cde:	b29a      	uxth	r2, r3
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ce8:	b29b      	uxth	r3, r3
 8001cea:	3b01      	subs	r3, #1
 8001cec:	b29a      	uxth	r2, r3
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	691a      	ldr	r2, [r3, #16]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cfc:	b2d2      	uxtb	r2, r2
 8001cfe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d04:	1c5a      	adds	r2, r3, #1
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	b29a      	uxth	r2, r3
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	3b01      	subs	r3, #1
 8001d1e:	b29a      	uxth	r2, r3
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001d24:	e0c4      	b.n	8001eb0 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d28:	9300      	str	r3, [sp, #0]
 8001d2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	496c      	ldr	r1, [pc, #432]	@ (8001ee0 <HAL_I2C_Mem_Read+0x460>)
 8001d30:	68f8      	ldr	r0, [r7, #12]
 8001d32:	f001 ffaf 	bl	8003c94 <I2C_WaitOnFlagUntilTimeout>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d001      	beq.n	8001d40 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e0cb      	b.n	8001ed8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d4e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	691a      	ldr	r2, [r3, #16]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d5a:	b2d2      	uxtb	r2, r2
 8001d5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d62:	1c5a      	adds	r2, r3, #1
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d6c:	3b01      	subs	r3, #1
 8001d6e:	b29a      	uxth	r2, r3
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	b29a      	uxth	r2, r3
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d84:	9300      	str	r3, [sp, #0]
 8001d86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d88:	2200      	movs	r2, #0
 8001d8a:	4955      	ldr	r1, [pc, #340]	@ (8001ee0 <HAL_I2C_Mem_Read+0x460>)
 8001d8c:	68f8      	ldr	r0, [r7, #12]
 8001d8e:	f001 ff81 	bl	8003c94 <I2C_WaitOnFlagUntilTimeout>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e09d      	b.n	8001ed8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001daa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	691a      	ldr	r2, [r3, #16]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001db6:	b2d2      	uxtb	r2, r2
 8001db8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dbe:	1c5a      	adds	r2, r3, #1
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dc8:	3b01      	subs	r3, #1
 8001dca:	b29a      	uxth	r2, r3
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	b29a      	uxth	r2, r3
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	691a      	ldr	r2, [r3, #16]
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001de8:	b2d2      	uxtb	r2, r2
 8001dea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001df0:	1c5a      	adds	r2, r3, #1
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dfa:	3b01      	subs	r3, #1
 8001dfc:	b29a      	uxth	r2, r3
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	3b01      	subs	r3, #1
 8001e0a:	b29a      	uxth	r2, r3
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001e10:	e04e      	b.n	8001eb0 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e14:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001e16:	68f8      	ldr	r0, [r7, #12]
 8001e18:	f002 f918 	bl	800404c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e058      	b.n	8001ed8 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	691a      	ldr	r2, [r3, #16]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e30:	b2d2      	uxtb	r2, r2
 8001e32:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e38:	1c5a      	adds	r2, r3, #1
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e42:	3b01      	subs	r3, #1
 8001e44:	b29a      	uxth	r2, r3
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	3b01      	subs	r3, #1
 8001e52:	b29a      	uxth	r2, r3
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	695b      	ldr	r3, [r3, #20]
 8001e5e:	f003 0304 	and.w	r3, r3, #4
 8001e62:	2b04      	cmp	r3, #4
 8001e64:	d124      	bne.n	8001eb0 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e6a:	2b03      	cmp	r3, #3
 8001e6c:	d107      	bne.n	8001e7e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e7c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	691a      	ldr	r2, [r3, #16]
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e88:	b2d2      	uxtb	r2, r2
 8001e8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e90:	1c5a      	adds	r2, r3, #1
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e9a:	3b01      	subs	r3, #1
 8001e9c:	b29a      	uxth	r2, r3
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ea6:	b29b      	uxth	r3, r3
 8001ea8:	3b01      	subs	r3, #1
 8001eaa:	b29a      	uxth	r2, r3
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	f47f aeb6 	bne.w	8001c26 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2220      	movs	r2, #32
 8001ebe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	e000      	b.n	8001ed8 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8001ed6:	2302      	movs	r3, #2
  }
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3728      	adds	r7, #40	@ 0x28
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	00010004 	.word	0x00010004

08001ee4 <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b087      	sub	sp, #28
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	4608      	mov	r0, r1
 8001eee:	4611      	mov	r1, r2
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	817b      	strh	r3, [r7, #10]
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	813b      	strh	r3, [r7, #8]
 8001efa:	4613      	mov	r3, r2
 8001efc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8001efe:	2300      	movs	r3, #0
 8001f00:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	2b20      	cmp	r3, #32
 8001f0c:	f040 8096 	bne.w	800203c <HAL_I2C_Mem_Read_IT+0x158>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8001f10:	4b4e      	ldr	r3, [pc, #312]	@ (800204c <HAL_I2C_Mem_Read_IT+0x168>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	08db      	lsrs	r3, r3, #3
 8001f16:	4a4e      	ldr	r2, [pc, #312]	@ (8002050 <HAL_I2C_Mem_Read_IT+0x16c>)
 8001f18:	fba2 2303 	umull	r2, r3, r2, r3
 8001f1c:	0a1a      	lsrs	r2, r3, #8
 8001f1e:	4613      	mov	r3, r2
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	4413      	add	r3, r2
 8001f24:	009a      	lsls	r2, r3, #2
 8001f26:	4413      	add	r3, r2
 8001f28:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	3b01      	subs	r3, #1
 8001f2e:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d112      	bne.n	8001f5c <HAL_I2C_Mem_Read_IT+0x78>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2220      	movs	r2, #32
 8001f40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2200      	movs	r2, #0
 8001f48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f50:	f043 0220 	orr.w	r2, r3, #32
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8001f58:	2302      	movs	r3, #2
 8001f5a:	e070      	b.n	800203e <HAL_I2C_Mem_Read_IT+0x15a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	699b      	ldr	r3, [r3, #24]
 8001f62:	f003 0302 	and.w	r3, r3, #2
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d0df      	beq.n	8001f2a <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d101      	bne.n	8001f78 <HAL_I2C_Mem_Read_IT+0x94>
 8001f74:	2302      	movs	r3, #2
 8001f76:	e062      	b.n	800203e <HAL_I2C_Mem_Read_IT+0x15a>
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0301 	and.w	r3, r3, #1
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d007      	beq.n	8001f9e <HAL_I2C_Mem_Read_IT+0xba>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f042 0201 	orr.w	r2, r2, #1
 8001f9c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001fac:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2222      	movs	r2, #34	@ 0x22
 8001fb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	2240      	movs	r2, #64	@ 0x40
 8001fba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	6a3a      	ldr	r2, [r7, #32]
 8001fc8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001fce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fd4:	b29a      	uxth	r2, r3
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	4a1d      	ldr	r2, [pc, #116]	@ (8002054 <HAL_I2C_Mem_Read_IT+0x170>)
 8001fde:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8001fe0:	897a      	ldrh	r2, [r7, #10]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8001fe6:	893a      	ldrh	r2, [r7, #8]
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8001fec:	88fa      	ldrh	r2, [r7, #6]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002006:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002016:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2200      	movs	r2, #0
 800201c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    if (hi2c->XferSize > 0U)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002024:	2b00      	cmp	r3, #0
 8002026:	d007      	beq.n	8002038 <HAL_I2C_Mem_Read_IT+0x154>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	685a      	ldr	r2, [r3, #4]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8002036:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 8002038:	2300      	movs	r3, #0
 800203a:	e000      	b.n	800203e <HAL_I2C_Mem_Read_IT+0x15a>
  }
  else
  {
    return HAL_BUSY;
 800203c:	2302      	movs	r3, #2
  }
}
 800203e:	4618      	mov	r0, r3
 8002040:	371c      	adds	r7, #28
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	2000005c 	.word	0x2000005c
 8002050:	14f8b589 	.word	0x14f8b589
 8002054:	ffff0000 	.word	0xffff0000

08002058 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b088      	sub	sp, #32
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002060:	2300      	movs	r3, #0
 8002062:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002070:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002078:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002080:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002082:	7bfb      	ldrb	r3, [r7, #15]
 8002084:	2b10      	cmp	r3, #16
 8002086:	d003      	beq.n	8002090 <HAL_I2C_EV_IRQHandler+0x38>
 8002088:	7bfb      	ldrb	r3, [r7, #15]
 800208a:	2b40      	cmp	r3, #64	@ 0x40
 800208c:	f040 80c1 	bne.w	8002212 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	699b      	ldr	r3, [r3, #24]
 8002096:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	695b      	ldr	r3, [r3, #20]
 800209e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d10d      	bne.n	80020c6 <HAL_I2C_EV_IRQHandler+0x6e>
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80020b0:	d003      	beq.n	80020ba <HAL_I2C_EV_IRQHandler+0x62>
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80020b8:	d101      	bne.n	80020be <HAL_I2C_EV_IRQHandler+0x66>
 80020ba:	2301      	movs	r3, #1
 80020bc:	e000      	b.n	80020c0 <HAL_I2C_EV_IRQHandler+0x68>
 80020be:	2300      	movs	r3, #0
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	f000 8132 	beq.w	800232a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	f003 0301 	and.w	r3, r3, #1
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d00c      	beq.n	80020ea <HAL_I2C_EV_IRQHandler+0x92>
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	0a5b      	lsrs	r3, r3, #9
 80020d4:	f003 0301 	and.w	r3, r3, #1
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d006      	beq.n	80020ea <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f002 f841 	bl	8004164 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f000 fd91 	bl	8002c0a <I2C_Master_SB>
 80020e8:	e092      	b.n	8002210 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	08db      	lsrs	r3, r3, #3
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d009      	beq.n	800210a <HAL_I2C_EV_IRQHandler+0xb2>
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	0a5b      	lsrs	r3, r3, #9
 80020fa:	f003 0301 	and.w	r3, r3, #1
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d003      	beq.n	800210a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f000 fe07 	bl	8002d16 <I2C_Master_ADD10>
 8002108:	e082      	b.n	8002210 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	085b      	lsrs	r3, r3, #1
 800210e:	f003 0301 	and.w	r3, r3, #1
 8002112:	2b00      	cmp	r3, #0
 8002114:	d009      	beq.n	800212a <HAL_I2C_EV_IRQHandler+0xd2>
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	0a5b      	lsrs	r3, r3, #9
 800211a:	f003 0301 	and.w	r3, r3, #1
 800211e:	2b00      	cmp	r3, #0
 8002120:	d003      	beq.n	800212a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f000 fe21 	bl	8002d6a <I2C_Master_ADDR>
 8002128:	e072      	b.n	8002210 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	089b      	lsrs	r3, r3, #2
 800212e:	f003 0301 	and.w	r3, r3, #1
 8002132:	2b00      	cmp	r3, #0
 8002134:	d03b      	beq.n	80021ae <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002140:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002144:	f000 80f3 	beq.w	800232e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	09db      	lsrs	r3, r3, #7
 800214c:	f003 0301 	and.w	r3, r3, #1
 8002150:	2b00      	cmp	r3, #0
 8002152:	d00f      	beq.n	8002174 <HAL_I2C_EV_IRQHandler+0x11c>
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	0a9b      	lsrs	r3, r3, #10
 8002158:	f003 0301 	and.w	r3, r3, #1
 800215c:	2b00      	cmp	r3, #0
 800215e:	d009      	beq.n	8002174 <HAL_I2C_EV_IRQHandler+0x11c>
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	089b      	lsrs	r3, r3, #2
 8002164:	f003 0301 	and.w	r3, r3, #1
 8002168:	2b00      	cmp	r3, #0
 800216a:	d103      	bne.n	8002174 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f000 f9e9 	bl	8002544 <I2C_MasterTransmit_TXE>
 8002172:	e04d      	b.n	8002210 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	089b      	lsrs	r3, r3, #2
 8002178:	f003 0301 	and.w	r3, r3, #1
 800217c:	2b00      	cmp	r3, #0
 800217e:	f000 80d6 	beq.w	800232e <HAL_I2C_EV_IRQHandler+0x2d6>
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	0a5b      	lsrs	r3, r3, #9
 8002186:	f003 0301 	and.w	r3, r3, #1
 800218a:	2b00      	cmp	r3, #0
 800218c:	f000 80cf 	beq.w	800232e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002190:	7bbb      	ldrb	r3, [r7, #14]
 8002192:	2b21      	cmp	r3, #33	@ 0x21
 8002194:	d103      	bne.n	800219e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f000 fa70 	bl	800267c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800219c:	e0c7      	b.n	800232e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800219e:	7bfb      	ldrb	r3, [r7, #15]
 80021a0:	2b40      	cmp	r3, #64	@ 0x40
 80021a2:	f040 80c4 	bne.w	800232e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f000 fade 	bl	8002768 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80021ac:	e0bf      	b.n	800232e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80021b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80021bc:	f000 80b7 	beq.w	800232e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	099b      	lsrs	r3, r3, #6
 80021c4:	f003 0301 	and.w	r3, r3, #1
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d00f      	beq.n	80021ec <HAL_I2C_EV_IRQHandler+0x194>
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	0a9b      	lsrs	r3, r3, #10
 80021d0:	f003 0301 	and.w	r3, r3, #1
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d009      	beq.n	80021ec <HAL_I2C_EV_IRQHandler+0x194>
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	089b      	lsrs	r3, r3, #2
 80021dc:	f003 0301 	and.w	r3, r3, #1
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d103      	bne.n	80021ec <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f000 fb57 	bl	8002898 <I2C_MasterReceive_RXNE>
 80021ea:	e011      	b.n	8002210 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	089b      	lsrs	r3, r3, #2
 80021f0:	f003 0301 	and.w	r3, r3, #1
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	f000 809a 	beq.w	800232e <HAL_I2C_EV_IRQHandler+0x2d6>
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	0a5b      	lsrs	r3, r3, #9
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	2b00      	cmp	r3, #0
 8002204:	f000 8093 	beq.w	800232e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f000 fc0d 	bl	8002a28 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800220e:	e08e      	b.n	800232e <HAL_I2C_EV_IRQHandler+0x2d6>
 8002210:	e08d      	b.n	800232e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002216:	2b00      	cmp	r3, #0
 8002218:	d004      	beq.n	8002224 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	695b      	ldr	r3, [r3, #20]
 8002220:	61fb      	str	r3, [r7, #28]
 8002222:	e007      	b.n	8002234 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	699b      	ldr	r3, [r3, #24]
 800222a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	695b      	ldr	r3, [r3, #20]
 8002232:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	085b      	lsrs	r3, r3, #1
 8002238:	f003 0301 	and.w	r3, r3, #1
 800223c:	2b00      	cmp	r3, #0
 800223e:	d012      	beq.n	8002266 <HAL_I2C_EV_IRQHandler+0x20e>
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	0a5b      	lsrs	r3, r3, #9
 8002244:	f003 0301 	and.w	r3, r3, #1
 8002248:	2b00      	cmp	r3, #0
 800224a:	d00c      	beq.n	8002266 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002250:	2b00      	cmp	r3, #0
 8002252:	d003      	beq.n	800225c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	699b      	ldr	r3, [r3, #24]
 800225a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800225c:	69b9      	ldr	r1, [r7, #24]
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f000 ffd2 	bl	8003208 <I2C_Slave_ADDR>
 8002264:	e066      	b.n	8002334 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	091b      	lsrs	r3, r3, #4
 800226a:	f003 0301 	and.w	r3, r3, #1
 800226e:	2b00      	cmp	r3, #0
 8002270:	d009      	beq.n	8002286 <HAL_I2C_EV_IRQHandler+0x22e>
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	0a5b      	lsrs	r3, r3, #9
 8002276:	f003 0301 	and.w	r3, r3, #1
 800227a:	2b00      	cmp	r3, #0
 800227c:	d003      	beq.n	8002286 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f001 f80c 	bl	800329c <I2C_Slave_STOPF>
 8002284:	e056      	b.n	8002334 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002286:	7bbb      	ldrb	r3, [r7, #14]
 8002288:	2b21      	cmp	r3, #33	@ 0x21
 800228a:	d002      	beq.n	8002292 <HAL_I2C_EV_IRQHandler+0x23a>
 800228c:	7bbb      	ldrb	r3, [r7, #14]
 800228e:	2b29      	cmp	r3, #41	@ 0x29
 8002290:	d125      	bne.n	80022de <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	09db      	lsrs	r3, r3, #7
 8002296:	f003 0301 	and.w	r3, r3, #1
 800229a:	2b00      	cmp	r3, #0
 800229c:	d00f      	beq.n	80022be <HAL_I2C_EV_IRQHandler+0x266>
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	0a9b      	lsrs	r3, r3, #10
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d009      	beq.n	80022be <HAL_I2C_EV_IRQHandler+0x266>
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	089b      	lsrs	r3, r3, #2
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d103      	bne.n	80022be <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f000 fee8 	bl	800308c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80022bc:	e039      	b.n	8002332 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	089b      	lsrs	r3, r3, #2
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d033      	beq.n	8002332 <HAL_I2C_EV_IRQHandler+0x2da>
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	0a5b      	lsrs	r3, r3, #9
 80022ce:	f003 0301 	and.w	r3, r3, #1
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d02d      	beq.n	8002332 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f000 ff15 	bl	8003106 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80022dc:	e029      	b.n	8002332 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	099b      	lsrs	r3, r3, #6
 80022e2:	f003 0301 	and.w	r3, r3, #1
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d00f      	beq.n	800230a <HAL_I2C_EV_IRQHandler+0x2b2>
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	0a9b      	lsrs	r3, r3, #10
 80022ee:	f003 0301 	and.w	r3, r3, #1
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d009      	beq.n	800230a <HAL_I2C_EV_IRQHandler+0x2b2>
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	089b      	lsrs	r3, r3, #2
 80022fa:	f003 0301 	and.w	r3, r3, #1
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d103      	bne.n	800230a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f000 ff20 	bl	8003148 <I2C_SlaveReceive_RXNE>
 8002308:	e014      	b.n	8002334 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	089b      	lsrs	r3, r3, #2
 800230e:	f003 0301 	and.w	r3, r3, #1
 8002312:	2b00      	cmp	r3, #0
 8002314:	d00e      	beq.n	8002334 <HAL_I2C_EV_IRQHandler+0x2dc>
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	0a5b      	lsrs	r3, r3, #9
 800231a:	f003 0301 	and.w	r3, r3, #1
 800231e:	2b00      	cmp	r3, #0
 8002320:	d008      	beq.n	8002334 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f000 ff4e 	bl	80031c4 <I2C_SlaveReceive_BTF>
 8002328:	e004      	b.n	8002334 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800232a:	bf00      	nop
 800232c:	e002      	b.n	8002334 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800232e:	bf00      	nop
 8002330:	e000      	b.n	8002334 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002332:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002334:	3720      	adds	r7, #32
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}

0800233a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800233a:	b580      	push	{r7, lr}
 800233c:	b08a      	sub	sp, #40	@ 0x28
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	695b      	ldr	r3, [r3, #20]
 8002348:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002352:	2300      	movs	r3, #0
 8002354:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800235c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800235e:	6a3b      	ldr	r3, [r7, #32]
 8002360:	0a1b      	lsrs	r3, r3, #8
 8002362:	f003 0301 	and.w	r3, r3, #1
 8002366:	2b00      	cmp	r3, #0
 8002368:	d00e      	beq.n	8002388 <HAL_I2C_ER_IRQHandler+0x4e>
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	0a1b      	lsrs	r3, r3, #8
 800236e:	f003 0301 	and.w	r3, r3, #1
 8002372:	2b00      	cmp	r3, #0
 8002374:	d008      	beq.n	8002388 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002378:	f043 0301 	orr.w	r3, r3, #1
 800237c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002386:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002388:	6a3b      	ldr	r3, [r7, #32]
 800238a:	0a5b      	lsrs	r3, r3, #9
 800238c:	f003 0301 	and.w	r3, r3, #1
 8002390:	2b00      	cmp	r3, #0
 8002392:	d00e      	beq.n	80023b2 <HAL_I2C_ER_IRQHandler+0x78>
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	0a1b      	lsrs	r3, r3, #8
 8002398:	f003 0301 	and.w	r3, r3, #1
 800239c:	2b00      	cmp	r3, #0
 800239e:	d008      	beq.n	80023b2 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80023a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023a2:	f043 0302 	orr.w	r3, r3, #2
 80023a6:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 80023b0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80023b2:	6a3b      	ldr	r3, [r7, #32]
 80023b4:	0a9b      	lsrs	r3, r3, #10
 80023b6:	f003 0301 	and.w	r3, r3, #1
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d03f      	beq.n	800243e <HAL_I2C_ER_IRQHandler+0x104>
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	0a1b      	lsrs	r3, r3, #8
 80023c2:	f003 0301 	and.w	r3, r3, #1
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d039      	beq.n	800243e <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80023ca:	7efb      	ldrb	r3, [r7, #27]
 80023cc:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023dc:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023e2:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80023e4:	7ebb      	ldrb	r3, [r7, #26]
 80023e6:	2b20      	cmp	r3, #32
 80023e8:	d112      	bne.n	8002410 <HAL_I2C_ER_IRQHandler+0xd6>
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d10f      	bne.n	8002410 <HAL_I2C_ER_IRQHandler+0xd6>
 80023f0:	7cfb      	ldrb	r3, [r7, #19]
 80023f2:	2b21      	cmp	r3, #33	@ 0x21
 80023f4:	d008      	beq.n	8002408 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80023f6:	7cfb      	ldrb	r3, [r7, #19]
 80023f8:	2b29      	cmp	r3, #41	@ 0x29
 80023fa:	d005      	beq.n	8002408 <HAL_I2C_ER_IRQHandler+0xce>
 80023fc:	7cfb      	ldrb	r3, [r7, #19]
 80023fe:	2b28      	cmp	r3, #40	@ 0x28
 8002400:	d106      	bne.n	8002410 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2b21      	cmp	r3, #33	@ 0x21
 8002406:	d103      	bne.n	8002410 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f001 f877 	bl	80034fc <I2C_Slave_AF>
 800240e:	e016      	b.n	800243e <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002418:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800241a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800241c:	f043 0304 	orr.w	r3, r3, #4
 8002420:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002422:	7efb      	ldrb	r3, [r7, #27]
 8002424:	2b10      	cmp	r3, #16
 8002426:	d002      	beq.n	800242e <HAL_I2C_ER_IRQHandler+0xf4>
 8002428:	7efb      	ldrb	r3, [r7, #27]
 800242a:	2b40      	cmp	r3, #64	@ 0x40
 800242c:	d107      	bne.n	800243e <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800243c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800243e:	6a3b      	ldr	r3, [r7, #32]
 8002440:	0adb      	lsrs	r3, r3, #11
 8002442:	f003 0301 	and.w	r3, r3, #1
 8002446:	2b00      	cmp	r3, #0
 8002448:	d00e      	beq.n	8002468 <HAL_I2C_ER_IRQHandler+0x12e>
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	0a1b      	lsrs	r3, r3, #8
 800244e:	f003 0301 	and.w	r3, r3, #1
 8002452:	2b00      	cmp	r3, #0
 8002454:	d008      	beq.n	8002468 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002458:	f043 0308 	orr.w	r3, r3, #8
 800245c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8002466:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800246a:	2b00      	cmp	r3, #0
 800246c:	d008      	beq.n	8002480 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002474:	431a      	orrs	r2, r3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f001 f8b2 	bl	80035e4 <I2C_ITError>
  }
}
 8002480:	bf00      	nop
 8002482:	3728      	adds	r7, #40	@ 0x28
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}

08002488 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002490:	bf00      	nop
 8002492:	370c      	adds	r7, #12
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr

0800249c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80024a4:	bf00      	nop
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80024b8:	bf00      	nop
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80024cc:	bf00      	nop
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	460b      	mov	r3, r1
 80024e2:	70fb      	strb	r3, [r7, #3]
 80024e4:	4613      	mov	r3, r2
 80024e6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80024e8:	bf00      	nop
 80024ea:	370c      	adds	r7, #12
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr

080024f4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80024fc:	bf00      	nop
 80024fe:	370c      	adds	r7, #12
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002510:	bf00      	nop
 8002512:	370c      	adds	r7, #12
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr

0800251c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002524:	bf00      	nop
 8002526:	370c      	adds	r7, #12
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr

08002530 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002538:	bf00      	nop
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr

08002544 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002552:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800255a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002560:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002566:	2b00      	cmp	r3, #0
 8002568:	d150      	bne.n	800260c <I2C_MasterTransmit_TXE+0xc8>
 800256a:	7bfb      	ldrb	r3, [r7, #15]
 800256c:	2b21      	cmp	r3, #33	@ 0x21
 800256e:	d14d      	bne.n	800260c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	2b08      	cmp	r3, #8
 8002574:	d01d      	beq.n	80025b2 <I2C_MasterTransmit_TXE+0x6e>
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	2b20      	cmp	r3, #32
 800257a:	d01a      	beq.n	80025b2 <I2C_MasterTransmit_TXE+0x6e>
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002582:	d016      	beq.n	80025b2 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	685a      	ldr	r2, [r3, #4]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002592:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2211      	movs	r2, #17
 8002598:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2200      	movs	r2, #0
 800259e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2220      	movs	r2, #32
 80025a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f7ff ff6c 	bl	8002488 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80025b0:	e060      	b.n	8002674 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	685a      	ldr	r2, [r3, #4]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80025c0:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025d0:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2220      	movs	r2, #32
 80025dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	2b40      	cmp	r3, #64	@ 0x40
 80025ea:	d107      	bne.n	80025fc <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f7ff ff87 	bl	8002508 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80025fa:	e03b      	b.n	8002674 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f7ff ff3f 	bl	8002488 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800260a:	e033      	b.n	8002674 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800260c:	7bfb      	ldrb	r3, [r7, #15]
 800260e:	2b21      	cmp	r3, #33	@ 0x21
 8002610:	d005      	beq.n	800261e <I2C_MasterTransmit_TXE+0xda>
 8002612:	7bbb      	ldrb	r3, [r7, #14]
 8002614:	2b40      	cmp	r3, #64	@ 0x40
 8002616:	d12d      	bne.n	8002674 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002618:	7bfb      	ldrb	r3, [r7, #15]
 800261a:	2b22      	cmp	r3, #34	@ 0x22
 800261c:	d12a      	bne.n	8002674 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002622:	b29b      	uxth	r3, r3
 8002624:	2b00      	cmp	r3, #0
 8002626:	d108      	bne.n	800263a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	685a      	ldr	r2, [r3, #4]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002636:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002638:	e01c      	b.n	8002674 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002640:	b2db      	uxtb	r3, r3
 8002642:	2b40      	cmp	r3, #64	@ 0x40
 8002644:	d103      	bne.n	800264e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f000 f88e 	bl	8002768 <I2C_MemoryTransmit_TXE_BTF>
}
 800264c:	e012      	b.n	8002674 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002652:	781a      	ldrb	r2, [r3, #0]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800265e:	1c5a      	adds	r2, r3, #1
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002668:	b29b      	uxth	r3, r3
 800266a:	3b01      	subs	r3, #1
 800266c:	b29a      	uxth	r2, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002672:	e7ff      	b.n	8002674 <I2C_MasterTransmit_TXE+0x130>
 8002674:	bf00      	nop
 8002676:	3710      	adds	r7, #16
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002688:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002690:	b2db      	uxtb	r3, r3
 8002692:	2b21      	cmp	r3, #33	@ 0x21
 8002694:	d164      	bne.n	8002760 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800269a:	b29b      	uxth	r3, r3
 800269c:	2b00      	cmp	r3, #0
 800269e:	d012      	beq.n	80026c6 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026a4:	781a      	ldrb	r2, [r3, #0]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026b0:	1c5a      	adds	r2, r3, #1
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026ba:	b29b      	uxth	r3, r3
 80026bc:	3b01      	subs	r3, #1
 80026be:	b29a      	uxth	r2, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80026c4:	e04c      	b.n	8002760 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2b08      	cmp	r3, #8
 80026ca:	d01d      	beq.n	8002708 <I2C_MasterTransmit_BTF+0x8c>
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2b20      	cmp	r3, #32
 80026d0:	d01a      	beq.n	8002708 <I2C_MasterTransmit_BTF+0x8c>
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80026d8:	d016      	beq.n	8002708 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	685a      	ldr	r2, [r3, #4]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80026e8:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2211      	movs	r2, #17
 80026ee:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2220      	movs	r2, #32
 80026fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f7ff fec1 	bl	8002488 <HAL_I2C_MasterTxCpltCallback>
}
 8002706:	e02b      	b.n	8002760 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	685a      	ldr	r2, [r3, #4]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002716:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002726:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2220      	movs	r2, #32
 8002732:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2b40      	cmp	r3, #64	@ 0x40
 8002740:	d107      	bne.n	8002752 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f7ff fedc 	bl	8002508 <HAL_I2C_MemTxCpltCallback>
}
 8002750:	e006      	b.n	8002760 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f7ff fe94 	bl	8002488 <HAL_I2C_MasterTxCpltCallback>
}
 8002760:	bf00      	nop
 8002762:	3710      	adds	r7, #16
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}

08002768 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002776:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800277c:	2b00      	cmp	r3, #0
 800277e:	d11d      	bne.n	80027bc <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002784:	2b01      	cmp	r3, #1
 8002786:	d10b      	bne.n	80027a0 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800278c:	b2da      	uxtb	r2, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002798:	1c9a      	adds	r2, r3, #2
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 800279e:	e077      	b.n	8002890 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	121b      	asrs	r3, r3, #8
 80027a8:	b2da      	uxtb	r2, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027b4:	1c5a      	adds	r2, r3, #1
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80027ba:	e069      	b.n	8002890 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d10b      	bne.n	80027dc <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027c8:	b2da      	uxtb	r2, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027d4:	1c5a      	adds	r2, r3, #1
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80027da:	e059      	b.n	8002890 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d152      	bne.n	800288a <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80027e4:	7bfb      	ldrb	r3, [r7, #15]
 80027e6:	2b22      	cmp	r3, #34	@ 0x22
 80027e8:	d10d      	bne.n	8002806 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80027f8:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027fe:	1c5a      	adds	r2, r3, #1
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002804:	e044      	b.n	8002890 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800280a:	b29b      	uxth	r3, r3
 800280c:	2b00      	cmp	r3, #0
 800280e:	d015      	beq.n	800283c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002810:	7bfb      	ldrb	r3, [r7, #15]
 8002812:	2b21      	cmp	r3, #33	@ 0x21
 8002814:	d112      	bne.n	800283c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800281a:	781a      	ldrb	r2, [r3, #0]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002826:	1c5a      	adds	r2, r3, #1
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002830:	b29b      	uxth	r3, r3
 8002832:	3b01      	subs	r3, #1
 8002834:	b29a      	uxth	r2, r3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800283a:	e029      	b.n	8002890 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002840:	b29b      	uxth	r3, r3
 8002842:	2b00      	cmp	r3, #0
 8002844:	d124      	bne.n	8002890 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8002846:	7bfb      	ldrb	r3, [r7, #15]
 8002848:	2b21      	cmp	r3, #33	@ 0x21
 800284a:	d121      	bne.n	8002890 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	685a      	ldr	r2, [r3, #4]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800285a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800286a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2220      	movs	r2, #32
 8002876:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f7ff fe40 	bl	8002508 <HAL_I2C_MemTxCpltCallback>
}
 8002888:	e002      	b.n	8002890 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f7fe ffe8 	bl	8001860 <I2C_Flush_DR>
}
 8002890:	bf00      	nop
 8002892:	3710      	adds	r7, #16
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}

08002898 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	2b22      	cmp	r3, #34	@ 0x22
 80028aa:	f040 80b9 	bne.w	8002a20 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028b2:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	2b03      	cmp	r3, #3
 80028c0:	d921      	bls.n	8002906 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	691a      	ldr	r2, [r3, #16]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028cc:	b2d2      	uxtb	r2, r2
 80028ce:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028d4:	1c5a      	adds	r2, r3, #1
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028de:	b29b      	uxth	r3, r3
 80028e0:	3b01      	subs	r3, #1
 80028e2:	b29a      	uxth	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	2b03      	cmp	r3, #3
 80028f0:	f040 8096 	bne.w	8002a20 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	685a      	ldr	r2, [r3, #4]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002902:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8002904:	e08c      	b.n	8002a20 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800290a:	2b02      	cmp	r3, #2
 800290c:	d07f      	beq.n	8002a0e <I2C_MasterReceive_RXNE+0x176>
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	2b01      	cmp	r3, #1
 8002912:	d002      	beq.n	800291a <I2C_MasterReceive_RXNE+0x82>
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d179      	bne.n	8002a0e <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f001 fb64 	bl	8003fe8 <I2C_WaitOnSTOPRequestThroughIT>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d14c      	bne.n	80029c0 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002934:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	685a      	ldr	r2, [r3, #4]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002944:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	691a      	ldr	r2, [r3, #16]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002950:	b2d2      	uxtb	r2, r2
 8002952:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002958:	1c5a      	adds	r2, r3, #1
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002962:	b29b      	uxth	r3, r3
 8002964:	3b01      	subs	r3, #1
 8002966:	b29a      	uxth	r2, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2220      	movs	r2, #32
 8002970:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800297a:	b2db      	uxtb	r3, r3
 800297c:	2b40      	cmp	r3, #64	@ 0x40
 800297e:	d10a      	bne.n	8002996 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2200      	movs	r2, #0
 8002984:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f7fd fe6c 	bl	800066c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002994:	e044      	b.n	8002a20 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2b08      	cmp	r3, #8
 80029a2:	d002      	beq.n	80029aa <I2C_MasterReceive_RXNE+0x112>
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2b20      	cmp	r3, #32
 80029a8:	d103      	bne.n	80029b2 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	631a      	str	r2, [r3, #48]	@ 0x30
 80029b0:	e002      	b.n	80029b8 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2212      	movs	r2, #18
 80029b6:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f7ff fd6f 	bl	800249c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80029be:	e02f      	b.n	8002a20 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	685a      	ldr	r2, [r3, #4]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80029ce:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	691a      	ldr	r2, [r3, #16]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029da:	b2d2      	uxtb	r2, r2
 80029dc:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029e2:	1c5a      	adds	r2, r3, #1
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	3b01      	subs	r3, #1
 80029f0:	b29a      	uxth	r2, r3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2220      	movs	r2, #32
 80029fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f7ff fd88 	bl	800251c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002a0c:	e008      	b.n	8002a20 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	685a      	ldr	r2, [r3, #4]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a1c:	605a      	str	r2, [r3, #4]
}
 8002a1e:	e7ff      	b.n	8002a20 <I2C_MasterReceive_RXNE+0x188>
 8002a20:	bf00      	nop
 8002a22:	3710      	adds	r7, #16
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a34:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	2b04      	cmp	r3, #4
 8002a3e:	d11b      	bne.n	8002a78 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	685a      	ldr	r2, [r3, #4]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a4e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	691a      	ldr	r2, [r3, #16]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a5a:	b2d2      	uxtb	r2, r2
 8002a5c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a62:	1c5a      	adds	r2, r3, #1
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	3b01      	subs	r3, #1
 8002a70:	b29a      	uxth	r2, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002a76:	e0c4      	b.n	8002c02 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	2b03      	cmp	r3, #3
 8002a80:	d129      	bne.n	8002ad6 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	685a      	ldr	r2, [r3, #4]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a90:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2b04      	cmp	r3, #4
 8002a96:	d00a      	beq.n	8002aae <I2C_MasterReceive_BTF+0x86>
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d007      	beq.n	8002aae <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002aac:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	691a      	ldr	r2, [r3, #16]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ab8:	b2d2      	uxtb	r2, r2
 8002aba:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ac0:	1c5a      	adds	r2, r3, #1
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	3b01      	subs	r3, #1
 8002ace:	b29a      	uxth	r2, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002ad4:	e095      	b.n	8002c02 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d17d      	bne.n	8002bdc <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d002      	beq.n	8002aec <I2C_MasterReceive_BTF+0xc4>
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2b10      	cmp	r3, #16
 8002aea:	d108      	bne.n	8002afe <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002afa:	601a      	str	r2, [r3, #0]
 8002afc:	e016      	b.n	8002b2c <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2b04      	cmp	r3, #4
 8002b02:	d002      	beq.n	8002b0a <I2C_MasterReceive_BTF+0xe2>
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d108      	bne.n	8002b1c <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002b18:	601a      	str	r2, [r3, #0]
 8002b1a:	e007      	b.n	8002b2c <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b2a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	691a      	ldr	r2, [r3, #16]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b36:	b2d2      	uxtb	r2, r2
 8002b38:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b3e:	1c5a      	adds	r2, r3, #1
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	3b01      	subs	r3, #1
 8002b4c:	b29a      	uxth	r2, r3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	691a      	ldr	r2, [r3, #16]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b5c:	b2d2      	uxtb	r2, r2
 8002b5e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b64:	1c5a      	adds	r2, r3, #1
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	3b01      	subs	r3, #1
 8002b72:	b29a      	uxth	r2, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	685a      	ldr	r2, [r3, #4]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002b86:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2220      	movs	r2, #32
 8002b8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	2b40      	cmp	r3, #64	@ 0x40
 8002b9a:	d10a      	bne.n	8002bb2 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f7fd fd5e 	bl	800066c <HAL_I2C_MemRxCpltCallback>
}
 8002bb0:	e027      	b.n	8002c02 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2b08      	cmp	r3, #8
 8002bbe:	d002      	beq.n	8002bc6 <I2C_MasterReceive_BTF+0x19e>
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2b20      	cmp	r3, #32
 8002bc4:	d103      	bne.n	8002bce <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	631a      	str	r2, [r3, #48]	@ 0x30
 8002bcc:	e002      	b.n	8002bd4 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2212      	movs	r2, #18
 8002bd2:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f7ff fc61 	bl	800249c <HAL_I2C_MasterRxCpltCallback>
}
 8002bda:	e012      	b.n	8002c02 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	691a      	ldr	r2, [r3, #16]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be6:	b2d2      	uxtb	r2, r2
 8002be8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bee:	1c5a      	adds	r2, r3, #1
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	b29a      	uxth	r2, r3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002c02:	bf00      	nop
 8002c04:	3710      	adds	r7, #16
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}

08002c0a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002c0a:	b480      	push	{r7}
 8002c0c:	b083      	sub	sp, #12
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	2b40      	cmp	r3, #64	@ 0x40
 8002c1c:	d117      	bne.n	8002c4e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d109      	bne.n	8002c3a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002c36:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002c38:	e067      	b.n	8002d0a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	f043 0301 	orr.w	r3, r3, #1
 8002c44:	b2da      	uxtb	r2, r3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	611a      	str	r2, [r3, #16]
}
 8002c4c:	e05d      	b.n	8002d0a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	691b      	ldr	r3, [r3, #16]
 8002c52:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002c56:	d133      	bne.n	8002cc0 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	2b21      	cmp	r3, #33	@ 0x21
 8002c62:	d109      	bne.n	8002c78 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002c74:	611a      	str	r2, [r3, #16]
 8002c76:	e008      	b.n	8002c8a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	f043 0301 	orr.w	r3, r3, #1
 8002c82:	b2da      	uxtb	r2, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d004      	beq.n	8002c9c <I2C_Master_SB+0x92>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d108      	bne.n	8002cae <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d032      	beq.n	8002d0a <I2C_Master_SB+0x100>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ca8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d02d      	beq.n	8002d0a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	685a      	ldr	r2, [r3, #4]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002cbc:	605a      	str	r2, [r3, #4]
}
 8002cbe:	e024      	b.n	8002d0a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d10e      	bne.n	8002ce6 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	11db      	asrs	r3, r3, #7
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	f003 0306 	and.w	r3, r3, #6
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	f063 030f 	orn	r3, r3, #15
 8002cdc:	b2da      	uxtb	r2, r3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	611a      	str	r2, [r3, #16]
}
 8002ce4:	e011      	b.n	8002d0a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d10d      	bne.n	8002d0a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	11db      	asrs	r3, r3, #7
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	f003 0306 	and.w	r3, r3, #6
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	f063 030e 	orn	r3, r3, #14
 8002d02:	b2da      	uxtb	r2, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	611a      	str	r2, [r3, #16]
}
 8002d0a:	bf00      	nop
 8002d0c:	370c      	adds	r7, #12
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr

08002d16 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002d16:	b480      	push	{r7}
 8002d18:	b083      	sub	sp, #12
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d22:	b2da      	uxtb	r2, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d004      	beq.n	8002d3c <I2C_Master_ADD10+0x26>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d108      	bne.n	8002d4e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d00c      	beq.n	8002d5e <I2C_Master_ADD10+0x48>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d007      	beq.n	8002d5e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	685a      	ldr	r2, [r3, #4]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d5c:	605a      	str	r2, [r3, #4]
  }
}
 8002d5e:	bf00      	nop
 8002d60:	370c      	adds	r7, #12
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr

08002d6a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	b091      	sub	sp, #68	@ 0x44
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002d78:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d80:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d86:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	2b22      	cmp	r3, #34	@ 0x22
 8002d92:	f040 8169 	bne.w	8003068 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d10f      	bne.n	8002dbe <I2C_Master_ADDR+0x54>
 8002d9e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002da2:	2b40      	cmp	r3, #64	@ 0x40
 8002da4:	d10b      	bne.n	8002dbe <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002da6:	2300      	movs	r3, #0
 8002da8:	633b      	str	r3, [r7, #48]	@ 0x30
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	695b      	ldr	r3, [r3, #20]
 8002db0:	633b      	str	r3, [r7, #48]	@ 0x30
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	699b      	ldr	r3, [r3, #24]
 8002db8:	633b      	str	r3, [r7, #48]	@ 0x30
 8002dba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dbc:	e160      	b.n	8003080 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d11d      	bne.n	8002e02 <I2C_Master_ADDR+0x98>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	691b      	ldr	r3, [r3, #16]
 8002dca:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002dce:	d118      	bne.n	8002e02 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	695b      	ldr	r3, [r3, #20]
 8002dda:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	699b      	ldr	r3, [r3, #24]
 8002de2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002de4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002df4:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002dfa:	1c5a      	adds	r2, r3, #1
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	651a      	str	r2, [r3, #80]	@ 0x50
 8002e00:	e13e      	b.n	8003080 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d113      	bne.n	8002e34 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	695b      	ldr	r3, [r3, #20]
 8002e16:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	699b      	ldr	r3, [r3, #24]
 8002e1e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e20:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e30:	601a      	str	r2, [r3, #0]
 8002e32:	e115      	b.n	8003060 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	f040 808a 	bne.w	8002f54 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002e40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e42:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002e46:	d137      	bne.n	8002eb8 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e56:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e62:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002e66:	d113      	bne.n	8002e90 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e76:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e78:	2300      	movs	r3, #0
 8002e7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	695b      	ldr	r3, [r3, #20]
 8002e82:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	699b      	ldr	r3, [r3, #24]
 8002e8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e8e:	e0e7      	b.n	8003060 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e90:	2300      	movs	r3, #0
 8002e92:	623b      	str	r3, [r7, #32]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	695b      	ldr	r3, [r3, #20]
 8002e9a:	623b      	str	r3, [r7, #32]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	699b      	ldr	r3, [r3, #24]
 8002ea2:	623b      	str	r3, [r7, #32]
 8002ea4:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002eb4:	601a      	str	r2, [r3, #0]
 8002eb6:	e0d3      	b.n	8003060 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002eb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002eba:	2b08      	cmp	r3, #8
 8002ebc:	d02e      	beq.n	8002f1c <I2C_Master_ADDR+0x1b2>
 8002ebe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ec0:	2b20      	cmp	r3, #32
 8002ec2:	d02b      	beq.n	8002f1c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002ec4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ec6:	2b12      	cmp	r3, #18
 8002ec8:	d102      	bne.n	8002ed0 <I2C_Master_ADDR+0x166>
 8002eca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d125      	bne.n	8002f1c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002ed0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ed2:	2b04      	cmp	r3, #4
 8002ed4:	d00e      	beq.n	8002ef4 <I2C_Master_ADDR+0x18a>
 8002ed6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d00b      	beq.n	8002ef4 <I2C_Master_ADDR+0x18a>
 8002edc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ede:	2b10      	cmp	r3, #16
 8002ee0:	d008      	beq.n	8002ef4 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ef0:	601a      	str	r2, [r3, #0]
 8002ef2:	e007      	b.n	8002f04 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002f02:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f04:	2300      	movs	r3, #0
 8002f06:	61fb      	str	r3, [r7, #28]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	695b      	ldr	r3, [r3, #20]
 8002f0e:	61fb      	str	r3, [r7, #28]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	699b      	ldr	r3, [r3, #24]
 8002f16:	61fb      	str	r3, [r7, #28]
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	e0a1      	b.n	8003060 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f2a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	61bb      	str	r3, [r7, #24]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	695b      	ldr	r3, [r3, #20]
 8002f36:	61bb      	str	r3, [r7, #24]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	699b      	ldr	r3, [r3, #24]
 8002f3e:	61bb      	str	r3, [r7, #24]
 8002f40:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f50:	601a      	str	r2, [r3, #0]
 8002f52:	e085      	b.n	8003060 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d14d      	bne.n	8002ffa <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002f5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f60:	2b04      	cmp	r3, #4
 8002f62:	d016      	beq.n	8002f92 <I2C_Master_ADDR+0x228>
 8002f64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d013      	beq.n	8002f92 <I2C_Master_ADDR+0x228>
 8002f6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f6c:	2b10      	cmp	r3, #16
 8002f6e:	d010      	beq.n	8002f92 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f7e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f8e:	601a      	str	r2, [r3, #0]
 8002f90:	e007      	b.n	8002fa2 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002fa0:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002fac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002fb0:	d117      	bne.n	8002fe2 <I2C_Master_ADDR+0x278>
 8002fb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fb4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002fb8:	d00b      	beq.n	8002fd2 <I2C_Master_ADDR+0x268>
 8002fba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d008      	beq.n	8002fd2 <I2C_Master_ADDR+0x268>
 8002fc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fc2:	2b08      	cmp	r3, #8
 8002fc4:	d005      	beq.n	8002fd2 <I2C_Master_ADDR+0x268>
 8002fc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fc8:	2b10      	cmp	r3, #16
 8002fca:	d002      	beq.n	8002fd2 <I2C_Master_ADDR+0x268>
 8002fcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fce:	2b20      	cmp	r3, #32
 8002fd0:	d107      	bne.n	8002fe2 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	685a      	ldr	r2, [r3, #4]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002fe0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	617b      	str	r3, [r7, #20]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	695b      	ldr	r3, [r3, #20]
 8002fec:	617b      	str	r3, [r7, #20]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	699b      	ldr	r3, [r3, #24]
 8002ff4:	617b      	str	r3, [r7, #20]
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	e032      	b.n	8003060 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003008:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003014:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003018:	d117      	bne.n	800304a <I2C_Master_ADDR+0x2e0>
 800301a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800301c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003020:	d00b      	beq.n	800303a <I2C_Master_ADDR+0x2d0>
 8003022:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003024:	2b01      	cmp	r3, #1
 8003026:	d008      	beq.n	800303a <I2C_Master_ADDR+0x2d0>
 8003028:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800302a:	2b08      	cmp	r3, #8
 800302c:	d005      	beq.n	800303a <I2C_Master_ADDR+0x2d0>
 800302e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003030:	2b10      	cmp	r3, #16
 8003032:	d002      	beq.n	800303a <I2C_Master_ADDR+0x2d0>
 8003034:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003036:	2b20      	cmp	r3, #32
 8003038:	d107      	bne.n	800304a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	685a      	ldr	r2, [r3, #4]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003048:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800304a:	2300      	movs	r3, #0
 800304c:	613b      	str	r3, [r7, #16]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	695b      	ldr	r3, [r3, #20]
 8003054:	613b      	str	r3, [r7, #16]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	699b      	ldr	r3, [r3, #24]
 800305c:	613b      	str	r3, [r7, #16]
 800305e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003066:	e00b      	b.n	8003080 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003068:	2300      	movs	r3, #0
 800306a:	60fb      	str	r3, [r7, #12]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	695b      	ldr	r3, [r3, #20]
 8003072:	60fb      	str	r3, [r7, #12]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	699b      	ldr	r3, [r3, #24]
 800307a:	60fb      	str	r3, [r7, #12]
 800307c:	68fb      	ldr	r3, [r7, #12]
}
 800307e:	e7ff      	b.n	8003080 <I2C_Master_ADDR+0x316>
 8003080:	bf00      	nop
 8003082:	3744      	adds	r7, #68	@ 0x44
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr

0800308c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800309a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d02b      	beq.n	80030fe <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030aa:	781a      	ldrb	r2, [r3, #0]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b6:	1c5a      	adds	r2, r3, #1
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	3b01      	subs	r3, #1
 80030c4:	b29a      	uxth	r2, r3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d114      	bne.n	80030fe <I2C_SlaveTransmit_TXE+0x72>
 80030d4:	7bfb      	ldrb	r3, [r7, #15]
 80030d6:	2b29      	cmp	r3, #41	@ 0x29
 80030d8:	d111      	bne.n	80030fe <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	685a      	ldr	r2, [r3, #4]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030e8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2221      	movs	r2, #33	@ 0x21
 80030ee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2228      	movs	r2, #40	@ 0x28
 80030f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f7ff f9d9 	bl	80024b0 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80030fe:	bf00      	nop
 8003100:	3710      	adds	r7, #16
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}

08003106 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003106:	b480      	push	{r7}
 8003108:	b083      	sub	sp, #12
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003112:	b29b      	uxth	r3, r3
 8003114:	2b00      	cmp	r3, #0
 8003116:	d011      	beq.n	800313c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800311c:	781a      	ldrb	r2, [r3, #0]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003128:	1c5a      	adds	r2, r3, #1
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003132:	b29b      	uxth	r3, r3
 8003134:	3b01      	subs	r3, #1
 8003136:	b29a      	uxth	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800313c:	bf00      	nop
 800313e:	370c      	adds	r7, #12
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr

08003148 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003156:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800315c:	b29b      	uxth	r3, r3
 800315e:	2b00      	cmp	r3, #0
 8003160:	d02c      	beq.n	80031bc <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	691a      	ldr	r2, [r3, #16]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800316c:	b2d2      	uxtb	r2, r2
 800316e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003174:	1c5a      	adds	r2, r3, #1
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800317e:	b29b      	uxth	r3, r3
 8003180:	3b01      	subs	r3, #1
 8003182:	b29a      	uxth	r2, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800318c:	b29b      	uxth	r3, r3
 800318e:	2b00      	cmp	r3, #0
 8003190:	d114      	bne.n	80031bc <I2C_SlaveReceive_RXNE+0x74>
 8003192:	7bfb      	ldrb	r3, [r7, #15]
 8003194:	2b2a      	cmp	r3, #42	@ 0x2a
 8003196:	d111      	bne.n	80031bc <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	685a      	ldr	r2, [r3, #4]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031a6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2222      	movs	r2, #34	@ 0x22
 80031ac:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2228      	movs	r2, #40	@ 0x28
 80031b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f7ff f984 	bl	80024c4 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80031bc:	bf00      	nop
 80031be:	3710      	adds	r7, #16
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d012      	beq.n	80031fc <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	691a      	ldr	r2, [r3, #16]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e0:	b2d2      	uxtb	r2, r2
 80031e2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e8:	1c5a      	adds	r2, r3, #1
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031f2:	b29b      	uxth	r3, r3
 80031f4:	3b01      	subs	r3, #1
 80031f6:	b29a      	uxth	r2, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80031fc:	bf00      	nop
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003212:	2300      	movs	r3, #0
 8003214:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800321c:	b2db      	uxtb	r3, r3
 800321e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003222:	2b28      	cmp	r3, #40	@ 0x28
 8003224:	d127      	bne.n	8003276 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	685a      	ldr	r2, [r3, #4]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003234:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	089b      	lsrs	r3, r3, #2
 800323a:	f003 0301 	and.w	r3, r3, #1
 800323e:	2b00      	cmp	r3, #0
 8003240:	d101      	bne.n	8003246 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003242:	2301      	movs	r3, #1
 8003244:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	09db      	lsrs	r3, r3, #7
 800324a:	f003 0301 	and.w	r3, r3, #1
 800324e:	2b00      	cmp	r3, #0
 8003250:	d103      	bne.n	800325a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	81bb      	strh	r3, [r7, #12]
 8003258:	e002      	b.n	8003260 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	699b      	ldr	r3, [r3, #24]
 800325e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003268:	89ba      	ldrh	r2, [r7, #12]
 800326a:	7bfb      	ldrb	r3, [r7, #15]
 800326c:	4619      	mov	r1, r3
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f7ff f932 	bl	80024d8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003274:	e00e      	b.n	8003294 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003276:	2300      	movs	r3, #0
 8003278:	60bb      	str	r3, [r7, #8]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	695b      	ldr	r3, [r3, #20]
 8003280:	60bb      	str	r3, [r7, #8]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	699b      	ldr	r3, [r3, #24]
 8003288:	60bb      	str	r3, [r7, #8]
 800328a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8003294:	bf00      	nop
 8003296:	3710      	adds	r7, #16
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}

0800329c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b084      	sub	sp, #16
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032aa:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	685a      	ldr	r2, [r3, #4]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80032ba:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80032bc:	2300      	movs	r3, #0
 80032be:	60bb      	str	r3, [r7, #8]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	695b      	ldr	r3, [r3, #20]
 80032c6:	60bb      	str	r3, [r7, #8]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f042 0201 	orr.w	r2, r2, #1
 80032d6:	601a      	str	r2, [r3, #0]
 80032d8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032e8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80032f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80032f8:	d172      	bne.n	80033e0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80032fa:	7bfb      	ldrb	r3, [r7, #15]
 80032fc:	2b22      	cmp	r3, #34	@ 0x22
 80032fe:	d002      	beq.n	8003306 <I2C_Slave_STOPF+0x6a>
 8003300:	7bfb      	ldrb	r3, [r7, #15]
 8003302:	2b2a      	cmp	r3, #42	@ 0x2a
 8003304:	d135      	bne.n	8003372 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	b29a      	uxth	r2, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003318:	b29b      	uxth	r3, r3
 800331a:	2b00      	cmp	r3, #0
 800331c:	d005      	beq.n	800332a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003322:	f043 0204 	orr.w	r2, r3, #4
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	685a      	ldr	r2, [r3, #4]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003338:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800333e:	4618      	mov	r0, r3
 8003340:	f7fd ff75 	bl	800122e <HAL_DMA_GetState>
 8003344:	4603      	mov	r3, r0
 8003346:	2b01      	cmp	r3, #1
 8003348:	d049      	beq.n	80033de <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800334e:	4a69      	ldr	r2, [pc, #420]	@ (80034f4 <I2C_Slave_STOPF+0x258>)
 8003350:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003356:	4618      	mov	r0, r3
 8003358:	f7fd ff47 	bl	80011ea <HAL_DMA_Abort_IT>
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d03d      	beq.n	80033de <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003366:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800336c:	4610      	mov	r0, r2
 800336e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003370:	e035      	b.n	80033de <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	b29a      	uxth	r2, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003384:	b29b      	uxth	r3, r3
 8003386:	2b00      	cmp	r3, #0
 8003388:	d005      	beq.n	8003396 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800338e:	f043 0204 	orr.w	r2, r3, #4
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	685a      	ldr	r2, [r3, #4]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80033a4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033aa:	4618      	mov	r0, r3
 80033ac:	f7fd ff3f 	bl	800122e <HAL_DMA_GetState>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d014      	beq.n	80033e0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033ba:	4a4e      	ldr	r2, [pc, #312]	@ (80034f4 <I2C_Slave_STOPF+0x258>)
 80033bc:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033c2:	4618      	mov	r0, r3
 80033c4:	f7fd ff11 	bl	80011ea <HAL_DMA_Abort_IT>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d008      	beq.n	80033e0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80033d8:	4610      	mov	r0, r2
 80033da:	4798      	blx	r3
 80033dc:	e000      	b.n	80033e0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80033de:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d03e      	beq.n	8003468 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	695b      	ldr	r3, [r3, #20]
 80033f0:	f003 0304 	and.w	r3, r3, #4
 80033f4:	2b04      	cmp	r3, #4
 80033f6:	d112      	bne.n	800341e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	691a      	ldr	r2, [r3, #16]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003402:	b2d2      	uxtb	r2, r2
 8003404:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800340a:	1c5a      	adds	r2, r3, #1
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003414:	b29b      	uxth	r3, r3
 8003416:	3b01      	subs	r3, #1
 8003418:	b29a      	uxth	r2, r3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	695b      	ldr	r3, [r3, #20]
 8003424:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003428:	2b40      	cmp	r3, #64	@ 0x40
 800342a:	d112      	bne.n	8003452 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	691a      	ldr	r2, [r3, #16]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003436:	b2d2      	uxtb	r2, r2
 8003438:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800343e:	1c5a      	adds	r2, r3, #1
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003448:	b29b      	uxth	r3, r3
 800344a:	3b01      	subs	r3, #1
 800344c:	b29a      	uxth	r2, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003456:	b29b      	uxth	r3, r3
 8003458:	2b00      	cmp	r3, #0
 800345a:	d005      	beq.n	8003468 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003460:	f043 0204 	orr.w	r2, r3, #4
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800346c:	2b00      	cmp	r3, #0
 800346e:	d003      	beq.n	8003478 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f000 f8b7 	bl	80035e4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003476:	e039      	b.n	80034ec <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003478:	7bfb      	ldrb	r3, [r7, #15]
 800347a:	2b2a      	cmp	r3, #42	@ 0x2a
 800347c:	d109      	bne.n	8003492 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2228      	movs	r2, #40	@ 0x28
 8003488:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f7ff f819 	bl	80024c4 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b28      	cmp	r3, #40	@ 0x28
 800349c:	d111      	bne.n	80034c2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a15      	ldr	r2, [pc, #84]	@ (80034f8 <I2C_Slave_STOPF+0x25c>)
 80034a2:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2220      	movs	r2, #32
 80034ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f7ff f81a 	bl	80024f4 <HAL_I2C_ListenCpltCallback>
}
 80034c0:	e014      	b.n	80034ec <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034c6:	2b22      	cmp	r3, #34	@ 0x22
 80034c8:	d002      	beq.n	80034d0 <I2C_Slave_STOPF+0x234>
 80034ca:	7bfb      	ldrb	r3, [r7, #15]
 80034cc:	2b22      	cmp	r3, #34	@ 0x22
 80034ce:	d10d      	bne.n	80034ec <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2200      	movs	r2, #0
 80034d4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2220      	movs	r2, #32
 80034da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f7fe ffec 	bl	80024c4 <HAL_I2C_SlaveRxCpltCallback>
}
 80034ec:	bf00      	nop
 80034ee:	3710      	adds	r7, #16
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	08003b45 	.word	0x08003b45
 80034f8:	ffff0000 	.word	0xffff0000

080034fc <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800350a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003510:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	2b08      	cmp	r3, #8
 8003516:	d002      	beq.n	800351e <I2C_Slave_AF+0x22>
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	2b20      	cmp	r3, #32
 800351c:	d129      	bne.n	8003572 <I2C_Slave_AF+0x76>
 800351e:	7bfb      	ldrb	r3, [r7, #15]
 8003520:	2b28      	cmp	r3, #40	@ 0x28
 8003522:	d126      	bne.n	8003572 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	4a2e      	ldr	r2, [pc, #184]	@ (80035e0 <I2C_Slave_AF+0xe4>)
 8003528:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	685a      	ldr	r2, [r3, #4]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003538:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003542:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003552:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2220      	movs	r2, #32
 800355e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f7fe ffc2 	bl	80024f4 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003570:	e031      	b.n	80035d6 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003572:	7bfb      	ldrb	r3, [r7, #15]
 8003574:	2b21      	cmp	r3, #33	@ 0x21
 8003576:	d129      	bne.n	80035cc <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	4a19      	ldr	r2, [pc, #100]	@ (80035e0 <I2C_Slave_AF+0xe4>)
 800357c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2221      	movs	r2, #33	@ 0x21
 8003582:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2220      	movs	r2, #32
 8003588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2200      	movs	r2, #0
 8003590:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	685a      	ldr	r2, [r3, #4]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80035a2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80035ac:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035bc:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f7fe f94e 	bl	8001860 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f7fe ff73 	bl	80024b0 <HAL_I2C_SlaveTxCpltCallback>
}
 80035ca:	e004      	b.n	80035d6 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80035d4:	615a      	str	r2, [r3, #20]
}
 80035d6:	bf00      	nop
 80035d8:	3710      	adds	r7, #16
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	ffff0000 	.word	0xffff0000

080035e4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035f2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80035fa:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80035fc:	7bbb      	ldrb	r3, [r7, #14]
 80035fe:	2b10      	cmp	r3, #16
 8003600:	d002      	beq.n	8003608 <I2C_ITError+0x24>
 8003602:	7bbb      	ldrb	r3, [r7, #14]
 8003604:	2b40      	cmp	r3, #64	@ 0x40
 8003606:	d10a      	bne.n	800361e <I2C_ITError+0x3a>
 8003608:	7bfb      	ldrb	r3, [r7, #15]
 800360a:	2b22      	cmp	r3, #34	@ 0x22
 800360c:	d107      	bne.n	800361e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800361c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800361e:	7bfb      	ldrb	r3, [r7, #15]
 8003620:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003624:	2b28      	cmp	r3, #40	@ 0x28
 8003626:	d107      	bne.n	8003638 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2228      	movs	r2, #40	@ 0x28
 8003632:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003636:	e015      	b.n	8003664 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003642:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003646:	d00a      	beq.n	800365e <I2C_ITError+0x7a>
 8003648:	7bfb      	ldrb	r3, [r7, #15]
 800364a:	2b60      	cmp	r3, #96	@ 0x60
 800364c:	d007      	beq.n	800365e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2220      	movs	r2, #32
 8003652:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800366e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003672:	d162      	bne.n	800373a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	685a      	ldr	r2, [r3, #4]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003682:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003688:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800368c:	b2db      	uxtb	r3, r3
 800368e:	2b01      	cmp	r3, #1
 8003690:	d020      	beq.n	80036d4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003696:	4a6a      	ldr	r2, [pc, #424]	@ (8003840 <I2C_ITError+0x25c>)
 8003698:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800369e:	4618      	mov	r0, r3
 80036a0:	f7fd fda3 	bl	80011ea <HAL_DMA_Abort_IT>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	f000 8089 	beq.w	80037be <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f022 0201 	bic.w	r2, r2, #1
 80036ba:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2220      	movs	r2, #32
 80036c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80036ce:	4610      	mov	r0, r2
 80036d0:	4798      	blx	r3
 80036d2:	e074      	b.n	80037be <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036d8:	4a59      	ldr	r2, [pc, #356]	@ (8003840 <I2C_ITError+0x25c>)
 80036da:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036e0:	4618      	mov	r0, r3
 80036e2:	f7fd fd82 	bl	80011ea <HAL_DMA_Abort_IT>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d068      	beq.n	80037be <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	695b      	ldr	r3, [r3, #20]
 80036f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036f6:	2b40      	cmp	r3, #64	@ 0x40
 80036f8:	d10b      	bne.n	8003712 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	691a      	ldr	r2, [r3, #16]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003704:	b2d2      	uxtb	r2, r2
 8003706:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800370c:	1c5a      	adds	r2, r3, #1
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f022 0201 	bic.w	r2, r2, #1
 8003720:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2220      	movs	r2, #32
 8003726:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800372e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003734:	4610      	mov	r0, r2
 8003736:	4798      	blx	r3
 8003738:	e041      	b.n	80037be <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003740:	b2db      	uxtb	r3, r3
 8003742:	2b60      	cmp	r3, #96	@ 0x60
 8003744:	d125      	bne.n	8003792 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2220      	movs	r2, #32
 800374a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	695b      	ldr	r3, [r3, #20]
 800375a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800375e:	2b40      	cmp	r3, #64	@ 0x40
 8003760:	d10b      	bne.n	800377a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	691a      	ldr	r2, [r3, #16]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800376c:	b2d2      	uxtb	r2, r2
 800376e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003774:	1c5a      	adds	r2, r3, #1
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f022 0201 	bic.w	r2, r2, #1
 8003788:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f7fe fed0 	bl	8002530 <HAL_I2C_AbortCpltCallback>
 8003790:	e015      	b.n	80037be <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	695b      	ldr	r3, [r3, #20]
 8003798:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800379c:	2b40      	cmp	r3, #64	@ 0x40
 800379e:	d10b      	bne.n	80037b8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	691a      	ldr	r2, [r3, #16]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037aa:	b2d2      	uxtb	r2, r2
 80037ac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b2:	1c5a      	adds	r2, r3, #1
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f7fe feaf 	bl	800251c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037c2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	f003 0301 	and.w	r3, r3, #1
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d10e      	bne.n	80037ec <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d109      	bne.n	80037ec <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d104      	bne.n	80037ec <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d007      	beq.n	80037fc <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	685a      	ldr	r2, [r3, #4]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80037fa:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003802:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003808:	f003 0304 	and.w	r3, r3, #4
 800380c:	2b04      	cmp	r3, #4
 800380e:	d113      	bne.n	8003838 <I2C_ITError+0x254>
 8003810:	7bfb      	ldrb	r3, [r7, #15]
 8003812:	2b28      	cmp	r3, #40	@ 0x28
 8003814:	d110      	bne.n	8003838 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4a0a      	ldr	r2, [pc, #40]	@ (8003844 <I2C_ITError+0x260>)
 800381a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2220      	movs	r2, #32
 8003826:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f7fe fe5e 	bl	80024f4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003838:	bf00      	nop
 800383a:	3710      	adds	r7, #16
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	08003b45 	.word	0x08003b45
 8003844:	ffff0000 	.word	0xffff0000

08003848 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b088      	sub	sp, #32
 800384c:	af02      	add	r7, sp, #8
 800384e:	60f8      	str	r0, [r7, #12]
 8003850:	4608      	mov	r0, r1
 8003852:	4611      	mov	r1, r2
 8003854:	461a      	mov	r2, r3
 8003856:	4603      	mov	r3, r0
 8003858:	817b      	strh	r3, [r7, #10]
 800385a:	460b      	mov	r3, r1
 800385c:	813b      	strh	r3, [r7, #8]
 800385e:	4613      	mov	r3, r2
 8003860:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003870:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003874:	9300      	str	r3, [sp, #0]
 8003876:	6a3b      	ldr	r3, [r7, #32]
 8003878:	2200      	movs	r2, #0
 800387a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800387e:	68f8      	ldr	r0, [r7, #12]
 8003880:	f000 fa08 	bl	8003c94 <I2C_WaitOnFlagUntilTimeout>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d00d      	beq.n	80038a6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003894:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003898:	d103      	bne.n	80038a2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80038a0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e05f      	b.n	8003966 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80038a6:	897b      	ldrh	r3, [r7, #10]
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	461a      	mov	r2, r3
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80038b4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80038b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038b8:	6a3a      	ldr	r2, [r7, #32]
 80038ba:	492d      	ldr	r1, [pc, #180]	@ (8003970 <I2C_RequestMemoryWrite+0x128>)
 80038bc:	68f8      	ldr	r0, [r7, #12]
 80038be:	f000 fa63 	bl	8003d88 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038c2:	4603      	mov	r3, r0
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d001      	beq.n	80038cc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e04c      	b.n	8003966 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038cc:	2300      	movs	r3, #0
 80038ce:	617b      	str	r3, [r7, #20]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	695b      	ldr	r3, [r3, #20]
 80038d6:	617b      	str	r3, [r7, #20]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	699b      	ldr	r3, [r3, #24]
 80038de:	617b      	str	r3, [r7, #20]
 80038e0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038e4:	6a39      	ldr	r1, [r7, #32]
 80038e6:	68f8      	ldr	r0, [r7, #12]
 80038e8:	f000 faee 	bl	8003ec8 <I2C_WaitOnTXEFlagUntilTimeout>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d00d      	beq.n	800390e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038f6:	2b04      	cmp	r3, #4
 80038f8:	d107      	bne.n	800390a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003908:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e02b      	b.n	8003966 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800390e:	88fb      	ldrh	r3, [r7, #6]
 8003910:	2b01      	cmp	r3, #1
 8003912:	d105      	bne.n	8003920 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003914:	893b      	ldrh	r3, [r7, #8]
 8003916:	b2da      	uxtb	r2, r3
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	611a      	str	r2, [r3, #16]
 800391e:	e021      	b.n	8003964 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003920:	893b      	ldrh	r3, [r7, #8]
 8003922:	0a1b      	lsrs	r3, r3, #8
 8003924:	b29b      	uxth	r3, r3
 8003926:	b2da      	uxtb	r2, r3
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800392e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003930:	6a39      	ldr	r1, [r7, #32]
 8003932:	68f8      	ldr	r0, [r7, #12]
 8003934:	f000 fac8 	bl	8003ec8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d00d      	beq.n	800395a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003942:	2b04      	cmp	r3, #4
 8003944:	d107      	bne.n	8003956 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003954:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e005      	b.n	8003966 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800395a:	893b      	ldrh	r3, [r7, #8]
 800395c:	b2da      	uxtb	r2, r3
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003964:	2300      	movs	r3, #0
}
 8003966:	4618      	mov	r0, r3
 8003968:	3718      	adds	r7, #24
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	00010002 	.word	0x00010002

08003974 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b088      	sub	sp, #32
 8003978:	af02      	add	r7, sp, #8
 800397a:	60f8      	str	r0, [r7, #12]
 800397c:	4608      	mov	r0, r1
 800397e:	4611      	mov	r1, r2
 8003980:	461a      	mov	r2, r3
 8003982:	4603      	mov	r3, r0
 8003984:	817b      	strh	r3, [r7, #10]
 8003986:	460b      	mov	r3, r1
 8003988:	813b      	strh	r3, [r7, #8]
 800398a:	4613      	mov	r3, r2
 800398c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800399c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80039ac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039b0:	9300      	str	r3, [sp, #0]
 80039b2:	6a3b      	ldr	r3, [r7, #32]
 80039b4:	2200      	movs	r2, #0
 80039b6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80039ba:	68f8      	ldr	r0, [r7, #12]
 80039bc:	f000 f96a 	bl	8003c94 <I2C_WaitOnFlagUntilTimeout>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d00d      	beq.n	80039e2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039d4:	d103      	bne.n	80039de <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80039dc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80039de:	2303      	movs	r3, #3
 80039e0:	e0aa      	b.n	8003b38 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80039e2:	897b      	ldrh	r3, [r7, #10]
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	461a      	mov	r2, r3
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80039f0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80039f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039f4:	6a3a      	ldr	r2, [r7, #32]
 80039f6:	4952      	ldr	r1, [pc, #328]	@ (8003b40 <I2C_RequestMemoryRead+0x1cc>)
 80039f8:	68f8      	ldr	r0, [r7, #12]
 80039fa:	f000 f9c5 	bl	8003d88 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d001      	beq.n	8003a08 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e097      	b.n	8003b38 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a08:	2300      	movs	r3, #0
 8003a0a:	617b      	str	r3, [r7, #20]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	695b      	ldr	r3, [r3, #20]
 8003a12:	617b      	str	r3, [r7, #20]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	699b      	ldr	r3, [r3, #24]
 8003a1a:	617b      	str	r3, [r7, #20]
 8003a1c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a20:	6a39      	ldr	r1, [r7, #32]
 8003a22:	68f8      	ldr	r0, [r7, #12]
 8003a24:	f000 fa50 	bl	8003ec8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d00d      	beq.n	8003a4a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a32:	2b04      	cmp	r3, #4
 8003a34:	d107      	bne.n	8003a46 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a44:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e076      	b.n	8003b38 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a4a:	88fb      	ldrh	r3, [r7, #6]
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d105      	bne.n	8003a5c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a50:	893b      	ldrh	r3, [r7, #8]
 8003a52:	b2da      	uxtb	r2, r3
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	611a      	str	r2, [r3, #16]
 8003a5a:	e021      	b.n	8003aa0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003a5c:	893b      	ldrh	r3, [r7, #8]
 8003a5e:	0a1b      	lsrs	r3, r3, #8
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	b2da      	uxtb	r2, r3
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a6c:	6a39      	ldr	r1, [r7, #32]
 8003a6e:	68f8      	ldr	r0, [r7, #12]
 8003a70:	f000 fa2a 	bl	8003ec8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d00d      	beq.n	8003a96 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a7e:	2b04      	cmp	r3, #4
 8003a80:	d107      	bne.n	8003a92 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a90:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e050      	b.n	8003b38 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a96:	893b      	ldrh	r3, [r7, #8]
 8003a98:	b2da      	uxtb	r2, r3
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003aa0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003aa2:	6a39      	ldr	r1, [r7, #32]
 8003aa4:	68f8      	ldr	r0, [r7, #12]
 8003aa6:	f000 fa0f 	bl	8003ec8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d00d      	beq.n	8003acc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab4:	2b04      	cmp	r3, #4
 8003ab6:	d107      	bne.n	8003ac8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ac6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e035      	b.n	8003b38 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ada:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ade:	9300      	str	r3, [sp, #0]
 8003ae0:	6a3b      	ldr	r3, [r7, #32]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003ae8:	68f8      	ldr	r0, [r7, #12]
 8003aea:	f000 f8d3 	bl	8003c94 <I2C_WaitOnFlagUntilTimeout>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d00d      	beq.n	8003b10 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003afe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b02:	d103      	bne.n	8003b0c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b0a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	e013      	b.n	8003b38 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003b10:	897b      	ldrh	r3, [r7, #10]
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	f043 0301 	orr.w	r3, r3, #1
 8003b18:	b2da      	uxtb	r2, r3
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b22:	6a3a      	ldr	r2, [r7, #32]
 8003b24:	4906      	ldr	r1, [pc, #24]	@ (8003b40 <I2C_RequestMemoryRead+0x1cc>)
 8003b26:	68f8      	ldr	r0, [r7, #12]
 8003b28:	f000 f92e 	bl	8003d88 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d001      	beq.n	8003b36 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e000      	b.n	8003b38 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003b36:	2300      	movs	r3, #0
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3718      	adds	r7, #24
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	00010002 	.word	0x00010002

08003b44 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b086      	sub	sp, #24
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b54:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b5c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003b5e:	4b4b      	ldr	r3, [pc, #300]	@ (8003c8c <I2C_DMAAbort+0x148>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	08db      	lsrs	r3, r3, #3
 8003b64:	4a4a      	ldr	r2, [pc, #296]	@ (8003c90 <I2C_DMAAbort+0x14c>)
 8003b66:	fba2 2303 	umull	r2, r3, r2, r3
 8003b6a:	0a1a      	lsrs	r2, r3, #8
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	4413      	add	r3, r2
 8003b72:	00da      	lsls	r2, r3, #3
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d106      	bne.n	8003b8c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b82:	f043 0220 	orr.w	r2, r3, #32
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8003b8a:	e00a      	b.n	8003ba2 <I2C_DMAAbort+0x5e>
    }
    count--;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	3b01      	subs	r3, #1
 8003b90:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ba0:	d0ea      	beq.n	8003b78 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d003      	beq.n	8003bb2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bae:	2200      	movs	r2, #0
 8003bb0:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d003      	beq.n	8003bc2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bd0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d003      	beq.n	8003be8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003be4:	2200      	movs	r2, #0
 8003be6:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d003      	beq.n	8003bf8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f022 0201 	bic.w	r2, r2, #1
 8003c06:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	2b60      	cmp	r3, #96	@ 0x60
 8003c12:	d10e      	bne.n	8003c32 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	2220      	movs	r2, #32
 8003c18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	2200      	movs	r2, #0
 8003c28:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003c2a:	6978      	ldr	r0, [r7, #20]
 8003c2c:	f7fe fc80 	bl	8002530 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003c30:	e027      	b.n	8003c82 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003c32:	7cfb      	ldrb	r3, [r7, #19]
 8003c34:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003c38:	2b28      	cmp	r3, #40	@ 0x28
 8003c3a:	d117      	bne.n	8003c6c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f042 0201 	orr.w	r2, r2, #1
 8003c4a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003c5a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	2228      	movs	r2, #40	@ 0x28
 8003c66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003c6a:	e007      	b.n	8003c7c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	2220      	movs	r2, #32
 8003c70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	2200      	movs	r2, #0
 8003c78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003c7c:	6978      	ldr	r0, [r7, #20]
 8003c7e:	f7fe fc4d 	bl	800251c <HAL_I2C_ErrorCallback>
}
 8003c82:	bf00      	nop
 8003c84:	3718      	adds	r7, #24
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	2000005c 	.word	0x2000005c
 8003c90:	14f8b589 	.word	0x14f8b589

08003c94 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b084      	sub	sp, #16
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	60f8      	str	r0, [r7, #12]
 8003c9c:	60b9      	str	r1, [r7, #8]
 8003c9e:	603b      	str	r3, [r7, #0]
 8003ca0:	4613      	mov	r3, r2
 8003ca2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ca4:	e048      	b.n	8003d38 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cac:	d044      	beq.n	8003d38 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cae:	f7fd f97f 	bl	8000fb0 <HAL_GetTick>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	69bb      	ldr	r3, [r7, #24]
 8003cb6:	1ad3      	subs	r3, r2, r3
 8003cb8:	683a      	ldr	r2, [r7, #0]
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d302      	bcc.n	8003cc4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d139      	bne.n	8003d38 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	0c1b      	lsrs	r3, r3, #16
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d10d      	bne.n	8003cea <I2C_WaitOnFlagUntilTimeout+0x56>
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	695b      	ldr	r3, [r3, #20]
 8003cd4:	43da      	mvns	r2, r3
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	4013      	ands	r3, r2
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	bf0c      	ite	eq
 8003ce0:	2301      	moveq	r3, #1
 8003ce2:	2300      	movne	r3, #0
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	e00c      	b.n	8003d04 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	699b      	ldr	r3, [r3, #24]
 8003cf0:	43da      	mvns	r2, r3
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	bf0c      	ite	eq
 8003cfc:	2301      	moveq	r3, #1
 8003cfe:	2300      	movne	r3, #0
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	461a      	mov	r2, r3
 8003d04:	79fb      	ldrb	r3, [r7, #7]
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d116      	bne.n	8003d38 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2220      	movs	r2, #32
 8003d14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d24:	f043 0220 	orr.w	r2, r3, #32
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e023      	b.n	8003d80 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	0c1b      	lsrs	r3, r3, #16
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d10d      	bne.n	8003d5e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	695b      	ldr	r3, [r3, #20]
 8003d48:	43da      	mvns	r2, r3
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	bf0c      	ite	eq
 8003d54:	2301      	moveq	r3, #1
 8003d56:	2300      	movne	r3, #0
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	e00c      	b.n	8003d78 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	699b      	ldr	r3, [r3, #24]
 8003d64:	43da      	mvns	r2, r3
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	4013      	ands	r3, r2
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	bf0c      	ite	eq
 8003d70:	2301      	moveq	r3, #1
 8003d72:	2300      	movne	r3, #0
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	461a      	mov	r2, r3
 8003d78:	79fb      	ldrb	r3, [r7, #7]
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d093      	beq.n	8003ca6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d7e:	2300      	movs	r3, #0
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3710      	adds	r7, #16
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}

08003d88 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	60b9      	str	r1, [r7, #8]
 8003d92:	607a      	str	r2, [r7, #4]
 8003d94:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d96:	e071      	b.n	8003e7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	695b      	ldr	r3, [r3, #20]
 8003d9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003da2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003da6:	d123      	bne.n	8003df0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003db6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003dc0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2220      	movs	r2, #32
 8003dcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ddc:	f043 0204 	orr.w	r2, r3, #4
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e067      	b.n	8003ec0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003df6:	d041      	beq.n	8003e7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003df8:	f7fd f8da 	bl	8000fb0 <HAL_GetTick>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d302      	bcc.n	8003e0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d136      	bne.n	8003e7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	0c1b      	lsrs	r3, r3, #16
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d10c      	bne.n	8003e32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	695b      	ldr	r3, [r3, #20]
 8003e1e:	43da      	mvns	r2, r3
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	4013      	ands	r3, r2
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	bf14      	ite	ne
 8003e2a:	2301      	movne	r3, #1
 8003e2c:	2300      	moveq	r3, #0
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	e00b      	b.n	8003e4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	699b      	ldr	r3, [r3, #24]
 8003e38:	43da      	mvns	r2, r3
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	bf14      	ite	ne
 8003e44:	2301      	movne	r3, #1
 8003e46:	2300      	moveq	r3, #0
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d016      	beq.n	8003e7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2200      	movs	r2, #0
 8003e52:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2220      	movs	r2, #32
 8003e58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e68:	f043 0220 	orr.w	r2, r3, #32
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e021      	b.n	8003ec0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	0c1b      	lsrs	r3, r3, #16
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d10c      	bne.n	8003ea0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	695b      	ldr	r3, [r3, #20]
 8003e8c:	43da      	mvns	r2, r3
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	4013      	ands	r3, r2
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	bf14      	ite	ne
 8003e98:	2301      	movne	r3, #1
 8003e9a:	2300      	moveq	r3, #0
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	e00b      	b.n	8003eb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	699b      	ldr	r3, [r3, #24]
 8003ea6:	43da      	mvns	r2, r3
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	4013      	ands	r3, r2
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	bf14      	ite	ne
 8003eb2:	2301      	movne	r3, #1
 8003eb4:	2300      	moveq	r3, #0
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	f47f af6d 	bne.w	8003d98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003ebe:	2300      	movs	r3, #0
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3710      	adds	r7, #16
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}

08003ec8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	60f8      	str	r0, [r7, #12]
 8003ed0:	60b9      	str	r1, [r7, #8]
 8003ed2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ed4:	e034      	b.n	8003f40 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ed6:	68f8      	ldr	r0, [r7, #12]
 8003ed8:	f000 f915 	bl	8004106 <I2C_IsAcknowledgeFailed>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d001      	beq.n	8003ee6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e034      	b.n	8003f50 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eec:	d028      	beq.n	8003f40 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eee:	f7fd f85f 	bl	8000fb0 <HAL_GetTick>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	68ba      	ldr	r2, [r7, #8]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d302      	bcc.n	8003f04 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d11d      	bne.n	8003f40 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	695b      	ldr	r3, [r3, #20]
 8003f0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f0e:	2b80      	cmp	r3, #128	@ 0x80
 8003f10:	d016      	beq.n	8003f40 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2200      	movs	r2, #0
 8003f16:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2220      	movs	r2, #32
 8003f1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2200      	movs	r2, #0
 8003f24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f2c:	f043 0220 	orr.w	r2, r3, #32
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2200      	movs	r2, #0
 8003f38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e007      	b.n	8003f50 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	695b      	ldr	r3, [r3, #20]
 8003f46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f4a:	2b80      	cmp	r3, #128	@ 0x80
 8003f4c:	d1c3      	bne.n	8003ed6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003f4e:	2300      	movs	r3, #0
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3710      	adds	r7, #16
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}

08003f58 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	60f8      	str	r0, [r7, #12]
 8003f60:	60b9      	str	r1, [r7, #8]
 8003f62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f64:	e034      	b.n	8003fd0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f66:	68f8      	ldr	r0, [r7, #12]
 8003f68:	f000 f8cd 	bl	8004106 <I2C_IsAcknowledgeFailed>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d001      	beq.n	8003f76 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e034      	b.n	8003fe0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f7c:	d028      	beq.n	8003fd0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f7e:	f7fd f817 	bl	8000fb0 <HAL_GetTick>
 8003f82:	4602      	mov	r2, r0
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	68ba      	ldr	r2, [r7, #8]
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d302      	bcc.n	8003f94 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d11d      	bne.n	8003fd0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	695b      	ldr	r3, [r3, #20]
 8003f9a:	f003 0304 	and.w	r3, r3, #4
 8003f9e:	2b04      	cmp	r3, #4
 8003fa0:	d016      	beq.n	8003fd0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2220      	movs	r2, #32
 8003fac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fbc:	f043 0220 	orr.w	r2, r3, #32
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e007      	b.n	8003fe0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	695b      	ldr	r3, [r3, #20]
 8003fd6:	f003 0304 	and.w	r3, r3, #4
 8003fda:	2b04      	cmp	r3, #4
 8003fdc:	d1c3      	bne.n	8003f66 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003fde:	2300      	movs	r3, #0
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3710      	adds	r7, #16
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b085      	sub	sp, #20
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003ff4:	4b13      	ldr	r3, [pc, #76]	@ (8004044 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	08db      	lsrs	r3, r3, #3
 8003ffa:	4a13      	ldr	r2, [pc, #76]	@ (8004048 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8004000:	0a1a      	lsrs	r2, r3, #8
 8004002:	4613      	mov	r3, r2
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	4413      	add	r3, r2
 8004008:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	3b01      	subs	r3, #1
 800400e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d107      	bne.n	8004026 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800401a:	f043 0220 	orr.w	r2, r3, #32
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e008      	b.n	8004038 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004030:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004034:	d0e9      	beq.n	800400a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004036:	2300      	movs	r3, #0
}
 8004038:	4618      	mov	r0, r3
 800403a:	3714      	adds	r7, #20
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr
 8004044:	2000005c 	.word	0x2000005c
 8004048:	14f8b589 	.word	0x14f8b589

0800404c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b084      	sub	sp, #16
 8004050:	af00      	add	r7, sp, #0
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004058:	e049      	b.n	80040ee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	695b      	ldr	r3, [r3, #20]
 8004060:	f003 0310 	and.w	r3, r3, #16
 8004064:	2b10      	cmp	r3, #16
 8004066:	d119      	bne.n	800409c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f06f 0210 	mvn.w	r2, #16
 8004070:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2200      	movs	r2, #0
 8004076:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2220      	movs	r2, #32
 800407c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2200      	movs	r2, #0
 8004084:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2200      	movs	r2, #0
 8004094:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e030      	b.n	80040fe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800409c:	f7fc ff88 	bl	8000fb0 <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	68ba      	ldr	r2, [r7, #8]
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d302      	bcc.n	80040b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d11d      	bne.n	80040ee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	695b      	ldr	r3, [r3, #20]
 80040b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040bc:	2b40      	cmp	r3, #64	@ 0x40
 80040be:	d016      	beq.n	80040ee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2200      	movs	r2, #0
 80040c4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2220      	movs	r2, #32
 80040ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040da:	f043 0220 	orr.w	r2, r3, #32
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e007      	b.n	80040fe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	695b      	ldr	r3, [r3, #20]
 80040f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040f8:	2b40      	cmp	r3, #64	@ 0x40
 80040fa:	d1ae      	bne.n	800405a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80040fc:	2300      	movs	r3, #0
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3710      	adds	r7, #16
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}

08004106 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004106:	b480      	push	{r7}
 8004108:	b083      	sub	sp, #12
 800410a:	af00      	add	r7, sp, #0
 800410c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	695b      	ldr	r3, [r3, #20]
 8004114:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004118:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800411c:	d11b      	bne.n	8004156 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004126:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2200      	movs	r2, #0
 800412c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2220      	movs	r2, #32
 8004132:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004142:	f043 0204 	orr.w	r2, r3, #4
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e000      	b.n	8004158 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004156:	2300      	movs	r3, #0
}
 8004158:	4618      	mov	r0, r3
 800415a:	370c      	adds	r7, #12
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr

08004164 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004170:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8004174:	d103      	bne.n	800417e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2201      	movs	r2, #1
 800417a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800417c:	e007      	b.n	800418e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004182:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8004186:	d102      	bne.n	800418e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2208      	movs	r2, #8
 800418c:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800418e:	bf00      	nop
 8004190:	370c      	adds	r7, #12
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr

0800419a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800419a:	b480      	push	{r7}
 800419c:	b083      	sub	sp, #12
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
 80041a2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	2b20      	cmp	r3, #32
 80041ae:	d129      	bne.n	8004204 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2224      	movs	r2, #36	@ 0x24
 80041b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f022 0201 	bic.w	r2, r2, #1
 80041c6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f022 0210 	bic.w	r2, r2, #16
 80041d6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	683a      	ldr	r2, [r7, #0]
 80041e4:	430a      	orrs	r2, r1
 80041e6:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f042 0201 	orr.w	r2, r2, #1
 80041f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2220      	movs	r2, #32
 80041fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8004200:	2300      	movs	r3, #0
 8004202:	e000      	b.n	8004206 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004204:	2302      	movs	r3, #2
  }
}
 8004206:	4618      	mov	r0, r3
 8004208:	370c      	adds	r7, #12
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr

08004212 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004212:	b480      	push	{r7}
 8004214:	b085      	sub	sp, #20
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]
 800421a:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800421c:	2300      	movs	r3, #0
 800421e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004226:	b2db      	uxtb	r3, r3
 8004228:	2b20      	cmp	r3, #32
 800422a:	d12a      	bne.n	8004282 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2224      	movs	r2, #36	@ 0x24
 8004230:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f022 0201 	bic.w	r2, r2, #1
 8004242:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800424a:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800424c:	89fb      	ldrh	r3, [r7, #14]
 800424e:	f023 030f 	bic.w	r3, r3, #15
 8004252:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	b29a      	uxth	r2, r3
 8004258:	89fb      	ldrh	r3, [r7, #14]
 800425a:	4313      	orrs	r3, r2
 800425c:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	89fa      	ldrh	r2, [r7, #14]
 8004264:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f042 0201 	orr.w	r2, r2, #1
 8004274:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2220      	movs	r2, #32
 800427a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800427e:	2300      	movs	r3, #0
 8004280:	e000      	b.n	8004284 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004282:	2302      	movs	r3, #2
  }
}
 8004284:	4618      	mov	r0, r3
 8004286:	3714      	adds	r7, #20
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr

08004290 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b086      	sub	sp, #24
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d101      	bne.n	80042a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e267      	b.n	8004772 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0301 	and.w	r3, r3, #1
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d075      	beq.n	800439a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80042ae:	4b88      	ldr	r3, [pc, #544]	@ (80044d0 <HAL_RCC_OscConfig+0x240>)
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	f003 030c 	and.w	r3, r3, #12
 80042b6:	2b04      	cmp	r3, #4
 80042b8:	d00c      	beq.n	80042d4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042ba:	4b85      	ldr	r3, [pc, #532]	@ (80044d0 <HAL_RCC_OscConfig+0x240>)
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80042c2:	2b08      	cmp	r3, #8
 80042c4:	d112      	bne.n	80042ec <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042c6:	4b82      	ldr	r3, [pc, #520]	@ (80044d0 <HAL_RCC_OscConfig+0x240>)
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80042d2:	d10b      	bne.n	80042ec <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042d4:	4b7e      	ldr	r3, [pc, #504]	@ (80044d0 <HAL_RCC_OscConfig+0x240>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d05b      	beq.n	8004398 <HAL_RCC_OscConfig+0x108>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d157      	bne.n	8004398 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	e242      	b.n	8004772 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042f4:	d106      	bne.n	8004304 <HAL_RCC_OscConfig+0x74>
 80042f6:	4b76      	ldr	r3, [pc, #472]	@ (80044d0 <HAL_RCC_OscConfig+0x240>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a75      	ldr	r2, [pc, #468]	@ (80044d0 <HAL_RCC_OscConfig+0x240>)
 80042fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004300:	6013      	str	r3, [r2, #0]
 8004302:	e01d      	b.n	8004340 <HAL_RCC_OscConfig+0xb0>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800430c:	d10c      	bne.n	8004328 <HAL_RCC_OscConfig+0x98>
 800430e:	4b70      	ldr	r3, [pc, #448]	@ (80044d0 <HAL_RCC_OscConfig+0x240>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a6f      	ldr	r2, [pc, #444]	@ (80044d0 <HAL_RCC_OscConfig+0x240>)
 8004314:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004318:	6013      	str	r3, [r2, #0]
 800431a:	4b6d      	ldr	r3, [pc, #436]	@ (80044d0 <HAL_RCC_OscConfig+0x240>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a6c      	ldr	r2, [pc, #432]	@ (80044d0 <HAL_RCC_OscConfig+0x240>)
 8004320:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004324:	6013      	str	r3, [r2, #0]
 8004326:	e00b      	b.n	8004340 <HAL_RCC_OscConfig+0xb0>
 8004328:	4b69      	ldr	r3, [pc, #420]	@ (80044d0 <HAL_RCC_OscConfig+0x240>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a68      	ldr	r2, [pc, #416]	@ (80044d0 <HAL_RCC_OscConfig+0x240>)
 800432e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004332:	6013      	str	r3, [r2, #0]
 8004334:	4b66      	ldr	r3, [pc, #408]	@ (80044d0 <HAL_RCC_OscConfig+0x240>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a65      	ldr	r2, [pc, #404]	@ (80044d0 <HAL_RCC_OscConfig+0x240>)
 800433a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800433e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d013      	beq.n	8004370 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004348:	f7fc fe32 	bl	8000fb0 <HAL_GetTick>
 800434c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800434e:	e008      	b.n	8004362 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004350:	f7fc fe2e 	bl	8000fb0 <HAL_GetTick>
 8004354:	4602      	mov	r2, r0
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	2b64      	cmp	r3, #100	@ 0x64
 800435c:	d901      	bls.n	8004362 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e207      	b.n	8004772 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004362:	4b5b      	ldr	r3, [pc, #364]	@ (80044d0 <HAL_RCC_OscConfig+0x240>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800436a:	2b00      	cmp	r3, #0
 800436c:	d0f0      	beq.n	8004350 <HAL_RCC_OscConfig+0xc0>
 800436e:	e014      	b.n	800439a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004370:	f7fc fe1e 	bl	8000fb0 <HAL_GetTick>
 8004374:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004376:	e008      	b.n	800438a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004378:	f7fc fe1a 	bl	8000fb0 <HAL_GetTick>
 800437c:	4602      	mov	r2, r0
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	2b64      	cmp	r3, #100	@ 0x64
 8004384:	d901      	bls.n	800438a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e1f3      	b.n	8004772 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800438a:	4b51      	ldr	r3, [pc, #324]	@ (80044d0 <HAL_RCC_OscConfig+0x240>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d1f0      	bne.n	8004378 <HAL_RCC_OscConfig+0xe8>
 8004396:	e000      	b.n	800439a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004398:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 0302 	and.w	r3, r3, #2
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d063      	beq.n	800446e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80043a6:	4b4a      	ldr	r3, [pc, #296]	@ (80044d0 <HAL_RCC_OscConfig+0x240>)
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	f003 030c 	and.w	r3, r3, #12
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d00b      	beq.n	80043ca <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043b2:	4b47      	ldr	r3, [pc, #284]	@ (80044d0 <HAL_RCC_OscConfig+0x240>)
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80043ba:	2b08      	cmp	r3, #8
 80043bc:	d11c      	bne.n	80043f8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043be:	4b44      	ldr	r3, [pc, #272]	@ (80044d0 <HAL_RCC_OscConfig+0x240>)
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d116      	bne.n	80043f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043ca:	4b41      	ldr	r3, [pc, #260]	@ (80044d0 <HAL_RCC_OscConfig+0x240>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0302 	and.w	r3, r3, #2
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d005      	beq.n	80043e2 <HAL_RCC_OscConfig+0x152>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	68db      	ldr	r3, [r3, #12]
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d001      	beq.n	80043e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e1c7      	b.n	8004772 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043e2:	4b3b      	ldr	r3, [pc, #236]	@ (80044d0 <HAL_RCC_OscConfig+0x240>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	00db      	lsls	r3, r3, #3
 80043f0:	4937      	ldr	r1, [pc, #220]	@ (80044d0 <HAL_RCC_OscConfig+0x240>)
 80043f2:	4313      	orrs	r3, r2
 80043f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043f6:	e03a      	b.n	800446e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d020      	beq.n	8004442 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004400:	4b34      	ldr	r3, [pc, #208]	@ (80044d4 <HAL_RCC_OscConfig+0x244>)
 8004402:	2201      	movs	r2, #1
 8004404:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004406:	f7fc fdd3 	bl	8000fb0 <HAL_GetTick>
 800440a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800440c:	e008      	b.n	8004420 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800440e:	f7fc fdcf 	bl	8000fb0 <HAL_GetTick>
 8004412:	4602      	mov	r2, r0
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	2b02      	cmp	r3, #2
 800441a:	d901      	bls.n	8004420 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800441c:	2303      	movs	r3, #3
 800441e:	e1a8      	b.n	8004772 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004420:	4b2b      	ldr	r3, [pc, #172]	@ (80044d0 <HAL_RCC_OscConfig+0x240>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 0302 	and.w	r3, r3, #2
 8004428:	2b00      	cmp	r3, #0
 800442a:	d0f0      	beq.n	800440e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800442c:	4b28      	ldr	r3, [pc, #160]	@ (80044d0 <HAL_RCC_OscConfig+0x240>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	691b      	ldr	r3, [r3, #16]
 8004438:	00db      	lsls	r3, r3, #3
 800443a:	4925      	ldr	r1, [pc, #148]	@ (80044d0 <HAL_RCC_OscConfig+0x240>)
 800443c:	4313      	orrs	r3, r2
 800443e:	600b      	str	r3, [r1, #0]
 8004440:	e015      	b.n	800446e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004442:	4b24      	ldr	r3, [pc, #144]	@ (80044d4 <HAL_RCC_OscConfig+0x244>)
 8004444:	2200      	movs	r2, #0
 8004446:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004448:	f7fc fdb2 	bl	8000fb0 <HAL_GetTick>
 800444c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800444e:	e008      	b.n	8004462 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004450:	f7fc fdae 	bl	8000fb0 <HAL_GetTick>
 8004454:	4602      	mov	r2, r0
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	2b02      	cmp	r3, #2
 800445c:	d901      	bls.n	8004462 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800445e:	2303      	movs	r3, #3
 8004460:	e187      	b.n	8004772 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004462:	4b1b      	ldr	r3, [pc, #108]	@ (80044d0 <HAL_RCC_OscConfig+0x240>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 0302 	and.w	r3, r3, #2
 800446a:	2b00      	cmp	r3, #0
 800446c:	d1f0      	bne.n	8004450 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 0308 	and.w	r3, r3, #8
 8004476:	2b00      	cmp	r3, #0
 8004478:	d036      	beq.n	80044e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	695b      	ldr	r3, [r3, #20]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d016      	beq.n	80044b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004482:	4b15      	ldr	r3, [pc, #84]	@ (80044d8 <HAL_RCC_OscConfig+0x248>)
 8004484:	2201      	movs	r2, #1
 8004486:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004488:	f7fc fd92 	bl	8000fb0 <HAL_GetTick>
 800448c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800448e:	e008      	b.n	80044a2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004490:	f7fc fd8e 	bl	8000fb0 <HAL_GetTick>
 8004494:	4602      	mov	r2, r0
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	2b02      	cmp	r3, #2
 800449c:	d901      	bls.n	80044a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	e167      	b.n	8004772 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044a2:	4b0b      	ldr	r3, [pc, #44]	@ (80044d0 <HAL_RCC_OscConfig+0x240>)
 80044a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044a6:	f003 0302 	and.w	r3, r3, #2
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d0f0      	beq.n	8004490 <HAL_RCC_OscConfig+0x200>
 80044ae:	e01b      	b.n	80044e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044b0:	4b09      	ldr	r3, [pc, #36]	@ (80044d8 <HAL_RCC_OscConfig+0x248>)
 80044b2:	2200      	movs	r2, #0
 80044b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044b6:	f7fc fd7b 	bl	8000fb0 <HAL_GetTick>
 80044ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044bc:	e00e      	b.n	80044dc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044be:	f7fc fd77 	bl	8000fb0 <HAL_GetTick>
 80044c2:	4602      	mov	r2, r0
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	1ad3      	subs	r3, r2, r3
 80044c8:	2b02      	cmp	r3, #2
 80044ca:	d907      	bls.n	80044dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80044cc:	2303      	movs	r3, #3
 80044ce:	e150      	b.n	8004772 <HAL_RCC_OscConfig+0x4e2>
 80044d0:	40023800 	.word	0x40023800
 80044d4:	42470000 	.word	0x42470000
 80044d8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044dc:	4b88      	ldr	r3, [pc, #544]	@ (8004700 <HAL_RCC_OscConfig+0x470>)
 80044de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044e0:	f003 0302 	and.w	r3, r3, #2
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d1ea      	bne.n	80044be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 0304 	and.w	r3, r3, #4
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	f000 8097 	beq.w	8004624 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044f6:	2300      	movs	r3, #0
 80044f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044fa:	4b81      	ldr	r3, [pc, #516]	@ (8004700 <HAL_RCC_OscConfig+0x470>)
 80044fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004502:	2b00      	cmp	r3, #0
 8004504:	d10f      	bne.n	8004526 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004506:	2300      	movs	r3, #0
 8004508:	60bb      	str	r3, [r7, #8]
 800450a:	4b7d      	ldr	r3, [pc, #500]	@ (8004700 <HAL_RCC_OscConfig+0x470>)
 800450c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800450e:	4a7c      	ldr	r2, [pc, #496]	@ (8004700 <HAL_RCC_OscConfig+0x470>)
 8004510:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004514:	6413      	str	r3, [r2, #64]	@ 0x40
 8004516:	4b7a      	ldr	r3, [pc, #488]	@ (8004700 <HAL_RCC_OscConfig+0x470>)
 8004518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800451a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800451e:	60bb      	str	r3, [r7, #8]
 8004520:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004522:	2301      	movs	r3, #1
 8004524:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004526:	4b77      	ldr	r3, [pc, #476]	@ (8004704 <HAL_RCC_OscConfig+0x474>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800452e:	2b00      	cmp	r3, #0
 8004530:	d118      	bne.n	8004564 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004532:	4b74      	ldr	r3, [pc, #464]	@ (8004704 <HAL_RCC_OscConfig+0x474>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a73      	ldr	r2, [pc, #460]	@ (8004704 <HAL_RCC_OscConfig+0x474>)
 8004538:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800453c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800453e:	f7fc fd37 	bl	8000fb0 <HAL_GetTick>
 8004542:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004544:	e008      	b.n	8004558 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004546:	f7fc fd33 	bl	8000fb0 <HAL_GetTick>
 800454a:	4602      	mov	r2, r0
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	2b02      	cmp	r3, #2
 8004552:	d901      	bls.n	8004558 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004554:	2303      	movs	r3, #3
 8004556:	e10c      	b.n	8004772 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004558:	4b6a      	ldr	r3, [pc, #424]	@ (8004704 <HAL_RCC_OscConfig+0x474>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004560:	2b00      	cmp	r3, #0
 8004562:	d0f0      	beq.n	8004546 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	2b01      	cmp	r3, #1
 800456a:	d106      	bne.n	800457a <HAL_RCC_OscConfig+0x2ea>
 800456c:	4b64      	ldr	r3, [pc, #400]	@ (8004700 <HAL_RCC_OscConfig+0x470>)
 800456e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004570:	4a63      	ldr	r2, [pc, #396]	@ (8004700 <HAL_RCC_OscConfig+0x470>)
 8004572:	f043 0301 	orr.w	r3, r3, #1
 8004576:	6713      	str	r3, [r2, #112]	@ 0x70
 8004578:	e01c      	b.n	80045b4 <HAL_RCC_OscConfig+0x324>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	2b05      	cmp	r3, #5
 8004580:	d10c      	bne.n	800459c <HAL_RCC_OscConfig+0x30c>
 8004582:	4b5f      	ldr	r3, [pc, #380]	@ (8004700 <HAL_RCC_OscConfig+0x470>)
 8004584:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004586:	4a5e      	ldr	r2, [pc, #376]	@ (8004700 <HAL_RCC_OscConfig+0x470>)
 8004588:	f043 0304 	orr.w	r3, r3, #4
 800458c:	6713      	str	r3, [r2, #112]	@ 0x70
 800458e:	4b5c      	ldr	r3, [pc, #368]	@ (8004700 <HAL_RCC_OscConfig+0x470>)
 8004590:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004592:	4a5b      	ldr	r2, [pc, #364]	@ (8004700 <HAL_RCC_OscConfig+0x470>)
 8004594:	f043 0301 	orr.w	r3, r3, #1
 8004598:	6713      	str	r3, [r2, #112]	@ 0x70
 800459a:	e00b      	b.n	80045b4 <HAL_RCC_OscConfig+0x324>
 800459c:	4b58      	ldr	r3, [pc, #352]	@ (8004700 <HAL_RCC_OscConfig+0x470>)
 800459e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045a0:	4a57      	ldr	r2, [pc, #348]	@ (8004700 <HAL_RCC_OscConfig+0x470>)
 80045a2:	f023 0301 	bic.w	r3, r3, #1
 80045a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80045a8:	4b55      	ldr	r3, [pc, #340]	@ (8004700 <HAL_RCC_OscConfig+0x470>)
 80045aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045ac:	4a54      	ldr	r2, [pc, #336]	@ (8004700 <HAL_RCC_OscConfig+0x470>)
 80045ae:	f023 0304 	bic.w	r3, r3, #4
 80045b2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d015      	beq.n	80045e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045bc:	f7fc fcf8 	bl	8000fb0 <HAL_GetTick>
 80045c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045c2:	e00a      	b.n	80045da <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045c4:	f7fc fcf4 	bl	8000fb0 <HAL_GetTick>
 80045c8:	4602      	mov	r2, r0
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d901      	bls.n	80045da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	e0cb      	b.n	8004772 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045da:	4b49      	ldr	r3, [pc, #292]	@ (8004700 <HAL_RCC_OscConfig+0x470>)
 80045dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045de:	f003 0302 	and.w	r3, r3, #2
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d0ee      	beq.n	80045c4 <HAL_RCC_OscConfig+0x334>
 80045e6:	e014      	b.n	8004612 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045e8:	f7fc fce2 	bl	8000fb0 <HAL_GetTick>
 80045ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045ee:	e00a      	b.n	8004606 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045f0:	f7fc fcde 	bl	8000fb0 <HAL_GetTick>
 80045f4:	4602      	mov	r2, r0
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045fe:	4293      	cmp	r3, r2
 8004600:	d901      	bls.n	8004606 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e0b5      	b.n	8004772 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004606:	4b3e      	ldr	r3, [pc, #248]	@ (8004700 <HAL_RCC_OscConfig+0x470>)
 8004608:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800460a:	f003 0302 	and.w	r3, r3, #2
 800460e:	2b00      	cmp	r3, #0
 8004610:	d1ee      	bne.n	80045f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004612:	7dfb      	ldrb	r3, [r7, #23]
 8004614:	2b01      	cmp	r3, #1
 8004616:	d105      	bne.n	8004624 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004618:	4b39      	ldr	r3, [pc, #228]	@ (8004700 <HAL_RCC_OscConfig+0x470>)
 800461a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800461c:	4a38      	ldr	r2, [pc, #224]	@ (8004700 <HAL_RCC_OscConfig+0x470>)
 800461e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004622:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	699b      	ldr	r3, [r3, #24]
 8004628:	2b00      	cmp	r3, #0
 800462a:	f000 80a1 	beq.w	8004770 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800462e:	4b34      	ldr	r3, [pc, #208]	@ (8004700 <HAL_RCC_OscConfig+0x470>)
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	f003 030c 	and.w	r3, r3, #12
 8004636:	2b08      	cmp	r3, #8
 8004638:	d05c      	beq.n	80046f4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	699b      	ldr	r3, [r3, #24]
 800463e:	2b02      	cmp	r3, #2
 8004640:	d141      	bne.n	80046c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004642:	4b31      	ldr	r3, [pc, #196]	@ (8004708 <HAL_RCC_OscConfig+0x478>)
 8004644:	2200      	movs	r2, #0
 8004646:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004648:	f7fc fcb2 	bl	8000fb0 <HAL_GetTick>
 800464c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800464e:	e008      	b.n	8004662 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004650:	f7fc fcae 	bl	8000fb0 <HAL_GetTick>
 8004654:	4602      	mov	r2, r0
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	2b02      	cmp	r3, #2
 800465c:	d901      	bls.n	8004662 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	e087      	b.n	8004772 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004662:	4b27      	ldr	r3, [pc, #156]	@ (8004700 <HAL_RCC_OscConfig+0x470>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800466a:	2b00      	cmp	r3, #0
 800466c:	d1f0      	bne.n	8004650 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	69da      	ldr	r2, [r3, #28]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6a1b      	ldr	r3, [r3, #32]
 8004676:	431a      	orrs	r2, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800467c:	019b      	lsls	r3, r3, #6
 800467e:	431a      	orrs	r2, r3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004684:	085b      	lsrs	r3, r3, #1
 8004686:	3b01      	subs	r3, #1
 8004688:	041b      	lsls	r3, r3, #16
 800468a:	431a      	orrs	r2, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004690:	061b      	lsls	r3, r3, #24
 8004692:	491b      	ldr	r1, [pc, #108]	@ (8004700 <HAL_RCC_OscConfig+0x470>)
 8004694:	4313      	orrs	r3, r2
 8004696:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004698:	4b1b      	ldr	r3, [pc, #108]	@ (8004708 <HAL_RCC_OscConfig+0x478>)
 800469a:	2201      	movs	r2, #1
 800469c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800469e:	f7fc fc87 	bl	8000fb0 <HAL_GetTick>
 80046a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046a4:	e008      	b.n	80046b8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046a6:	f7fc fc83 	bl	8000fb0 <HAL_GetTick>
 80046aa:	4602      	mov	r2, r0
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	1ad3      	subs	r3, r2, r3
 80046b0:	2b02      	cmp	r3, #2
 80046b2:	d901      	bls.n	80046b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80046b4:	2303      	movs	r3, #3
 80046b6:	e05c      	b.n	8004772 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046b8:	4b11      	ldr	r3, [pc, #68]	@ (8004700 <HAL_RCC_OscConfig+0x470>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d0f0      	beq.n	80046a6 <HAL_RCC_OscConfig+0x416>
 80046c4:	e054      	b.n	8004770 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046c6:	4b10      	ldr	r3, [pc, #64]	@ (8004708 <HAL_RCC_OscConfig+0x478>)
 80046c8:	2200      	movs	r2, #0
 80046ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046cc:	f7fc fc70 	bl	8000fb0 <HAL_GetTick>
 80046d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046d2:	e008      	b.n	80046e6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046d4:	f7fc fc6c 	bl	8000fb0 <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	2b02      	cmp	r3, #2
 80046e0:	d901      	bls.n	80046e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e045      	b.n	8004772 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046e6:	4b06      	ldr	r3, [pc, #24]	@ (8004700 <HAL_RCC_OscConfig+0x470>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d1f0      	bne.n	80046d4 <HAL_RCC_OscConfig+0x444>
 80046f2:	e03d      	b.n	8004770 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	699b      	ldr	r3, [r3, #24]
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d107      	bne.n	800470c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e038      	b.n	8004772 <HAL_RCC_OscConfig+0x4e2>
 8004700:	40023800 	.word	0x40023800
 8004704:	40007000 	.word	0x40007000
 8004708:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800470c:	4b1b      	ldr	r3, [pc, #108]	@ (800477c <HAL_RCC_OscConfig+0x4ec>)
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	699b      	ldr	r3, [r3, #24]
 8004716:	2b01      	cmp	r3, #1
 8004718:	d028      	beq.n	800476c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004724:	429a      	cmp	r2, r3
 8004726:	d121      	bne.n	800476c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004732:	429a      	cmp	r2, r3
 8004734:	d11a      	bne.n	800476c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004736:	68fa      	ldr	r2, [r7, #12]
 8004738:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800473c:	4013      	ands	r3, r2
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004742:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004744:	4293      	cmp	r3, r2
 8004746:	d111      	bne.n	800476c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004752:	085b      	lsrs	r3, r3, #1
 8004754:	3b01      	subs	r3, #1
 8004756:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004758:	429a      	cmp	r2, r3
 800475a:	d107      	bne.n	800476c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004766:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004768:	429a      	cmp	r2, r3
 800476a:	d001      	beq.n	8004770 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	e000      	b.n	8004772 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004770:	2300      	movs	r3, #0
}
 8004772:	4618      	mov	r0, r3
 8004774:	3718      	adds	r7, #24
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop
 800477c:	40023800 	.word	0x40023800

08004780 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b084      	sub	sp, #16
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d101      	bne.n	8004794 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	e0cc      	b.n	800492e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004794:	4b68      	ldr	r3, [pc, #416]	@ (8004938 <HAL_RCC_ClockConfig+0x1b8>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 030f 	and.w	r3, r3, #15
 800479c:	683a      	ldr	r2, [r7, #0]
 800479e:	429a      	cmp	r2, r3
 80047a0:	d90c      	bls.n	80047bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047a2:	4b65      	ldr	r3, [pc, #404]	@ (8004938 <HAL_RCC_ClockConfig+0x1b8>)
 80047a4:	683a      	ldr	r2, [r7, #0]
 80047a6:	b2d2      	uxtb	r2, r2
 80047a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047aa:	4b63      	ldr	r3, [pc, #396]	@ (8004938 <HAL_RCC_ClockConfig+0x1b8>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 030f 	and.w	r3, r3, #15
 80047b2:	683a      	ldr	r2, [r7, #0]
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d001      	beq.n	80047bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	e0b8      	b.n	800492e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 0302 	and.w	r3, r3, #2
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d020      	beq.n	800480a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 0304 	and.w	r3, r3, #4
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d005      	beq.n	80047e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047d4:	4b59      	ldr	r3, [pc, #356]	@ (800493c <HAL_RCC_ClockConfig+0x1bc>)
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	4a58      	ldr	r2, [pc, #352]	@ (800493c <HAL_RCC_ClockConfig+0x1bc>)
 80047da:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80047de:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 0308 	and.w	r3, r3, #8
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d005      	beq.n	80047f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047ec:	4b53      	ldr	r3, [pc, #332]	@ (800493c <HAL_RCC_ClockConfig+0x1bc>)
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	4a52      	ldr	r2, [pc, #328]	@ (800493c <HAL_RCC_ClockConfig+0x1bc>)
 80047f2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80047f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047f8:	4b50      	ldr	r3, [pc, #320]	@ (800493c <HAL_RCC_ClockConfig+0x1bc>)
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	494d      	ldr	r1, [pc, #308]	@ (800493c <HAL_RCC_ClockConfig+0x1bc>)
 8004806:	4313      	orrs	r3, r2
 8004808:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 0301 	and.w	r3, r3, #1
 8004812:	2b00      	cmp	r3, #0
 8004814:	d044      	beq.n	80048a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	2b01      	cmp	r3, #1
 800481c:	d107      	bne.n	800482e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800481e:	4b47      	ldr	r3, [pc, #284]	@ (800493c <HAL_RCC_ClockConfig+0x1bc>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004826:	2b00      	cmp	r3, #0
 8004828:	d119      	bne.n	800485e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e07f      	b.n	800492e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	2b02      	cmp	r3, #2
 8004834:	d003      	beq.n	800483e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800483a:	2b03      	cmp	r3, #3
 800483c:	d107      	bne.n	800484e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800483e:	4b3f      	ldr	r3, [pc, #252]	@ (800493c <HAL_RCC_ClockConfig+0x1bc>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004846:	2b00      	cmp	r3, #0
 8004848:	d109      	bne.n	800485e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e06f      	b.n	800492e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800484e:	4b3b      	ldr	r3, [pc, #236]	@ (800493c <HAL_RCC_ClockConfig+0x1bc>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 0302 	and.w	r3, r3, #2
 8004856:	2b00      	cmp	r3, #0
 8004858:	d101      	bne.n	800485e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e067      	b.n	800492e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800485e:	4b37      	ldr	r3, [pc, #220]	@ (800493c <HAL_RCC_ClockConfig+0x1bc>)
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	f023 0203 	bic.w	r2, r3, #3
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	4934      	ldr	r1, [pc, #208]	@ (800493c <HAL_RCC_ClockConfig+0x1bc>)
 800486c:	4313      	orrs	r3, r2
 800486e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004870:	f7fc fb9e 	bl	8000fb0 <HAL_GetTick>
 8004874:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004876:	e00a      	b.n	800488e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004878:	f7fc fb9a 	bl	8000fb0 <HAL_GetTick>
 800487c:	4602      	mov	r2, r0
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004886:	4293      	cmp	r3, r2
 8004888:	d901      	bls.n	800488e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800488a:	2303      	movs	r3, #3
 800488c:	e04f      	b.n	800492e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800488e:	4b2b      	ldr	r3, [pc, #172]	@ (800493c <HAL_RCC_ClockConfig+0x1bc>)
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	f003 020c 	and.w	r2, r3, #12
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	429a      	cmp	r2, r3
 800489e:	d1eb      	bne.n	8004878 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80048a0:	4b25      	ldr	r3, [pc, #148]	@ (8004938 <HAL_RCC_ClockConfig+0x1b8>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 030f 	and.w	r3, r3, #15
 80048a8:	683a      	ldr	r2, [r7, #0]
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d20c      	bcs.n	80048c8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048ae:	4b22      	ldr	r3, [pc, #136]	@ (8004938 <HAL_RCC_ClockConfig+0x1b8>)
 80048b0:	683a      	ldr	r2, [r7, #0]
 80048b2:	b2d2      	uxtb	r2, r2
 80048b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048b6:	4b20      	ldr	r3, [pc, #128]	@ (8004938 <HAL_RCC_ClockConfig+0x1b8>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 030f 	and.w	r3, r3, #15
 80048be:	683a      	ldr	r2, [r7, #0]
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d001      	beq.n	80048c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	e032      	b.n	800492e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 0304 	and.w	r3, r3, #4
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d008      	beq.n	80048e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048d4:	4b19      	ldr	r3, [pc, #100]	@ (800493c <HAL_RCC_ClockConfig+0x1bc>)
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	4916      	ldr	r1, [pc, #88]	@ (800493c <HAL_RCC_ClockConfig+0x1bc>)
 80048e2:	4313      	orrs	r3, r2
 80048e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 0308 	and.w	r3, r3, #8
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d009      	beq.n	8004906 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048f2:	4b12      	ldr	r3, [pc, #72]	@ (800493c <HAL_RCC_ClockConfig+0x1bc>)
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	691b      	ldr	r3, [r3, #16]
 80048fe:	00db      	lsls	r3, r3, #3
 8004900:	490e      	ldr	r1, [pc, #56]	@ (800493c <HAL_RCC_ClockConfig+0x1bc>)
 8004902:	4313      	orrs	r3, r2
 8004904:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004906:	f000 f821 	bl	800494c <HAL_RCC_GetSysClockFreq>
 800490a:	4602      	mov	r2, r0
 800490c:	4b0b      	ldr	r3, [pc, #44]	@ (800493c <HAL_RCC_ClockConfig+0x1bc>)
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	091b      	lsrs	r3, r3, #4
 8004912:	f003 030f 	and.w	r3, r3, #15
 8004916:	490a      	ldr	r1, [pc, #40]	@ (8004940 <HAL_RCC_ClockConfig+0x1c0>)
 8004918:	5ccb      	ldrb	r3, [r1, r3]
 800491a:	fa22 f303 	lsr.w	r3, r2, r3
 800491e:	4a09      	ldr	r2, [pc, #36]	@ (8004944 <HAL_RCC_ClockConfig+0x1c4>)
 8004920:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004922:	4b09      	ldr	r3, [pc, #36]	@ (8004948 <HAL_RCC_ClockConfig+0x1c8>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4618      	mov	r0, r3
 8004928:	f7fc fafe 	bl	8000f28 <HAL_InitTick>

  return HAL_OK;
 800492c:	2300      	movs	r3, #0
}
 800492e:	4618      	mov	r0, r3
 8004930:	3710      	adds	r7, #16
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
 8004936:	bf00      	nop
 8004938:	40023c00 	.word	0x40023c00
 800493c:	40023800 	.word	0x40023800
 8004940:	0800894c 	.word	0x0800894c
 8004944:	2000005c 	.word	0x2000005c
 8004948:	20000060 	.word	0x20000060

0800494c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800494c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004950:	b094      	sub	sp, #80	@ 0x50
 8004952:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004954:	2300      	movs	r3, #0
 8004956:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004958:	2300      	movs	r3, #0
 800495a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800495c:	2300      	movs	r3, #0
 800495e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004960:	2300      	movs	r3, #0
 8004962:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004964:	4b79      	ldr	r3, [pc, #484]	@ (8004b4c <HAL_RCC_GetSysClockFreq+0x200>)
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	f003 030c 	and.w	r3, r3, #12
 800496c:	2b08      	cmp	r3, #8
 800496e:	d00d      	beq.n	800498c <HAL_RCC_GetSysClockFreq+0x40>
 8004970:	2b08      	cmp	r3, #8
 8004972:	f200 80e1 	bhi.w	8004b38 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004976:	2b00      	cmp	r3, #0
 8004978:	d002      	beq.n	8004980 <HAL_RCC_GetSysClockFreq+0x34>
 800497a:	2b04      	cmp	r3, #4
 800497c:	d003      	beq.n	8004986 <HAL_RCC_GetSysClockFreq+0x3a>
 800497e:	e0db      	b.n	8004b38 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004980:	4b73      	ldr	r3, [pc, #460]	@ (8004b50 <HAL_RCC_GetSysClockFreq+0x204>)
 8004982:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004984:	e0db      	b.n	8004b3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004986:	4b73      	ldr	r3, [pc, #460]	@ (8004b54 <HAL_RCC_GetSysClockFreq+0x208>)
 8004988:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800498a:	e0d8      	b.n	8004b3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800498c:	4b6f      	ldr	r3, [pc, #444]	@ (8004b4c <HAL_RCC_GetSysClockFreq+0x200>)
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004994:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004996:	4b6d      	ldr	r3, [pc, #436]	@ (8004b4c <HAL_RCC_GetSysClockFreq+0x200>)
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d063      	beq.n	8004a6a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049a2:	4b6a      	ldr	r3, [pc, #424]	@ (8004b4c <HAL_RCC_GetSysClockFreq+0x200>)
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	099b      	lsrs	r3, r3, #6
 80049a8:	2200      	movs	r2, #0
 80049aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80049ac:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80049ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80049b6:	2300      	movs	r3, #0
 80049b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80049ba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80049be:	4622      	mov	r2, r4
 80049c0:	462b      	mov	r3, r5
 80049c2:	f04f 0000 	mov.w	r0, #0
 80049c6:	f04f 0100 	mov.w	r1, #0
 80049ca:	0159      	lsls	r1, r3, #5
 80049cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049d0:	0150      	lsls	r0, r2, #5
 80049d2:	4602      	mov	r2, r0
 80049d4:	460b      	mov	r3, r1
 80049d6:	4621      	mov	r1, r4
 80049d8:	1a51      	subs	r1, r2, r1
 80049da:	6139      	str	r1, [r7, #16]
 80049dc:	4629      	mov	r1, r5
 80049de:	eb63 0301 	sbc.w	r3, r3, r1
 80049e2:	617b      	str	r3, [r7, #20]
 80049e4:	f04f 0200 	mov.w	r2, #0
 80049e8:	f04f 0300 	mov.w	r3, #0
 80049ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80049f0:	4659      	mov	r1, fp
 80049f2:	018b      	lsls	r3, r1, #6
 80049f4:	4651      	mov	r1, sl
 80049f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80049fa:	4651      	mov	r1, sl
 80049fc:	018a      	lsls	r2, r1, #6
 80049fe:	4651      	mov	r1, sl
 8004a00:	ebb2 0801 	subs.w	r8, r2, r1
 8004a04:	4659      	mov	r1, fp
 8004a06:	eb63 0901 	sbc.w	r9, r3, r1
 8004a0a:	f04f 0200 	mov.w	r2, #0
 8004a0e:	f04f 0300 	mov.w	r3, #0
 8004a12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a1e:	4690      	mov	r8, r2
 8004a20:	4699      	mov	r9, r3
 8004a22:	4623      	mov	r3, r4
 8004a24:	eb18 0303 	adds.w	r3, r8, r3
 8004a28:	60bb      	str	r3, [r7, #8]
 8004a2a:	462b      	mov	r3, r5
 8004a2c:	eb49 0303 	adc.w	r3, r9, r3
 8004a30:	60fb      	str	r3, [r7, #12]
 8004a32:	f04f 0200 	mov.w	r2, #0
 8004a36:	f04f 0300 	mov.w	r3, #0
 8004a3a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004a3e:	4629      	mov	r1, r5
 8004a40:	024b      	lsls	r3, r1, #9
 8004a42:	4621      	mov	r1, r4
 8004a44:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004a48:	4621      	mov	r1, r4
 8004a4a:	024a      	lsls	r2, r1, #9
 8004a4c:	4610      	mov	r0, r2
 8004a4e:	4619      	mov	r1, r3
 8004a50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a52:	2200      	movs	r2, #0
 8004a54:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a56:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a58:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004a5c:	f7fb fc20 	bl	80002a0 <__aeabi_uldivmod>
 8004a60:	4602      	mov	r2, r0
 8004a62:	460b      	mov	r3, r1
 8004a64:	4613      	mov	r3, r2
 8004a66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a68:	e058      	b.n	8004b1c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a6a:	4b38      	ldr	r3, [pc, #224]	@ (8004b4c <HAL_RCC_GetSysClockFreq+0x200>)
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	099b      	lsrs	r3, r3, #6
 8004a70:	2200      	movs	r2, #0
 8004a72:	4618      	mov	r0, r3
 8004a74:	4611      	mov	r1, r2
 8004a76:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004a7a:	623b      	str	r3, [r7, #32]
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a80:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004a84:	4642      	mov	r2, r8
 8004a86:	464b      	mov	r3, r9
 8004a88:	f04f 0000 	mov.w	r0, #0
 8004a8c:	f04f 0100 	mov.w	r1, #0
 8004a90:	0159      	lsls	r1, r3, #5
 8004a92:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a96:	0150      	lsls	r0, r2, #5
 8004a98:	4602      	mov	r2, r0
 8004a9a:	460b      	mov	r3, r1
 8004a9c:	4641      	mov	r1, r8
 8004a9e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004aa2:	4649      	mov	r1, r9
 8004aa4:	eb63 0b01 	sbc.w	fp, r3, r1
 8004aa8:	f04f 0200 	mov.w	r2, #0
 8004aac:	f04f 0300 	mov.w	r3, #0
 8004ab0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004ab4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004ab8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004abc:	ebb2 040a 	subs.w	r4, r2, sl
 8004ac0:	eb63 050b 	sbc.w	r5, r3, fp
 8004ac4:	f04f 0200 	mov.w	r2, #0
 8004ac8:	f04f 0300 	mov.w	r3, #0
 8004acc:	00eb      	lsls	r3, r5, #3
 8004ace:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ad2:	00e2      	lsls	r2, r4, #3
 8004ad4:	4614      	mov	r4, r2
 8004ad6:	461d      	mov	r5, r3
 8004ad8:	4643      	mov	r3, r8
 8004ada:	18e3      	adds	r3, r4, r3
 8004adc:	603b      	str	r3, [r7, #0]
 8004ade:	464b      	mov	r3, r9
 8004ae0:	eb45 0303 	adc.w	r3, r5, r3
 8004ae4:	607b      	str	r3, [r7, #4]
 8004ae6:	f04f 0200 	mov.w	r2, #0
 8004aea:	f04f 0300 	mov.w	r3, #0
 8004aee:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004af2:	4629      	mov	r1, r5
 8004af4:	028b      	lsls	r3, r1, #10
 8004af6:	4621      	mov	r1, r4
 8004af8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004afc:	4621      	mov	r1, r4
 8004afe:	028a      	lsls	r2, r1, #10
 8004b00:	4610      	mov	r0, r2
 8004b02:	4619      	mov	r1, r3
 8004b04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b06:	2200      	movs	r2, #0
 8004b08:	61bb      	str	r3, [r7, #24]
 8004b0a:	61fa      	str	r2, [r7, #28]
 8004b0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b10:	f7fb fbc6 	bl	80002a0 <__aeabi_uldivmod>
 8004b14:	4602      	mov	r2, r0
 8004b16:	460b      	mov	r3, r1
 8004b18:	4613      	mov	r3, r2
 8004b1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004b1c:	4b0b      	ldr	r3, [pc, #44]	@ (8004b4c <HAL_RCC_GetSysClockFreq+0x200>)
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	0c1b      	lsrs	r3, r3, #16
 8004b22:	f003 0303 	and.w	r3, r3, #3
 8004b26:	3301      	adds	r3, #1
 8004b28:	005b      	lsls	r3, r3, #1
 8004b2a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004b2c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004b2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b34:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b36:	e002      	b.n	8004b3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b38:	4b05      	ldr	r3, [pc, #20]	@ (8004b50 <HAL_RCC_GetSysClockFreq+0x204>)
 8004b3a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3750      	adds	r7, #80	@ 0x50
 8004b44:	46bd      	mov	sp, r7
 8004b46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b4a:	bf00      	nop
 8004b4c:	40023800 	.word	0x40023800
 8004b50:	00f42400 	.word	0x00f42400
 8004b54:	007a1200 	.word	0x007a1200

08004b58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b5c:	4b03      	ldr	r3, [pc, #12]	@ (8004b6c <HAL_RCC_GetHCLKFreq+0x14>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr
 8004b6a:	bf00      	nop
 8004b6c:	2000005c 	.word	0x2000005c

08004b70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004b74:	f7ff fff0 	bl	8004b58 <HAL_RCC_GetHCLKFreq>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	4b05      	ldr	r3, [pc, #20]	@ (8004b90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	0a9b      	lsrs	r3, r3, #10
 8004b80:	f003 0307 	and.w	r3, r3, #7
 8004b84:	4903      	ldr	r1, [pc, #12]	@ (8004b94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b86:	5ccb      	ldrb	r3, [r1, r3]
 8004b88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	bd80      	pop	{r7, pc}
 8004b90:	40023800 	.word	0x40023800
 8004b94:	0800895c 	.word	0x0800895c

08004b98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004b9c:	f7ff ffdc 	bl	8004b58 <HAL_RCC_GetHCLKFreq>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	4b05      	ldr	r3, [pc, #20]	@ (8004bb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	0b5b      	lsrs	r3, r3, #13
 8004ba8:	f003 0307 	and.w	r3, r3, #7
 8004bac:	4903      	ldr	r1, [pc, #12]	@ (8004bbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bae:	5ccb      	ldrb	r3, [r1, r3]
 8004bb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	bd80      	pop	{r7, pc}
 8004bb8:	40023800 	.word	0x40023800
 8004bbc:	0800895c 	.word	0x0800895c

08004bc0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b082      	sub	sp, #8
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d101      	bne.n	8004bd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e042      	b.n	8004c58 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d106      	bne.n	8004bec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f7fc f850 	bl	8000c8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2224      	movs	r2, #36	@ 0x24
 8004bf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	68da      	ldr	r2, [r3, #12]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004c02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	f000 f973 	bl	8004ef0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	691a      	ldr	r2, [r3, #16]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004c18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	695a      	ldr	r2, [r3, #20]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004c28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	68da      	ldr	r2, [r3, #12]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004c38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2220      	movs	r2, #32
 8004c44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2220      	movs	r2, #32
 8004c4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004c56:	2300      	movs	r3, #0
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3708      	adds	r7, #8
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}

08004c60 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b08a      	sub	sp, #40	@ 0x28
 8004c64:	af02      	add	r7, sp, #8
 8004c66:	60f8      	str	r0, [r7, #12]
 8004c68:	60b9      	str	r1, [r7, #8]
 8004c6a:	603b      	str	r3, [r7, #0]
 8004c6c:	4613      	mov	r3, r2
 8004c6e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004c70:	2300      	movs	r3, #0
 8004c72:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c7a:	b2db      	uxtb	r3, r3
 8004c7c:	2b20      	cmp	r3, #32
 8004c7e:	d175      	bne.n	8004d6c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d002      	beq.n	8004c8c <HAL_UART_Transmit+0x2c>
 8004c86:	88fb      	ldrh	r3, [r7, #6]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d101      	bne.n	8004c90 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	e06e      	b.n	8004d6e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2200      	movs	r2, #0
 8004c94:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2221      	movs	r2, #33	@ 0x21
 8004c9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c9e:	f7fc f987 	bl	8000fb0 <HAL_GetTick>
 8004ca2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	88fa      	ldrh	r2, [r7, #6]
 8004ca8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	88fa      	ldrh	r2, [r7, #6]
 8004cae:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cb8:	d108      	bne.n	8004ccc <HAL_UART_Transmit+0x6c>
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	691b      	ldr	r3, [r3, #16]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d104      	bne.n	8004ccc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	61bb      	str	r3, [r7, #24]
 8004cca:	e003      	b.n	8004cd4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004cd4:	e02e      	b.n	8004d34 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	9300      	str	r3, [sp, #0]
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	2180      	movs	r1, #128	@ 0x80
 8004ce0:	68f8      	ldr	r0, [r7, #12]
 8004ce2:	f000 f848 	bl	8004d76 <UART_WaitOnFlagUntilTimeout>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d005      	beq.n	8004cf8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2220      	movs	r2, #32
 8004cf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004cf4:	2303      	movs	r3, #3
 8004cf6:	e03a      	b.n	8004d6e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004cf8:	69fb      	ldr	r3, [r7, #28]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d10b      	bne.n	8004d16 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004cfe:	69bb      	ldr	r3, [r7, #24]
 8004d00:	881b      	ldrh	r3, [r3, #0]
 8004d02:	461a      	mov	r2, r3
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d0c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004d0e:	69bb      	ldr	r3, [r7, #24]
 8004d10:	3302      	adds	r3, #2
 8004d12:	61bb      	str	r3, [r7, #24]
 8004d14:	e007      	b.n	8004d26 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d16:	69fb      	ldr	r3, [r7, #28]
 8004d18:	781a      	ldrb	r2, [r3, #0]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004d20:	69fb      	ldr	r3, [r7, #28]
 8004d22:	3301      	adds	r3, #1
 8004d24:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	3b01      	subs	r3, #1
 8004d2e:	b29a      	uxth	r2, r3
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d1cb      	bne.n	8004cd6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	9300      	str	r3, [sp, #0]
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	2200      	movs	r2, #0
 8004d46:	2140      	movs	r1, #64	@ 0x40
 8004d48:	68f8      	ldr	r0, [r7, #12]
 8004d4a:	f000 f814 	bl	8004d76 <UART_WaitOnFlagUntilTimeout>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d005      	beq.n	8004d60 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2220      	movs	r2, #32
 8004d58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004d5c:	2303      	movs	r3, #3
 8004d5e:	e006      	b.n	8004d6e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2220      	movs	r2, #32
 8004d64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	e000      	b.n	8004d6e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004d6c:	2302      	movs	r3, #2
  }
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3720      	adds	r7, #32
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}

08004d76 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004d76:	b580      	push	{r7, lr}
 8004d78:	b086      	sub	sp, #24
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	60f8      	str	r0, [r7, #12]
 8004d7e:	60b9      	str	r1, [r7, #8]
 8004d80:	603b      	str	r3, [r7, #0]
 8004d82:	4613      	mov	r3, r2
 8004d84:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d86:	e03b      	b.n	8004e00 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d88:	6a3b      	ldr	r3, [r7, #32]
 8004d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d8e:	d037      	beq.n	8004e00 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d90:	f7fc f90e 	bl	8000fb0 <HAL_GetTick>
 8004d94:	4602      	mov	r2, r0
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	1ad3      	subs	r3, r2, r3
 8004d9a:	6a3a      	ldr	r2, [r7, #32]
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d302      	bcc.n	8004da6 <UART_WaitOnFlagUntilTimeout+0x30>
 8004da0:	6a3b      	ldr	r3, [r7, #32]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d101      	bne.n	8004daa <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004da6:	2303      	movs	r3, #3
 8004da8:	e03a      	b.n	8004e20 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	68db      	ldr	r3, [r3, #12]
 8004db0:	f003 0304 	and.w	r3, r3, #4
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d023      	beq.n	8004e00 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	2b80      	cmp	r3, #128	@ 0x80
 8004dbc:	d020      	beq.n	8004e00 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	2b40      	cmp	r3, #64	@ 0x40
 8004dc2:	d01d      	beq.n	8004e00 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 0308 	and.w	r3, r3, #8
 8004dce:	2b08      	cmp	r3, #8
 8004dd0:	d116      	bne.n	8004e00 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	617b      	str	r3, [r7, #20]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	617b      	str	r3, [r7, #20]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	617b      	str	r3, [r7, #20]
 8004de6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004de8:	68f8      	ldr	r0, [r7, #12]
 8004dea:	f000 f81d 	bl	8004e28 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2208      	movs	r2, #8
 8004df2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2200      	movs	r2, #0
 8004df8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e00f      	b.n	8004e20 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	4013      	ands	r3, r2
 8004e0a:	68ba      	ldr	r2, [r7, #8]
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	bf0c      	ite	eq
 8004e10:	2301      	moveq	r3, #1
 8004e12:	2300      	movne	r3, #0
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	461a      	mov	r2, r3
 8004e18:	79fb      	ldrb	r3, [r7, #7]
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d0b4      	beq.n	8004d88 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e1e:	2300      	movs	r3, #0
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3718      	adds	r7, #24
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}

08004e28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b095      	sub	sp, #84	@ 0x54
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	330c      	adds	r3, #12
 8004e36:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e3a:	e853 3f00 	ldrex	r3, [r3]
 8004e3e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004e40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e42:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	330c      	adds	r3, #12
 8004e4e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004e50:	643a      	str	r2, [r7, #64]	@ 0x40
 8004e52:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e54:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004e56:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004e58:	e841 2300 	strex	r3, r2, [r1]
 8004e5c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004e5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d1e5      	bne.n	8004e30 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	3314      	adds	r3, #20
 8004e6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e6c:	6a3b      	ldr	r3, [r7, #32]
 8004e6e:	e853 3f00 	ldrex	r3, [r3]
 8004e72:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e74:	69fb      	ldr	r3, [r7, #28]
 8004e76:	f023 0301 	bic.w	r3, r3, #1
 8004e7a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	3314      	adds	r3, #20
 8004e82:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e84:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004e86:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e88:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004e8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e8c:	e841 2300 	strex	r3, r2, [r1]
 8004e90:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d1e5      	bne.n	8004e64 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d119      	bne.n	8004ed4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	330c      	adds	r3, #12
 8004ea6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	e853 3f00 	ldrex	r3, [r3]
 8004eae:	60bb      	str	r3, [r7, #8]
   return(result);
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	f023 0310 	bic.w	r3, r3, #16
 8004eb6:	647b      	str	r3, [r7, #68]	@ 0x44
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	330c      	adds	r3, #12
 8004ebe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004ec0:	61ba      	str	r2, [r7, #24]
 8004ec2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ec4:	6979      	ldr	r1, [r7, #20]
 8004ec6:	69ba      	ldr	r2, [r7, #24]
 8004ec8:	e841 2300 	strex	r3, r2, [r1]
 8004ecc:	613b      	str	r3, [r7, #16]
   return(result);
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d1e5      	bne.n	8004ea0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2220      	movs	r2, #32
 8004ed8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004ee2:	bf00      	nop
 8004ee4:	3754      	adds	r7, #84	@ 0x54
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr
	...

08004ef0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ef0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ef4:	b0c0      	sub	sp, #256	@ 0x100
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	691b      	ldr	r3, [r3, #16]
 8004f04:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f0c:	68d9      	ldr	r1, [r3, #12]
 8004f0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	ea40 0301 	orr.w	r3, r0, r1
 8004f18:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004f1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f1e:	689a      	ldr	r2, [r3, #8]
 8004f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f24:	691b      	ldr	r3, [r3, #16]
 8004f26:	431a      	orrs	r2, r3
 8004f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f2c:	695b      	ldr	r3, [r3, #20]
 8004f2e:	431a      	orrs	r2, r3
 8004f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f34:	69db      	ldr	r3, [r3, #28]
 8004f36:	4313      	orrs	r3, r2
 8004f38:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004f48:	f021 010c 	bic.w	r1, r1, #12
 8004f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004f56:	430b      	orrs	r3, r1
 8004f58:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	695b      	ldr	r3, [r3, #20]
 8004f62:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004f66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f6a:	6999      	ldr	r1, [r3, #24]
 8004f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	ea40 0301 	orr.w	r3, r0, r1
 8004f76:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	4b8f      	ldr	r3, [pc, #572]	@ (80051bc <UART_SetConfig+0x2cc>)
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d005      	beq.n	8004f90 <UART_SetConfig+0xa0>
 8004f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	4b8d      	ldr	r3, [pc, #564]	@ (80051c0 <UART_SetConfig+0x2d0>)
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d104      	bne.n	8004f9a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004f90:	f7ff fe02 	bl	8004b98 <HAL_RCC_GetPCLK2Freq>
 8004f94:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004f98:	e003      	b.n	8004fa2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004f9a:	f7ff fde9 	bl	8004b70 <HAL_RCC_GetPCLK1Freq>
 8004f9e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fa6:	69db      	ldr	r3, [r3, #28]
 8004fa8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004fac:	f040 810c 	bne.w	80051c8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004fb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004fba:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004fbe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004fc2:	4622      	mov	r2, r4
 8004fc4:	462b      	mov	r3, r5
 8004fc6:	1891      	adds	r1, r2, r2
 8004fc8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004fca:	415b      	adcs	r3, r3
 8004fcc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004fce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004fd2:	4621      	mov	r1, r4
 8004fd4:	eb12 0801 	adds.w	r8, r2, r1
 8004fd8:	4629      	mov	r1, r5
 8004fda:	eb43 0901 	adc.w	r9, r3, r1
 8004fde:	f04f 0200 	mov.w	r2, #0
 8004fe2:	f04f 0300 	mov.w	r3, #0
 8004fe6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004fea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004fee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ff2:	4690      	mov	r8, r2
 8004ff4:	4699      	mov	r9, r3
 8004ff6:	4623      	mov	r3, r4
 8004ff8:	eb18 0303 	adds.w	r3, r8, r3
 8004ffc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005000:	462b      	mov	r3, r5
 8005002:	eb49 0303 	adc.w	r3, r9, r3
 8005006:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800500a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005016:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800501a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800501e:	460b      	mov	r3, r1
 8005020:	18db      	adds	r3, r3, r3
 8005022:	653b      	str	r3, [r7, #80]	@ 0x50
 8005024:	4613      	mov	r3, r2
 8005026:	eb42 0303 	adc.w	r3, r2, r3
 800502a:	657b      	str	r3, [r7, #84]	@ 0x54
 800502c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005030:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005034:	f7fb f934 	bl	80002a0 <__aeabi_uldivmod>
 8005038:	4602      	mov	r2, r0
 800503a:	460b      	mov	r3, r1
 800503c:	4b61      	ldr	r3, [pc, #388]	@ (80051c4 <UART_SetConfig+0x2d4>)
 800503e:	fba3 2302 	umull	r2, r3, r3, r2
 8005042:	095b      	lsrs	r3, r3, #5
 8005044:	011c      	lsls	r4, r3, #4
 8005046:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800504a:	2200      	movs	r2, #0
 800504c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005050:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005054:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005058:	4642      	mov	r2, r8
 800505a:	464b      	mov	r3, r9
 800505c:	1891      	adds	r1, r2, r2
 800505e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005060:	415b      	adcs	r3, r3
 8005062:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005064:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005068:	4641      	mov	r1, r8
 800506a:	eb12 0a01 	adds.w	sl, r2, r1
 800506e:	4649      	mov	r1, r9
 8005070:	eb43 0b01 	adc.w	fp, r3, r1
 8005074:	f04f 0200 	mov.w	r2, #0
 8005078:	f04f 0300 	mov.w	r3, #0
 800507c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005080:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005084:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005088:	4692      	mov	sl, r2
 800508a:	469b      	mov	fp, r3
 800508c:	4643      	mov	r3, r8
 800508e:	eb1a 0303 	adds.w	r3, sl, r3
 8005092:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005096:	464b      	mov	r3, r9
 8005098:	eb4b 0303 	adc.w	r3, fp, r3
 800509c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80050a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	2200      	movs	r2, #0
 80050a8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80050ac:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80050b0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80050b4:	460b      	mov	r3, r1
 80050b6:	18db      	adds	r3, r3, r3
 80050b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80050ba:	4613      	mov	r3, r2
 80050bc:	eb42 0303 	adc.w	r3, r2, r3
 80050c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80050c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80050c6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80050ca:	f7fb f8e9 	bl	80002a0 <__aeabi_uldivmod>
 80050ce:	4602      	mov	r2, r0
 80050d0:	460b      	mov	r3, r1
 80050d2:	4611      	mov	r1, r2
 80050d4:	4b3b      	ldr	r3, [pc, #236]	@ (80051c4 <UART_SetConfig+0x2d4>)
 80050d6:	fba3 2301 	umull	r2, r3, r3, r1
 80050da:	095b      	lsrs	r3, r3, #5
 80050dc:	2264      	movs	r2, #100	@ 0x64
 80050de:	fb02 f303 	mul.w	r3, r2, r3
 80050e2:	1acb      	subs	r3, r1, r3
 80050e4:	00db      	lsls	r3, r3, #3
 80050e6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80050ea:	4b36      	ldr	r3, [pc, #216]	@ (80051c4 <UART_SetConfig+0x2d4>)
 80050ec:	fba3 2302 	umull	r2, r3, r3, r2
 80050f0:	095b      	lsrs	r3, r3, #5
 80050f2:	005b      	lsls	r3, r3, #1
 80050f4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80050f8:	441c      	add	r4, r3
 80050fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050fe:	2200      	movs	r2, #0
 8005100:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005104:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005108:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800510c:	4642      	mov	r2, r8
 800510e:	464b      	mov	r3, r9
 8005110:	1891      	adds	r1, r2, r2
 8005112:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005114:	415b      	adcs	r3, r3
 8005116:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005118:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800511c:	4641      	mov	r1, r8
 800511e:	1851      	adds	r1, r2, r1
 8005120:	6339      	str	r1, [r7, #48]	@ 0x30
 8005122:	4649      	mov	r1, r9
 8005124:	414b      	adcs	r3, r1
 8005126:	637b      	str	r3, [r7, #52]	@ 0x34
 8005128:	f04f 0200 	mov.w	r2, #0
 800512c:	f04f 0300 	mov.w	r3, #0
 8005130:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005134:	4659      	mov	r1, fp
 8005136:	00cb      	lsls	r3, r1, #3
 8005138:	4651      	mov	r1, sl
 800513a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800513e:	4651      	mov	r1, sl
 8005140:	00ca      	lsls	r2, r1, #3
 8005142:	4610      	mov	r0, r2
 8005144:	4619      	mov	r1, r3
 8005146:	4603      	mov	r3, r0
 8005148:	4642      	mov	r2, r8
 800514a:	189b      	adds	r3, r3, r2
 800514c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005150:	464b      	mov	r3, r9
 8005152:	460a      	mov	r2, r1
 8005154:	eb42 0303 	adc.w	r3, r2, r3
 8005158:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800515c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005168:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800516c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005170:	460b      	mov	r3, r1
 8005172:	18db      	adds	r3, r3, r3
 8005174:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005176:	4613      	mov	r3, r2
 8005178:	eb42 0303 	adc.w	r3, r2, r3
 800517c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800517e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005182:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005186:	f7fb f88b 	bl	80002a0 <__aeabi_uldivmod>
 800518a:	4602      	mov	r2, r0
 800518c:	460b      	mov	r3, r1
 800518e:	4b0d      	ldr	r3, [pc, #52]	@ (80051c4 <UART_SetConfig+0x2d4>)
 8005190:	fba3 1302 	umull	r1, r3, r3, r2
 8005194:	095b      	lsrs	r3, r3, #5
 8005196:	2164      	movs	r1, #100	@ 0x64
 8005198:	fb01 f303 	mul.w	r3, r1, r3
 800519c:	1ad3      	subs	r3, r2, r3
 800519e:	00db      	lsls	r3, r3, #3
 80051a0:	3332      	adds	r3, #50	@ 0x32
 80051a2:	4a08      	ldr	r2, [pc, #32]	@ (80051c4 <UART_SetConfig+0x2d4>)
 80051a4:	fba2 2303 	umull	r2, r3, r2, r3
 80051a8:	095b      	lsrs	r3, r3, #5
 80051aa:	f003 0207 	and.w	r2, r3, #7
 80051ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4422      	add	r2, r4
 80051b6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80051b8:	e106      	b.n	80053c8 <UART_SetConfig+0x4d8>
 80051ba:	bf00      	nop
 80051bc:	40011000 	.word	0x40011000
 80051c0:	40011400 	.word	0x40011400
 80051c4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80051c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051cc:	2200      	movs	r2, #0
 80051ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80051d2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80051d6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80051da:	4642      	mov	r2, r8
 80051dc:	464b      	mov	r3, r9
 80051de:	1891      	adds	r1, r2, r2
 80051e0:	6239      	str	r1, [r7, #32]
 80051e2:	415b      	adcs	r3, r3
 80051e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80051e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80051ea:	4641      	mov	r1, r8
 80051ec:	1854      	adds	r4, r2, r1
 80051ee:	4649      	mov	r1, r9
 80051f0:	eb43 0501 	adc.w	r5, r3, r1
 80051f4:	f04f 0200 	mov.w	r2, #0
 80051f8:	f04f 0300 	mov.w	r3, #0
 80051fc:	00eb      	lsls	r3, r5, #3
 80051fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005202:	00e2      	lsls	r2, r4, #3
 8005204:	4614      	mov	r4, r2
 8005206:	461d      	mov	r5, r3
 8005208:	4643      	mov	r3, r8
 800520a:	18e3      	adds	r3, r4, r3
 800520c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005210:	464b      	mov	r3, r9
 8005212:	eb45 0303 	adc.w	r3, r5, r3
 8005216:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800521a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005226:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800522a:	f04f 0200 	mov.w	r2, #0
 800522e:	f04f 0300 	mov.w	r3, #0
 8005232:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005236:	4629      	mov	r1, r5
 8005238:	008b      	lsls	r3, r1, #2
 800523a:	4621      	mov	r1, r4
 800523c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005240:	4621      	mov	r1, r4
 8005242:	008a      	lsls	r2, r1, #2
 8005244:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005248:	f7fb f82a 	bl	80002a0 <__aeabi_uldivmod>
 800524c:	4602      	mov	r2, r0
 800524e:	460b      	mov	r3, r1
 8005250:	4b60      	ldr	r3, [pc, #384]	@ (80053d4 <UART_SetConfig+0x4e4>)
 8005252:	fba3 2302 	umull	r2, r3, r3, r2
 8005256:	095b      	lsrs	r3, r3, #5
 8005258:	011c      	lsls	r4, r3, #4
 800525a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800525e:	2200      	movs	r2, #0
 8005260:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005264:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005268:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800526c:	4642      	mov	r2, r8
 800526e:	464b      	mov	r3, r9
 8005270:	1891      	adds	r1, r2, r2
 8005272:	61b9      	str	r1, [r7, #24]
 8005274:	415b      	adcs	r3, r3
 8005276:	61fb      	str	r3, [r7, #28]
 8005278:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800527c:	4641      	mov	r1, r8
 800527e:	1851      	adds	r1, r2, r1
 8005280:	6139      	str	r1, [r7, #16]
 8005282:	4649      	mov	r1, r9
 8005284:	414b      	adcs	r3, r1
 8005286:	617b      	str	r3, [r7, #20]
 8005288:	f04f 0200 	mov.w	r2, #0
 800528c:	f04f 0300 	mov.w	r3, #0
 8005290:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005294:	4659      	mov	r1, fp
 8005296:	00cb      	lsls	r3, r1, #3
 8005298:	4651      	mov	r1, sl
 800529a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800529e:	4651      	mov	r1, sl
 80052a0:	00ca      	lsls	r2, r1, #3
 80052a2:	4610      	mov	r0, r2
 80052a4:	4619      	mov	r1, r3
 80052a6:	4603      	mov	r3, r0
 80052a8:	4642      	mov	r2, r8
 80052aa:	189b      	adds	r3, r3, r2
 80052ac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80052b0:	464b      	mov	r3, r9
 80052b2:	460a      	mov	r2, r1
 80052b4:	eb42 0303 	adc.w	r3, r2, r3
 80052b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80052bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	2200      	movs	r2, #0
 80052c4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80052c6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80052c8:	f04f 0200 	mov.w	r2, #0
 80052cc:	f04f 0300 	mov.w	r3, #0
 80052d0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80052d4:	4649      	mov	r1, r9
 80052d6:	008b      	lsls	r3, r1, #2
 80052d8:	4641      	mov	r1, r8
 80052da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80052de:	4641      	mov	r1, r8
 80052e0:	008a      	lsls	r2, r1, #2
 80052e2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80052e6:	f7fa ffdb 	bl	80002a0 <__aeabi_uldivmod>
 80052ea:	4602      	mov	r2, r0
 80052ec:	460b      	mov	r3, r1
 80052ee:	4611      	mov	r1, r2
 80052f0:	4b38      	ldr	r3, [pc, #224]	@ (80053d4 <UART_SetConfig+0x4e4>)
 80052f2:	fba3 2301 	umull	r2, r3, r3, r1
 80052f6:	095b      	lsrs	r3, r3, #5
 80052f8:	2264      	movs	r2, #100	@ 0x64
 80052fa:	fb02 f303 	mul.w	r3, r2, r3
 80052fe:	1acb      	subs	r3, r1, r3
 8005300:	011b      	lsls	r3, r3, #4
 8005302:	3332      	adds	r3, #50	@ 0x32
 8005304:	4a33      	ldr	r2, [pc, #204]	@ (80053d4 <UART_SetConfig+0x4e4>)
 8005306:	fba2 2303 	umull	r2, r3, r2, r3
 800530a:	095b      	lsrs	r3, r3, #5
 800530c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005310:	441c      	add	r4, r3
 8005312:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005316:	2200      	movs	r2, #0
 8005318:	673b      	str	r3, [r7, #112]	@ 0x70
 800531a:	677a      	str	r2, [r7, #116]	@ 0x74
 800531c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005320:	4642      	mov	r2, r8
 8005322:	464b      	mov	r3, r9
 8005324:	1891      	adds	r1, r2, r2
 8005326:	60b9      	str	r1, [r7, #8]
 8005328:	415b      	adcs	r3, r3
 800532a:	60fb      	str	r3, [r7, #12]
 800532c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005330:	4641      	mov	r1, r8
 8005332:	1851      	adds	r1, r2, r1
 8005334:	6039      	str	r1, [r7, #0]
 8005336:	4649      	mov	r1, r9
 8005338:	414b      	adcs	r3, r1
 800533a:	607b      	str	r3, [r7, #4]
 800533c:	f04f 0200 	mov.w	r2, #0
 8005340:	f04f 0300 	mov.w	r3, #0
 8005344:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005348:	4659      	mov	r1, fp
 800534a:	00cb      	lsls	r3, r1, #3
 800534c:	4651      	mov	r1, sl
 800534e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005352:	4651      	mov	r1, sl
 8005354:	00ca      	lsls	r2, r1, #3
 8005356:	4610      	mov	r0, r2
 8005358:	4619      	mov	r1, r3
 800535a:	4603      	mov	r3, r0
 800535c:	4642      	mov	r2, r8
 800535e:	189b      	adds	r3, r3, r2
 8005360:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005362:	464b      	mov	r3, r9
 8005364:	460a      	mov	r2, r1
 8005366:	eb42 0303 	adc.w	r3, r2, r3
 800536a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800536c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	2200      	movs	r2, #0
 8005374:	663b      	str	r3, [r7, #96]	@ 0x60
 8005376:	667a      	str	r2, [r7, #100]	@ 0x64
 8005378:	f04f 0200 	mov.w	r2, #0
 800537c:	f04f 0300 	mov.w	r3, #0
 8005380:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005384:	4649      	mov	r1, r9
 8005386:	008b      	lsls	r3, r1, #2
 8005388:	4641      	mov	r1, r8
 800538a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800538e:	4641      	mov	r1, r8
 8005390:	008a      	lsls	r2, r1, #2
 8005392:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005396:	f7fa ff83 	bl	80002a0 <__aeabi_uldivmod>
 800539a:	4602      	mov	r2, r0
 800539c:	460b      	mov	r3, r1
 800539e:	4b0d      	ldr	r3, [pc, #52]	@ (80053d4 <UART_SetConfig+0x4e4>)
 80053a0:	fba3 1302 	umull	r1, r3, r3, r2
 80053a4:	095b      	lsrs	r3, r3, #5
 80053a6:	2164      	movs	r1, #100	@ 0x64
 80053a8:	fb01 f303 	mul.w	r3, r1, r3
 80053ac:	1ad3      	subs	r3, r2, r3
 80053ae:	011b      	lsls	r3, r3, #4
 80053b0:	3332      	adds	r3, #50	@ 0x32
 80053b2:	4a08      	ldr	r2, [pc, #32]	@ (80053d4 <UART_SetConfig+0x4e4>)
 80053b4:	fba2 2303 	umull	r2, r3, r2, r3
 80053b8:	095b      	lsrs	r3, r3, #5
 80053ba:	f003 020f 	and.w	r2, r3, #15
 80053be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4422      	add	r2, r4
 80053c6:	609a      	str	r2, [r3, #8]
}
 80053c8:	bf00      	nop
 80053ca:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80053ce:	46bd      	mov	sp, r7
 80053d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053d4:	51eb851f 	.word	0x51eb851f

080053d8 <__NVIC_SetPriority>:
{
 80053d8:	b480      	push	{r7}
 80053da:	b083      	sub	sp, #12
 80053dc:	af00      	add	r7, sp, #0
 80053de:	4603      	mov	r3, r0
 80053e0:	6039      	str	r1, [r7, #0]
 80053e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80053e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	db0a      	blt.n	8005402 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	b2da      	uxtb	r2, r3
 80053f0:	490c      	ldr	r1, [pc, #48]	@ (8005424 <__NVIC_SetPriority+0x4c>)
 80053f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053f6:	0112      	lsls	r2, r2, #4
 80053f8:	b2d2      	uxtb	r2, r2
 80053fa:	440b      	add	r3, r1
 80053fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005400:	e00a      	b.n	8005418 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	b2da      	uxtb	r2, r3
 8005406:	4908      	ldr	r1, [pc, #32]	@ (8005428 <__NVIC_SetPriority+0x50>)
 8005408:	79fb      	ldrb	r3, [r7, #7]
 800540a:	f003 030f 	and.w	r3, r3, #15
 800540e:	3b04      	subs	r3, #4
 8005410:	0112      	lsls	r2, r2, #4
 8005412:	b2d2      	uxtb	r2, r2
 8005414:	440b      	add	r3, r1
 8005416:	761a      	strb	r2, [r3, #24]
}
 8005418:	bf00      	nop
 800541a:	370c      	adds	r7, #12
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr
 8005424:	e000e100 	.word	0xe000e100
 8005428:	e000ed00 	.word	0xe000ed00

0800542c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800542c:	b580      	push	{r7, lr}
 800542e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005430:	2100      	movs	r1, #0
 8005432:	f06f 0004 	mvn.w	r0, #4
 8005436:	f7ff ffcf 	bl	80053d8 <__NVIC_SetPriority>
#endif
}
 800543a:	bf00      	nop
 800543c:	bd80      	pop	{r7, pc}
	...

08005440 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005440:	b480      	push	{r7}
 8005442:	b083      	sub	sp, #12
 8005444:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005446:	f3ef 8305 	mrs	r3, IPSR
 800544a:	603b      	str	r3, [r7, #0]
  return(result);
 800544c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800544e:	2b00      	cmp	r3, #0
 8005450:	d003      	beq.n	800545a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005452:	f06f 0305 	mvn.w	r3, #5
 8005456:	607b      	str	r3, [r7, #4]
 8005458:	e00c      	b.n	8005474 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800545a:	4b0a      	ldr	r3, [pc, #40]	@ (8005484 <osKernelInitialize+0x44>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d105      	bne.n	800546e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005462:	4b08      	ldr	r3, [pc, #32]	@ (8005484 <osKernelInitialize+0x44>)
 8005464:	2201      	movs	r2, #1
 8005466:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005468:	2300      	movs	r3, #0
 800546a:	607b      	str	r3, [r7, #4]
 800546c:	e002      	b.n	8005474 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800546e:	f04f 33ff 	mov.w	r3, #4294967295
 8005472:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005474:	687b      	ldr	r3, [r7, #4]
}
 8005476:	4618      	mov	r0, r3
 8005478:	370c      	adds	r7, #12
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr
 8005482:	bf00      	nop
 8005484:	200003d4 	.word	0x200003d4

08005488 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005488:	b580      	push	{r7, lr}
 800548a:	b082      	sub	sp, #8
 800548c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800548e:	f3ef 8305 	mrs	r3, IPSR
 8005492:	603b      	str	r3, [r7, #0]
  return(result);
 8005494:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005496:	2b00      	cmp	r3, #0
 8005498:	d003      	beq.n	80054a2 <osKernelStart+0x1a>
    stat = osErrorISR;
 800549a:	f06f 0305 	mvn.w	r3, #5
 800549e:	607b      	str	r3, [r7, #4]
 80054a0:	e010      	b.n	80054c4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80054a2:	4b0b      	ldr	r3, [pc, #44]	@ (80054d0 <osKernelStart+0x48>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	d109      	bne.n	80054be <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80054aa:	f7ff ffbf 	bl	800542c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80054ae:	4b08      	ldr	r3, [pc, #32]	@ (80054d0 <osKernelStart+0x48>)
 80054b0:	2202      	movs	r2, #2
 80054b2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80054b4:	f001 f87a 	bl	80065ac <vTaskStartScheduler>
      stat = osOK;
 80054b8:	2300      	movs	r3, #0
 80054ba:	607b      	str	r3, [r7, #4]
 80054bc:	e002      	b.n	80054c4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80054be:	f04f 33ff 	mov.w	r3, #4294967295
 80054c2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80054c4:	687b      	ldr	r3, [r7, #4]
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3708      	adds	r7, #8
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}
 80054ce:	bf00      	nop
 80054d0:	200003d4 	.word	0x200003d4

080054d4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b08e      	sub	sp, #56	@ 0x38
 80054d8:	af04      	add	r7, sp, #16
 80054da:	60f8      	str	r0, [r7, #12]
 80054dc:	60b9      	str	r1, [r7, #8]
 80054de:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80054e0:	2300      	movs	r3, #0
 80054e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80054e4:	f3ef 8305 	mrs	r3, IPSR
 80054e8:	617b      	str	r3, [r7, #20]
  return(result);
 80054ea:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d17e      	bne.n	80055ee <osThreadNew+0x11a>
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d07b      	beq.n	80055ee <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80054f6:	2380      	movs	r3, #128	@ 0x80
 80054f8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80054fa:	2318      	movs	r3, #24
 80054fc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80054fe:	2300      	movs	r3, #0
 8005500:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8005502:	f04f 33ff 	mov.w	r3, #4294967295
 8005506:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d045      	beq.n	800559a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d002      	beq.n	800551c <osThreadNew+0x48>
        name = attr->name;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	699b      	ldr	r3, [r3, #24]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d002      	beq.n	800552a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	699b      	ldr	r3, [r3, #24]
 8005528:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800552a:	69fb      	ldr	r3, [r7, #28]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d008      	beq.n	8005542 <osThreadNew+0x6e>
 8005530:	69fb      	ldr	r3, [r7, #28]
 8005532:	2b38      	cmp	r3, #56	@ 0x38
 8005534:	d805      	bhi.n	8005542 <osThreadNew+0x6e>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	f003 0301 	and.w	r3, r3, #1
 800553e:	2b00      	cmp	r3, #0
 8005540:	d001      	beq.n	8005546 <osThreadNew+0x72>
        return (NULL);
 8005542:	2300      	movs	r3, #0
 8005544:	e054      	b.n	80055f0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	695b      	ldr	r3, [r3, #20]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d003      	beq.n	8005556 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	695b      	ldr	r3, [r3, #20]
 8005552:	089b      	lsrs	r3, r3, #2
 8005554:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d00e      	beq.n	800557c <osThreadNew+0xa8>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	68db      	ldr	r3, [r3, #12]
 8005562:	2b5b      	cmp	r3, #91	@ 0x5b
 8005564:	d90a      	bls.n	800557c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800556a:	2b00      	cmp	r3, #0
 800556c:	d006      	beq.n	800557c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	695b      	ldr	r3, [r3, #20]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d002      	beq.n	800557c <osThreadNew+0xa8>
        mem = 1;
 8005576:	2301      	movs	r3, #1
 8005578:	61bb      	str	r3, [r7, #24]
 800557a:	e010      	b.n	800559e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d10c      	bne.n	800559e <osThreadNew+0xca>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	68db      	ldr	r3, [r3, #12]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d108      	bne.n	800559e <osThreadNew+0xca>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	691b      	ldr	r3, [r3, #16]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d104      	bne.n	800559e <osThreadNew+0xca>
          mem = 0;
 8005594:	2300      	movs	r3, #0
 8005596:	61bb      	str	r3, [r7, #24]
 8005598:	e001      	b.n	800559e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800559a:	2300      	movs	r3, #0
 800559c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800559e:	69bb      	ldr	r3, [r7, #24]
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d110      	bne.n	80055c6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80055a8:	687a      	ldr	r2, [r7, #4]
 80055aa:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80055ac:	9202      	str	r2, [sp, #8]
 80055ae:	9301      	str	r3, [sp, #4]
 80055b0:	69fb      	ldr	r3, [r7, #28]
 80055b2:	9300      	str	r3, [sp, #0]
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	6a3a      	ldr	r2, [r7, #32]
 80055b8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80055ba:	68f8      	ldr	r0, [r7, #12]
 80055bc:	f000 fe1a 	bl	80061f4 <xTaskCreateStatic>
 80055c0:	4603      	mov	r3, r0
 80055c2:	613b      	str	r3, [r7, #16]
 80055c4:	e013      	b.n	80055ee <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80055c6:	69bb      	ldr	r3, [r7, #24]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d110      	bne.n	80055ee <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80055cc:	6a3b      	ldr	r3, [r7, #32]
 80055ce:	b29a      	uxth	r2, r3
 80055d0:	f107 0310 	add.w	r3, r7, #16
 80055d4:	9301      	str	r3, [sp, #4]
 80055d6:	69fb      	ldr	r3, [r7, #28]
 80055d8:	9300      	str	r3, [sp, #0]
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80055de:	68f8      	ldr	r0, [r7, #12]
 80055e0:	f000 fe68 	bl	80062b4 <xTaskCreate>
 80055e4:	4603      	mov	r3, r0
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d001      	beq.n	80055ee <osThreadNew+0x11a>
            hTask = NULL;
 80055ea:	2300      	movs	r3, #0
 80055ec:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80055ee:	693b      	ldr	r3, [r7, #16]
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3728      	adds	r7, #40	@ 0x28
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}

080055f8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b084      	sub	sp, #16
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005600:	f3ef 8305 	mrs	r3, IPSR
 8005604:	60bb      	str	r3, [r7, #8]
  return(result);
 8005606:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005608:	2b00      	cmp	r3, #0
 800560a:	d003      	beq.n	8005614 <osDelay+0x1c>
    stat = osErrorISR;
 800560c:	f06f 0305 	mvn.w	r3, #5
 8005610:	60fb      	str	r3, [r7, #12]
 8005612:	e007      	b.n	8005624 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005614:	2300      	movs	r3, #0
 8005616:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d002      	beq.n	8005624 <osDelay+0x2c>
      vTaskDelay(ticks);
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f000 ff8e 	bl	8006540 <vTaskDelay>
    }
  }

  return (stat);
 8005624:	68fb      	ldr	r3, [r7, #12]
}
 8005626:	4618      	mov	r0, r3
 8005628:	3710      	adds	r7, #16
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}
	...

08005630 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005630:	b480      	push	{r7}
 8005632:	b085      	sub	sp, #20
 8005634:	af00      	add	r7, sp, #0
 8005636:	60f8      	str	r0, [r7, #12]
 8005638:	60b9      	str	r1, [r7, #8]
 800563a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	4a07      	ldr	r2, [pc, #28]	@ (800565c <vApplicationGetIdleTaskMemory+0x2c>)
 8005640:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	4a06      	ldr	r2, [pc, #24]	@ (8005660 <vApplicationGetIdleTaskMemory+0x30>)
 8005646:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2280      	movs	r2, #128	@ 0x80
 800564c:	601a      	str	r2, [r3, #0]
}
 800564e:	bf00      	nop
 8005650:	3714      	adds	r7, #20
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr
 800565a:	bf00      	nop
 800565c:	200003d8 	.word	0x200003d8
 8005660:	20000434 	.word	0x20000434

08005664 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005664:	b480      	push	{r7}
 8005666:	b085      	sub	sp, #20
 8005668:	af00      	add	r7, sp, #0
 800566a:	60f8      	str	r0, [r7, #12]
 800566c:	60b9      	str	r1, [r7, #8]
 800566e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	4a07      	ldr	r2, [pc, #28]	@ (8005690 <vApplicationGetTimerTaskMemory+0x2c>)
 8005674:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	4a06      	ldr	r2, [pc, #24]	@ (8005694 <vApplicationGetTimerTaskMemory+0x30>)
 800567a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005682:	601a      	str	r2, [r3, #0]
}
 8005684:	bf00      	nop
 8005686:	3714      	adds	r7, #20
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr
 8005690:	20000634 	.word	0x20000634
 8005694:	20000690 	.word	0x20000690

08005698 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005698:	b480      	push	{r7}
 800569a:	b083      	sub	sp, #12
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f103 0208 	add.w	r2, r3, #8
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f04f 32ff 	mov.w	r2, #4294967295
 80056b0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f103 0208 	add.w	r2, r3, #8
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	f103 0208 	add.w	r2, r3, #8
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80056cc:	bf00      	nop
 80056ce:	370c      	adds	r7, #12
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr

080056d8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80056d8:	b480      	push	{r7}
 80056da:	b083      	sub	sp, #12
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2200      	movs	r2, #0
 80056e4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80056e6:	bf00      	nop
 80056e8:	370c      	adds	r7, #12
 80056ea:	46bd      	mov	sp, r7
 80056ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f0:	4770      	bx	lr

080056f2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80056f2:	b480      	push	{r7}
 80056f4:	b085      	sub	sp, #20
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	6078      	str	r0, [r7, #4]
 80056fa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	68fa      	ldr	r2, [r7, #12]
 8005706:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	689a      	ldr	r2, [r3, #8]
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	683a      	ldr	r2, [r7, #0]
 8005716:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	683a      	ldr	r2, [r7, #0]
 800571c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	1c5a      	adds	r2, r3, #1
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	601a      	str	r2, [r3, #0]
}
 800572e:	bf00      	nop
 8005730:	3714      	adds	r7, #20
 8005732:	46bd      	mov	sp, r7
 8005734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005738:	4770      	bx	lr

0800573a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800573a:	b480      	push	{r7}
 800573c:	b085      	sub	sp, #20
 800573e:	af00      	add	r7, sp, #0
 8005740:	6078      	str	r0, [r7, #4]
 8005742:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005750:	d103      	bne.n	800575a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	691b      	ldr	r3, [r3, #16]
 8005756:	60fb      	str	r3, [r7, #12]
 8005758:	e00c      	b.n	8005774 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	3308      	adds	r3, #8
 800575e:	60fb      	str	r3, [r7, #12]
 8005760:	e002      	b.n	8005768 <vListInsert+0x2e>
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	60fb      	str	r3, [r7, #12]
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	68ba      	ldr	r2, [r7, #8]
 8005770:	429a      	cmp	r2, r3
 8005772:	d2f6      	bcs.n	8005762 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	685a      	ldr	r2, [r3, #4]
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	683a      	ldr	r2, [r7, #0]
 8005782:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	68fa      	ldr	r2, [r7, #12]
 8005788:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	683a      	ldr	r2, [r7, #0]
 800578e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	1c5a      	adds	r2, r3, #1
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	601a      	str	r2, [r3, #0]
}
 80057a0:	bf00      	nop
 80057a2:	3714      	adds	r7, #20
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr

080057ac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80057ac:	b480      	push	{r7}
 80057ae:	b085      	sub	sp, #20
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	691b      	ldr	r3, [r3, #16]
 80057b8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	6892      	ldr	r2, [r2, #8]
 80057c2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	6852      	ldr	r2, [r2, #4]
 80057cc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	687a      	ldr	r2, [r7, #4]
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d103      	bne.n	80057e0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	689a      	ldr	r2, [r3, #8]
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2200      	movs	r2, #0
 80057e4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	1e5a      	subs	r2, r3, #1
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3714      	adds	r7, #20
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr

08005800 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b084      	sub	sp, #16
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d10b      	bne.n	800582c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005814:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005818:	f383 8811 	msr	BASEPRI, r3
 800581c:	f3bf 8f6f 	isb	sy
 8005820:	f3bf 8f4f 	dsb	sy
 8005824:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005826:	bf00      	nop
 8005828:	bf00      	nop
 800582a:	e7fd      	b.n	8005828 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800582c:	f002 f87c 	bl	8007928 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005838:	68f9      	ldr	r1, [r7, #12]
 800583a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800583c:	fb01 f303 	mul.w	r3, r1, r3
 8005840:	441a      	add	r2, r3
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2200      	movs	r2, #0
 800584a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681a      	ldr	r2, [r3, #0]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800585c:	3b01      	subs	r3, #1
 800585e:	68f9      	ldr	r1, [r7, #12]
 8005860:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005862:	fb01 f303 	mul.w	r3, r1, r3
 8005866:	441a      	add	r2, r3
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	22ff      	movs	r2, #255	@ 0xff
 8005870:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	22ff      	movs	r2, #255	@ 0xff
 8005878:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d114      	bne.n	80058ac <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	691b      	ldr	r3, [r3, #16]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d01a      	beq.n	80058c0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	3310      	adds	r3, #16
 800588e:	4618      	mov	r0, r3
 8005890:	f001 f91a 	bl	8006ac8 <xTaskRemoveFromEventList>
 8005894:	4603      	mov	r3, r0
 8005896:	2b00      	cmp	r3, #0
 8005898:	d012      	beq.n	80058c0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800589a:	4b0d      	ldr	r3, [pc, #52]	@ (80058d0 <xQueueGenericReset+0xd0>)
 800589c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80058a0:	601a      	str	r2, [r3, #0]
 80058a2:	f3bf 8f4f 	dsb	sy
 80058a6:	f3bf 8f6f 	isb	sy
 80058aa:	e009      	b.n	80058c0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	3310      	adds	r3, #16
 80058b0:	4618      	mov	r0, r3
 80058b2:	f7ff fef1 	bl	8005698 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	3324      	adds	r3, #36	@ 0x24
 80058ba:	4618      	mov	r0, r3
 80058bc:	f7ff feec 	bl	8005698 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80058c0:	f002 f864 	bl	800798c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80058c4:	2301      	movs	r3, #1
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3710      	adds	r7, #16
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}
 80058ce:	bf00      	nop
 80058d0:	e000ed04 	.word	0xe000ed04

080058d4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b08e      	sub	sp, #56	@ 0x38
 80058d8:	af02      	add	r7, sp, #8
 80058da:	60f8      	str	r0, [r7, #12]
 80058dc:	60b9      	str	r1, [r7, #8]
 80058de:	607a      	str	r2, [r7, #4]
 80058e0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d10b      	bne.n	8005900 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80058e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058ec:	f383 8811 	msr	BASEPRI, r3
 80058f0:	f3bf 8f6f 	isb	sy
 80058f4:	f3bf 8f4f 	dsb	sy
 80058f8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80058fa:	bf00      	nop
 80058fc:	bf00      	nop
 80058fe:	e7fd      	b.n	80058fc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d10b      	bne.n	800591e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005906:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800590a:	f383 8811 	msr	BASEPRI, r3
 800590e:	f3bf 8f6f 	isb	sy
 8005912:	f3bf 8f4f 	dsb	sy
 8005916:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005918:	bf00      	nop
 800591a:	bf00      	nop
 800591c:	e7fd      	b.n	800591a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d002      	beq.n	800592a <xQueueGenericCreateStatic+0x56>
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d001      	beq.n	800592e <xQueueGenericCreateStatic+0x5a>
 800592a:	2301      	movs	r3, #1
 800592c:	e000      	b.n	8005930 <xQueueGenericCreateStatic+0x5c>
 800592e:	2300      	movs	r3, #0
 8005930:	2b00      	cmp	r3, #0
 8005932:	d10b      	bne.n	800594c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005934:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005938:	f383 8811 	msr	BASEPRI, r3
 800593c:	f3bf 8f6f 	isb	sy
 8005940:	f3bf 8f4f 	dsb	sy
 8005944:	623b      	str	r3, [r7, #32]
}
 8005946:	bf00      	nop
 8005948:	bf00      	nop
 800594a:	e7fd      	b.n	8005948 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d102      	bne.n	8005958 <xQueueGenericCreateStatic+0x84>
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d101      	bne.n	800595c <xQueueGenericCreateStatic+0x88>
 8005958:	2301      	movs	r3, #1
 800595a:	e000      	b.n	800595e <xQueueGenericCreateStatic+0x8a>
 800595c:	2300      	movs	r3, #0
 800595e:	2b00      	cmp	r3, #0
 8005960:	d10b      	bne.n	800597a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005962:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005966:	f383 8811 	msr	BASEPRI, r3
 800596a:	f3bf 8f6f 	isb	sy
 800596e:	f3bf 8f4f 	dsb	sy
 8005972:	61fb      	str	r3, [r7, #28]
}
 8005974:	bf00      	nop
 8005976:	bf00      	nop
 8005978:	e7fd      	b.n	8005976 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800597a:	2350      	movs	r3, #80	@ 0x50
 800597c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	2b50      	cmp	r3, #80	@ 0x50
 8005982:	d00b      	beq.n	800599c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005984:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005988:	f383 8811 	msr	BASEPRI, r3
 800598c:	f3bf 8f6f 	isb	sy
 8005990:	f3bf 8f4f 	dsb	sy
 8005994:	61bb      	str	r3, [r7, #24]
}
 8005996:	bf00      	nop
 8005998:	bf00      	nop
 800599a:	e7fd      	b.n	8005998 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800599c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80059a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d00d      	beq.n	80059c4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80059a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059aa:	2201      	movs	r2, #1
 80059ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80059b0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80059b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059b6:	9300      	str	r3, [sp, #0]
 80059b8:	4613      	mov	r3, r2
 80059ba:	687a      	ldr	r2, [r7, #4]
 80059bc:	68b9      	ldr	r1, [r7, #8]
 80059be:	68f8      	ldr	r0, [r7, #12]
 80059c0:	f000 f805 	bl	80059ce <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80059c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3730      	adds	r7, #48	@ 0x30
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}

080059ce <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80059ce:	b580      	push	{r7, lr}
 80059d0:	b084      	sub	sp, #16
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	60f8      	str	r0, [r7, #12]
 80059d6:	60b9      	str	r1, [r7, #8]
 80059d8:	607a      	str	r2, [r7, #4]
 80059da:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d103      	bne.n	80059ea <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80059e2:	69bb      	ldr	r3, [r7, #24]
 80059e4:	69ba      	ldr	r2, [r7, #24]
 80059e6:	601a      	str	r2, [r3, #0]
 80059e8:	e002      	b.n	80059f0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80059ea:	69bb      	ldr	r3, [r7, #24]
 80059ec:	687a      	ldr	r2, [r7, #4]
 80059ee:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80059f0:	69bb      	ldr	r3, [r7, #24]
 80059f2:	68fa      	ldr	r2, [r7, #12]
 80059f4:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80059f6:	69bb      	ldr	r3, [r7, #24]
 80059f8:	68ba      	ldr	r2, [r7, #8]
 80059fa:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80059fc:	2101      	movs	r1, #1
 80059fe:	69b8      	ldr	r0, [r7, #24]
 8005a00:	f7ff fefe 	bl	8005800 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005a04:	69bb      	ldr	r3, [r7, #24]
 8005a06:	78fa      	ldrb	r2, [r7, #3]
 8005a08:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005a0c:	bf00      	nop
 8005a0e:	3710      	adds	r7, #16
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}

08005a14 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b08e      	sub	sp, #56	@ 0x38
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	60f8      	str	r0, [r7, #12]
 8005a1c:	60b9      	str	r1, [r7, #8]
 8005a1e:	607a      	str	r2, [r7, #4]
 8005a20:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005a22:	2300      	movs	r3, #0
 8005a24:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005a2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d10b      	bne.n	8005a48 <xQueueGenericSend+0x34>
	__asm volatile
 8005a30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a34:	f383 8811 	msr	BASEPRI, r3
 8005a38:	f3bf 8f6f 	isb	sy
 8005a3c:	f3bf 8f4f 	dsb	sy
 8005a40:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005a42:	bf00      	nop
 8005a44:	bf00      	nop
 8005a46:	e7fd      	b.n	8005a44 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d103      	bne.n	8005a56 <xQueueGenericSend+0x42>
 8005a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d101      	bne.n	8005a5a <xQueueGenericSend+0x46>
 8005a56:	2301      	movs	r3, #1
 8005a58:	e000      	b.n	8005a5c <xQueueGenericSend+0x48>
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d10b      	bne.n	8005a78 <xQueueGenericSend+0x64>
	__asm volatile
 8005a60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a64:	f383 8811 	msr	BASEPRI, r3
 8005a68:	f3bf 8f6f 	isb	sy
 8005a6c:	f3bf 8f4f 	dsb	sy
 8005a70:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005a72:	bf00      	nop
 8005a74:	bf00      	nop
 8005a76:	e7fd      	b.n	8005a74 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	2b02      	cmp	r3, #2
 8005a7c:	d103      	bne.n	8005a86 <xQueueGenericSend+0x72>
 8005a7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d101      	bne.n	8005a8a <xQueueGenericSend+0x76>
 8005a86:	2301      	movs	r3, #1
 8005a88:	e000      	b.n	8005a8c <xQueueGenericSend+0x78>
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d10b      	bne.n	8005aa8 <xQueueGenericSend+0x94>
	__asm volatile
 8005a90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a94:	f383 8811 	msr	BASEPRI, r3
 8005a98:	f3bf 8f6f 	isb	sy
 8005a9c:	f3bf 8f4f 	dsb	sy
 8005aa0:	623b      	str	r3, [r7, #32]
}
 8005aa2:	bf00      	nop
 8005aa4:	bf00      	nop
 8005aa6:	e7fd      	b.n	8005aa4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005aa8:	f001 f9ce 	bl	8006e48 <xTaskGetSchedulerState>
 8005aac:	4603      	mov	r3, r0
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d102      	bne.n	8005ab8 <xQueueGenericSend+0xa4>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d101      	bne.n	8005abc <xQueueGenericSend+0xa8>
 8005ab8:	2301      	movs	r3, #1
 8005aba:	e000      	b.n	8005abe <xQueueGenericSend+0xaa>
 8005abc:	2300      	movs	r3, #0
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d10b      	bne.n	8005ada <xQueueGenericSend+0xc6>
	__asm volatile
 8005ac2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ac6:	f383 8811 	msr	BASEPRI, r3
 8005aca:	f3bf 8f6f 	isb	sy
 8005ace:	f3bf 8f4f 	dsb	sy
 8005ad2:	61fb      	str	r3, [r7, #28]
}
 8005ad4:	bf00      	nop
 8005ad6:	bf00      	nop
 8005ad8:	e7fd      	b.n	8005ad6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005ada:	f001 ff25 	bl	8007928 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ae0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ae4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	d302      	bcc.n	8005af0 <xQueueGenericSend+0xdc>
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	2b02      	cmp	r3, #2
 8005aee:	d129      	bne.n	8005b44 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005af0:	683a      	ldr	r2, [r7, #0]
 8005af2:	68b9      	ldr	r1, [r7, #8]
 8005af4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005af6:	f000 fa0f 	bl	8005f18 <prvCopyDataToQueue>
 8005afa:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005afc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d010      	beq.n	8005b26 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b06:	3324      	adds	r3, #36	@ 0x24
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f000 ffdd 	bl	8006ac8 <xTaskRemoveFromEventList>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d013      	beq.n	8005b3c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005b14:	4b3f      	ldr	r3, [pc, #252]	@ (8005c14 <xQueueGenericSend+0x200>)
 8005b16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b1a:	601a      	str	r2, [r3, #0]
 8005b1c:	f3bf 8f4f 	dsb	sy
 8005b20:	f3bf 8f6f 	isb	sy
 8005b24:	e00a      	b.n	8005b3c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005b26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d007      	beq.n	8005b3c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005b2c:	4b39      	ldr	r3, [pc, #228]	@ (8005c14 <xQueueGenericSend+0x200>)
 8005b2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b32:	601a      	str	r2, [r3, #0]
 8005b34:	f3bf 8f4f 	dsb	sy
 8005b38:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005b3c:	f001 ff26 	bl	800798c <vPortExitCritical>
				return pdPASS;
 8005b40:	2301      	movs	r3, #1
 8005b42:	e063      	b.n	8005c0c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d103      	bne.n	8005b52 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005b4a:	f001 ff1f 	bl	800798c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	e05c      	b.n	8005c0c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005b52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d106      	bne.n	8005b66 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005b58:	f107 0314 	add.w	r3, r7, #20
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	f001 f817 	bl	8006b90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005b62:	2301      	movs	r3, #1
 8005b64:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005b66:	f001 ff11 	bl	800798c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005b6a:	f000 fd87 	bl	800667c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005b6e:	f001 fedb 	bl	8007928 <vPortEnterCritical>
 8005b72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b74:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005b78:	b25b      	sxtb	r3, r3
 8005b7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b7e:	d103      	bne.n	8005b88 <xQueueGenericSend+0x174>
 8005b80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b82:	2200      	movs	r2, #0
 8005b84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b8a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005b8e:	b25b      	sxtb	r3, r3
 8005b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b94:	d103      	bne.n	8005b9e <xQueueGenericSend+0x18a>
 8005b96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b98:	2200      	movs	r2, #0
 8005b9a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005b9e:	f001 fef5 	bl	800798c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005ba2:	1d3a      	adds	r2, r7, #4
 8005ba4:	f107 0314 	add.w	r3, r7, #20
 8005ba8:	4611      	mov	r1, r2
 8005baa:	4618      	mov	r0, r3
 8005bac:	f001 f806 	bl	8006bbc <xTaskCheckForTimeOut>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d124      	bne.n	8005c00 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005bb6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005bb8:	f000 faa6 	bl	8006108 <prvIsQueueFull>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d018      	beq.n	8005bf4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005bc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bc4:	3310      	adds	r3, #16
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	4611      	mov	r1, r2
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f000 ff2a 	bl	8006a24 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005bd0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005bd2:	f000 fa31 	bl	8006038 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005bd6:	f000 fd5f 	bl	8006698 <xTaskResumeAll>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	f47f af7c 	bne.w	8005ada <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005be2:	4b0c      	ldr	r3, [pc, #48]	@ (8005c14 <xQueueGenericSend+0x200>)
 8005be4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005be8:	601a      	str	r2, [r3, #0]
 8005bea:	f3bf 8f4f 	dsb	sy
 8005bee:	f3bf 8f6f 	isb	sy
 8005bf2:	e772      	b.n	8005ada <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005bf4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005bf6:	f000 fa1f 	bl	8006038 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005bfa:	f000 fd4d 	bl	8006698 <xTaskResumeAll>
 8005bfe:	e76c      	b.n	8005ada <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005c00:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005c02:	f000 fa19 	bl	8006038 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005c06:	f000 fd47 	bl	8006698 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005c0a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3738      	adds	r7, #56	@ 0x38
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}
 8005c14:	e000ed04 	.word	0xe000ed04

08005c18 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b090      	sub	sp, #64	@ 0x40
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	60f8      	str	r0, [r7, #12]
 8005c20:	60b9      	str	r1, [r7, #8]
 8005c22:	607a      	str	r2, [r7, #4]
 8005c24:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8005c2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d10b      	bne.n	8005c48 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005c30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c34:	f383 8811 	msr	BASEPRI, r3
 8005c38:	f3bf 8f6f 	isb	sy
 8005c3c:	f3bf 8f4f 	dsb	sy
 8005c40:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005c42:	bf00      	nop
 8005c44:	bf00      	nop
 8005c46:	e7fd      	b.n	8005c44 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d103      	bne.n	8005c56 <xQueueGenericSendFromISR+0x3e>
 8005c4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d101      	bne.n	8005c5a <xQueueGenericSendFromISR+0x42>
 8005c56:	2301      	movs	r3, #1
 8005c58:	e000      	b.n	8005c5c <xQueueGenericSendFromISR+0x44>
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d10b      	bne.n	8005c78 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005c60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c64:	f383 8811 	msr	BASEPRI, r3
 8005c68:	f3bf 8f6f 	isb	sy
 8005c6c:	f3bf 8f4f 	dsb	sy
 8005c70:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005c72:	bf00      	nop
 8005c74:	bf00      	nop
 8005c76:	e7fd      	b.n	8005c74 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	2b02      	cmp	r3, #2
 8005c7c:	d103      	bne.n	8005c86 <xQueueGenericSendFromISR+0x6e>
 8005c7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c82:	2b01      	cmp	r3, #1
 8005c84:	d101      	bne.n	8005c8a <xQueueGenericSendFromISR+0x72>
 8005c86:	2301      	movs	r3, #1
 8005c88:	e000      	b.n	8005c8c <xQueueGenericSendFromISR+0x74>
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d10b      	bne.n	8005ca8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005c90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c94:	f383 8811 	msr	BASEPRI, r3
 8005c98:	f3bf 8f6f 	isb	sy
 8005c9c:	f3bf 8f4f 	dsb	sy
 8005ca0:	623b      	str	r3, [r7, #32]
}
 8005ca2:	bf00      	nop
 8005ca4:	bf00      	nop
 8005ca6:	e7fd      	b.n	8005ca4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005ca8:	f001 ff1e 	bl	8007ae8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005cac:	f3ef 8211 	mrs	r2, BASEPRI
 8005cb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cb4:	f383 8811 	msr	BASEPRI, r3
 8005cb8:	f3bf 8f6f 	isb	sy
 8005cbc:	f3bf 8f4f 	dsb	sy
 8005cc0:	61fa      	str	r2, [r7, #28]
 8005cc2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005cc4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005cc6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005cc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ccc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d302      	bcc.n	8005cda <xQueueGenericSendFromISR+0xc2>
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	2b02      	cmp	r3, #2
 8005cd8:	d12f      	bne.n	8005d3a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005cda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cdc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005ce0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ce4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ce6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ce8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005cea:	683a      	ldr	r2, [r7, #0]
 8005cec:	68b9      	ldr	r1, [r7, #8]
 8005cee:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005cf0:	f000 f912 	bl	8005f18 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005cf4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cfc:	d112      	bne.n	8005d24 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005cfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d016      	beq.n	8005d34 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d08:	3324      	adds	r3, #36	@ 0x24
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f000 fedc 	bl	8006ac8 <xTaskRemoveFromEventList>
 8005d10:	4603      	mov	r3, r0
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d00e      	beq.n	8005d34 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d00b      	beq.n	8005d34 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	601a      	str	r2, [r3, #0]
 8005d22:	e007      	b.n	8005d34 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005d24:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005d28:	3301      	adds	r3, #1
 8005d2a:	b2db      	uxtb	r3, r3
 8005d2c:	b25a      	sxtb	r2, r3
 8005d2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005d34:	2301      	movs	r3, #1
 8005d36:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005d38:	e001      	b.n	8005d3e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d40:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005d48:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005d4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3740      	adds	r7, #64	@ 0x40
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}

08005d54 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b08c      	sub	sp, #48	@ 0x30
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	60f8      	str	r0, [r7, #12]
 8005d5c:	60b9      	str	r1, [r7, #8]
 8005d5e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005d60:	2300      	movs	r3, #0
 8005d62:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005d68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d10b      	bne.n	8005d86 <xQueueReceive+0x32>
	__asm volatile
 8005d6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d72:	f383 8811 	msr	BASEPRI, r3
 8005d76:	f3bf 8f6f 	isb	sy
 8005d7a:	f3bf 8f4f 	dsb	sy
 8005d7e:	623b      	str	r3, [r7, #32]
}
 8005d80:	bf00      	nop
 8005d82:	bf00      	nop
 8005d84:	e7fd      	b.n	8005d82 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d103      	bne.n	8005d94 <xQueueReceive+0x40>
 8005d8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d101      	bne.n	8005d98 <xQueueReceive+0x44>
 8005d94:	2301      	movs	r3, #1
 8005d96:	e000      	b.n	8005d9a <xQueueReceive+0x46>
 8005d98:	2300      	movs	r3, #0
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d10b      	bne.n	8005db6 <xQueueReceive+0x62>
	__asm volatile
 8005d9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005da2:	f383 8811 	msr	BASEPRI, r3
 8005da6:	f3bf 8f6f 	isb	sy
 8005daa:	f3bf 8f4f 	dsb	sy
 8005dae:	61fb      	str	r3, [r7, #28]
}
 8005db0:	bf00      	nop
 8005db2:	bf00      	nop
 8005db4:	e7fd      	b.n	8005db2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005db6:	f001 f847 	bl	8006e48 <xTaskGetSchedulerState>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d102      	bne.n	8005dc6 <xQueueReceive+0x72>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d101      	bne.n	8005dca <xQueueReceive+0x76>
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	e000      	b.n	8005dcc <xQueueReceive+0x78>
 8005dca:	2300      	movs	r3, #0
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d10b      	bne.n	8005de8 <xQueueReceive+0x94>
	__asm volatile
 8005dd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dd4:	f383 8811 	msr	BASEPRI, r3
 8005dd8:	f3bf 8f6f 	isb	sy
 8005ddc:	f3bf 8f4f 	dsb	sy
 8005de0:	61bb      	str	r3, [r7, #24]
}
 8005de2:	bf00      	nop
 8005de4:	bf00      	nop
 8005de6:	e7fd      	b.n	8005de4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005de8:	f001 fd9e 	bl	8007928 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005dec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005df0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d01f      	beq.n	8005e38 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005df8:	68b9      	ldr	r1, [r7, #8]
 8005dfa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005dfc:	f000 f8f6 	bl	8005fec <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e02:	1e5a      	subs	r2, r3, #1
 8005e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e06:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e0a:	691b      	ldr	r3, [r3, #16]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d00f      	beq.n	8005e30 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e12:	3310      	adds	r3, #16
 8005e14:	4618      	mov	r0, r3
 8005e16:	f000 fe57 	bl	8006ac8 <xTaskRemoveFromEventList>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d007      	beq.n	8005e30 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005e20:	4b3c      	ldr	r3, [pc, #240]	@ (8005f14 <xQueueReceive+0x1c0>)
 8005e22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e26:	601a      	str	r2, [r3, #0]
 8005e28:	f3bf 8f4f 	dsb	sy
 8005e2c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005e30:	f001 fdac 	bl	800798c <vPortExitCritical>
				return pdPASS;
 8005e34:	2301      	movs	r3, #1
 8005e36:	e069      	b.n	8005f0c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d103      	bne.n	8005e46 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005e3e:	f001 fda5 	bl	800798c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005e42:	2300      	movs	r3, #0
 8005e44:	e062      	b.n	8005f0c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005e46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d106      	bne.n	8005e5a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005e4c:	f107 0310 	add.w	r3, r7, #16
 8005e50:	4618      	mov	r0, r3
 8005e52:	f000 fe9d 	bl	8006b90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005e56:	2301      	movs	r3, #1
 8005e58:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005e5a:	f001 fd97 	bl	800798c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005e5e:	f000 fc0d 	bl	800667c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005e62:	f001 fd61 	bl	8007928 <vPortEnterCritical>
 8005e66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e68:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005e6c:	b25b      	sxtb	r3, r3
 8005e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e72:	d103      	bne.n	8005e7c <xQueueReceive+0x128>
 8005e74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e76:	2200      	movs	r2, #0
 8005e78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e7e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005e82:	b25b      	sxtb	r3, r3
 8005e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e88:	d103      	bne.n	8005e92 <xQueueReceive+0x13e>
 8005e8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005e92:	f001 fd7b 	bl	800798c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005e96:	1d3a      	adds	r2, r7, #4
 8005e98:	f107 0310 	add.w	r3, r7, #16
 8005e9c:	4611      	mov	r1, r2
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f000 fe8c 	bl	8006bbc <xTaskCheckForTimeOut>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d123      	bne.n	8005ef2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005eaa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005eac:	f000 f916 	bl	80060dc <prvIsQueueEmpty>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d017      	beq.n	8005ee6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005eb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eb8:	3324      	adds	r3, #36	@ 0x24
 8005eba:	687a      	ldr	r2, [r7, #4]
 8005ebc:	4611      	mov	r1, r2
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f000 fdb0 	bl	8006a24 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005ec4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005ec6:	f000 f8b7 	bl	8006038 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005eca:	f000 fbe5 	bl	8006698 <xTaskResumeAll>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d189      	bne.n	8005de8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005ed4:	4b0f      	ldr	r3, [pc, #60]	@ (8005f14 <xQueueReceive+0x1c0>)
 8005ed6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005eda:	601a      	str	r2, [r3, #0]
 8005edc:	f3bf 8f4f 	dsb	sy
 8005ee0:	f3bf 8f6f 	isb	sy
 8005ee4:	e780      	b.n	8005de8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005ee6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005ee8:	f000 f8a6 	bl	8006038 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005eec:	f000 fbd4 	bl	8006698 <xTaskResumeAll>
 8005ef0:	e77a      	b.n	8005de8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005ef2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005ef4:	f000 f8a0 	bl	8006038 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005ef8:	f000 fbce 	bl	8006698 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005efc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005efe:	f000 f8ed 	bl	80060dc <prvIsQueueEmpty>
 8005f02:	4603      	mov	r3, r0
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	f43f af6f 	beq.w	8005de8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005f0a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3730      	adds	r7, #48	@ 0x30
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}
 8005f14:	e000ed04 	.word	0xe000ed04

08005f18 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b086      	sub	sp, #24
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	60f8      	str	r0, [r7, #12]
 8005f20:	60b9      	str	r1, [r7, #8]
 8005f22:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005f24:	2300      	movs	r3, #0
 8005f26:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f2c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d10d      	bne.n	8005f52 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d14d      	bne.n	8005fda <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	4618      	mov	r0, r3
 8005f44:	f000 ff9e 	bl	8006e84 <xTaskPriorityDisinherit>
 8005f48:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	609a      	str	r2, [r3, #8]
 8005f50:	e043      	b.n	8005fda <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d119      	bne.n	8005f8c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	6858      	ldr	r0, [r3, #4]
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f60:	461a      	mov	r2, r3
 8005f62:	68b9      	ldr	r1, [r7, #8]
 8005f64:	f002 f846 	bl	8007ff4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	685a      	ldr	r2, [r3, #4]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f70:	441a      	add	r2, r3
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	685a      	ldr	r2, [r3, #4]
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d32b      	bcc.n	8005fda <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681a      	ldr	r2, [r3, #0]
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	605a      	str	r2, [r3, #4]
 8005f8a:	e026      	b.n	8005fda <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	68d8      	ldr	r0, [r3, #12]
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f94:	461a      	mov	r2, r3
 8005f96:	68b9      	ldr	r1, [r7, #8]
 8005f98:	f002 f82c 	bl	8007ff4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	68da      	ldr	r2, [r3, #12]
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fa4:	425b      	negs	r3, r3
 8005fa6:	441a      	add	r2, r3
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	68da      	ldr	r2, [r3, #12]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d207      	bcs.n	8005fc8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	689a      	ldr	r2, [r3, #8]
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fc0:	425b      	negs	r3, r3
 8005fc2:	441a      	add	r2, r3
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2b02      	cmp	r3, #2
 8005fcc:	d105      	bne.n	8005fda <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d002      	beq.n	8005fda <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	3b01      	subs	r3, #1
 8005fd8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	1c5a      	adds	r2, r3, #1
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005fe2:	697b      	ldr	r3, [r7, #20]
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	3718      	adds	r7, #24
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}

08005fec <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b082      	sub	sp, #8
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
 8005ff4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d018      	beq.n	8006030 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	68da      	ldr	r2, [r3, #12]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006006:	441a      	add	r2, r3
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	68da      	ldr	r2, [r3, #12]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	429a      	cmp	r2, r3
 8006016:	d303      	bcc.n	8006020 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	68d9      	ldr	r1, [r3, #12]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006028:	461a      	mov	r2, r3
 800602a:	6838      	ldr	r0, [r7, #0]
 800602c:	f001 ffe2 	bl	8007ff4 <memcpy>
	}
}
 8006030:	bf00      	nop
 8006032:	3708      	adds	r7, #8
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}

08006038 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b084      	sub	sp, #16
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006040:	f001 fc72 	bl	8007928 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800604a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800604c:	e011      	b.n	8006072 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006052:	2b00      	cmp	r3, #0
 8006054:	d012      	beq.n	800607c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	3324      	adds	r3, #36	@ 0x24
 800605a:	4618      	mov	r0, r3
 800605c:	f000 fd34 	bl	8006ac8 <xTaskRemoveFromEventList>
 8006060:	4603      	mov	r3, r0
 8006062:	2b00      	cmp	r3, #0
 8006064:	d001      	beq.n	800606a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006066:	f000 fe0d 	bl	8006c84 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800606a:	7bfb      	ldrb	r3, [r7, #15]
 800606c:	3b01      	subs	r3, #1
 800606e:	b2db      	uxtb	r3, r3
 8006070:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006072:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006076:	2b00      	cmp	r3, #0
 8006078:	dce9      	bgt.n	800604e <prvUnlockQueue+0x16>
 800607a:	e000      	b.n	800607e <prvUnlockQueue+0x46>
					break;
 800607c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	22ff      	movs	r2, #255	@ 0xff
 8006082:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006086:	f001 fc81 	bl	800798c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800608a:	f001 fc4d 	bl	8007928 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006094:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006096:	e011      	b.n	80060bc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	691b      	ldr	r3, [r3, #16]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d012      	beq.n	80060c6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	3310      	adds	r3, #16
 80060a4:	4618      	mov	r0, r3
 80060a6:	f000 fd0f 	bl	8006ac8 <xTaskRemoveFromEventList>
 80060aa:	4603      	mov	r3, r0
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d001      	beq.n	80060b4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80060b0:	f000 fde8 	bl	8006c84 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80060b4:	7bbb      	ldrb	r3, [r7, #14]
 80060b6:	3b01      	subs	r3, #1
 80060b8:	b2db      	uxtb	r3, r3
 80060ba:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80060bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	dce9      	bgt.n	8006098 <prvUnlockQueue+0x60>
 80060c4:	e000      	b.n	80060c8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80060c6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	22ff      	movs	r2, #255	@ 0xff
 80060cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80060d0:	f001 fc5c 	bl	800798c <vPortExitCritical>
}
 80060d4:	bf00      	nop
 80060d6:	3710      	adds	r7, #16
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}

080060dc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b084      	sub	sp, #16
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80060e4:	f001 fc20 	bl	8007928 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d102      	bne.n	80060f6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80060f0:	2301      	movs	r3, #1
 80060f2:	60fb      	str	r3, [r7, #12]
 80060f4:	e001      	b.n	80060fa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80060f6:	2300      	movs	r3, #0
 80060f8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80060fa:	f001 fc47 	bl	800798c <vPortExitCritical>

	return xReturn;
 80060fe:	68fb      	ldr	r3, [r7, #12]
}
 8006100:	4618      	mov	r0, r3
 8006102:	3710      	adds	r7, #16
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}

08006108 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b084      	sub	sp, #16
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006110:	f001 fc0a 	bl	8007928 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800611c:	429a      	cmp	r2, r3
 800611e:	d102      	bne.n	8006126 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006120:	2301      	movs	r3, #1
 8006122:	60fb      	str	r3, [r7, #12]
 8006124:	e001      	b.n	800612a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006126:	2300      	movs	r3, #0
 8006128:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800612a:	f001 fc2f 	bl	800798c <vPortExitCritical>

	return xReturn;
 800612e:	68fb      	ldr	r3, [r7, #12]
}
 8006130:	4618      	mov	r0, r3
 8006132:	3710      	adds	r7, #16
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}

08006138 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006138:	b480      	push	{r7}
 800613a:	b085      	sub	sp, #20
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006142:	2300      	movs	r3, #0
 8006144:	60fb      	str	r3, [r7, #12]
 8006146:	e014      	b.n	8006172 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006148:	4a0f      	ldr	r2, [pc, #60]	@ (8006188 <vQueueAddToRegistry+0x50>)
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d10b      	bne.n	800616c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006154:	490c      	ldr	r1, [pc, #48]	@ (8006188 <vQueueAddToRegistry+0x50>)
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	683a      	ldr	r2, [r7, #0]
 800615a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800615e:	4a0a      	ldr	r2, [pc, #40]	@ (8006188 <vQueueAddToRegistry+0x50>)
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	00db      	lsls	r3, r3, #3
 8006164:	4413      	add	r3, r2
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800616a:	e006      	b.n	800617a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	3301      	adds	r3, #1
 8006170:	60fb      	str	r3, [r7, #12]
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2b07      	cmp	r3, #7
 8006176:	d9e7      	bls.n	8006148 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006178:	bf00      	nop
 800617a:	bf00      	nop
 800617c:	3714      	adds	r7, #20
 800617e:	46bd      	mov	sp, r7
 8006180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006184:	4770      	bx	lr
 8006186:	bf00      	nop
 8006188:	20000a90 	.word	0x20000a90

0800618c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800618c:	b580      	push	{r7, lr}
 800618e:	b086      	sub	sp, #24
 8006190:	af00      	add	r7, sp, #0
 8006192:	60f8      	str	r0, [r7, #12]
 8006194:	60b9      	str	r1, [r7, #8]
 8006196:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800619c:	f001 fbc4 	bl	8007928 <vPortEnterCritical>
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80061a6:	b25b      	sxtb	r3, r3
 80061a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061ac:	d103      	bne.n	80061b6 <vQueueWaitForMessageRestricted+0x2a>
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	2200      	movs	r2, #0
 80061b2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80061bc:	b25b      	sxtb	r3, r3
 80061be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061c2:	d103      	bne.n	80061cc <vQueueWaitForMessageRestricted+0x40>
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	2200      	movs	r2, #0
 80061c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80061cc:	f001 fbde 	bl	800798c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d106      	bne.n	80061e6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	3324      	adds	r3, #36	@ 0x24
 80061dc:	687a      	ldr	r2, [r7, #4]
 80061de:	68b9      	ldr	r1, [r7, #8]
 80061e0:	4618      	mov	r0, r3
 80061e2:	f000 fc45 	bl	8006a70 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80061e6:	6978      	ldr	r0, [r7, #20]
 80061e8:	f7ff ff26 	bl	8006038 <prvUnlockQueue>
	}
 80061ec:	bf00      	nop
 80061ee:	3718      	adds	r7, #24
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}

080061f4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b08e      	sub	sp, #56	@ 0x38
 80061f8:	af04      	add	r7, sp, #16
 80061fa:	60f8      	str	r0, [r7, #12]
 80061fc:	60b9      	str	r1, [r7, #8]
 80061fe:	607a      	str	r2, [r7, #4]
 8006200:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006202:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006204:	2b00      	cmp	r3, #0
 8006206:	d10b      	bne.n	8006220 <xTaskCreateStatic+0x2c>
	__asm volatile
 8006208:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800620c:	f383 8811 	msr	BASEPRI, r3
 8006210:	f3bf 8f6f 	isb	sy
 8006214:	f3bf 8f4f 	dsb	sy
 8006218:	623b      	str	r3, [r7, #32]
}
 800621a:	bf00      	nop
 800621c:	bf00      	nop
 800621e:	e7fd      	b.n	800621c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006220:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006222:	2b00      	cmp	r3, #0
 8006224:	d10b      	bne.n	800623e <xTaskCreateStatic+0x4a>
	__asm volatile
 8006226:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800622a:	f383 8811 	msr	BASEPRI, r3
 800622e:	f3bf 8f6f 	isb	sy
 8006232:	f3bf 8f4f 	dsb	sy
 8006236:	61fb      	str	r3, [r7, #28]
}
 8006238:	bf00      	nop
 800623a:	bf00      	nop
 800623c:	e7fd      	b.n	800623a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800623e:	235c      	movs	r3, #92	@ 0x5c
 8006240:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	2b5c      	cmp	r3, #92	@ 0x5c
 8006246:	d00b      	beq.n	8006260 <xTaskCreateStatic+0x6c>
	__asm volatile
 8006248:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800624c:	f383 8811 	msr	BASEPRI, r3
 8006250:	f3bf 8f6f 	isb	sy
 8006254:	f3bf 8f4f 	dsb	sy
 8006258:	61bb      	str	r3, [r7, #24]
}
 800625a:	bf00      	nop
 800625c:	bf00      	nop
 800625e:	e7fd      	b.n	800625c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006260:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006262:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006264:	2b00      	cmp	r3, #0
 8006266:	d01e      	beq.n	80062a6 <xTaskCreateStatic+0xb2>
 8006268:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800626a:	2b00      	cmp	r3, #0
 800626c:	d01b      	beq.n	80062a6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800626e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006270:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006274:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006276:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800627a:	2202      	movs	r2, #2
 800627c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006280:	2300      	movs	r3, #0
 8006282:	9303      	str	r3, [sp, #12]
 8006284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006286:	9302      	str	r3, [sp, #8]
 8006288:	f107 0314 	add.w	r3, r7, #20
 800628c:	9301      	str	r3, [sp, #4]
 800628e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006290:	9300      	str	r3, [sp, #0]
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	687a      	ldr	r2, [r7, #4]
 8006296:	68b9      	ldr	r1, [r7, #8]
 8006298:	68f8      	ldr	r0, [r7, #12]
 800629a:	f000 f850 	bl	800633e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800629e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80062a0:	f000 f8de 	bl	8006460 <prvAddNewTaskToReadyList>
 80062a4:	e001      	b.n	80062aa <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80062a6:	2300      	movs	r3, #0
 80062a8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80062aa:	697b      	ldr	r3, [r7, #20]
	}
 80062ac:	4618      	mov	r0, r3
 80062ae:	3728      	adds	r7, #40	@ 0x28
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}

080062b4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b08c      	sub	sp, #48	@ 0x30
 80062b8:	af04      	add	r7, sp, #16
 80062ba:	60f8      	str	r0, [r7, #12]
 80062bc:	60b9      	str	r1, [r7, #8]
 80062be:	603b      	str	r3, [r7, #0]
 80062c0:	4613      	mov	r3, r2
 80062c2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80062c4:	88fb      	ldrh	r3, [r7, #6]
 80062c6:	009b      	lsls	r3, r3, #2
 80062c8:	4618      	mov	r0, r3
 80062ca:	f001 fc4f 	bl	8007b6c <pvPortMalloc>
 80062ce:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d00e      	beq.n	80062f4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80062d6:	205c      	movs	r0, #92	@ 0x5c
 80062d8:	f001 fc48 	bl	8007b6c <pvPortMalloc>
 80062dc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80062de:	69fb      	ldr	r3, [r7, #28]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d003      	beq.n	80062ec <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80062e4:	69fb      	ldr	r3, [r7, #28]
 80062e6:	697a      	ldr	r2, [r7, #20]
 80062e8:	631a      	str	r2, [r3, #48]	@ 0x30
 80062ea:	e005      	b.n	80062f8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80062ec:	6978      	ldr	r0, [r7, #20]
 80062ee:	f001 fd0b 	bl	8007d08 <vPortFree>
 80062f2:	e001      	b.n	80062f8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80062f4:	2300      	movs	r3, #0
 80062f6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80062f8:	69fb      	ldr	r3, [r7, #28]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d017      	beq.n	800632e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80062fe:	69fb      	ldr	r3, [r7, #28]
 8006300:	2200      	movs	r2, #0
 8006302:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006306:	88fa      	ldrh	r2, [r7, #6]
 8006308:	2300      	movs	r3, #0
 800630a:	9303      	str	r3, [sp, #12]
 800630c:	69fb      	ldr	r3, [r7, #28]
 800630e:	9302      	str	r3, [sp, #8]
 8006310:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006312:	9301      	str	r3, [sp, #4]
 8006314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006316:	9300      	str	r3, [sp, #0]
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	68b9      	ldr	r1, [r7, #8]
 800631c:	68f8      	ldr	r0, [r7, #12]
 800631e:	f000 f80e 	bl	800633e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006322:	69f8      	ldr	r0, [r7, #28]
 8006324:	f000 f89c 	bl	8006460 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006328:	2301      	movs	r3, #1
 800632a:	61bb      	str	r3, [r7, #24]
 800632c:	e002      	b.n	8006334 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800632e:	f04f 33ff 	mov.w	r3, #4294967295
 8006332:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006334:	69bb      	ldr	r3, [r7, #24]
	}
 8006336:	4618      	mov	r0, r3
 8006338:	3720      	adds	r7, #32
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}

0800633e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800633e:	b580      	push	{r7, lr}
 8006340:	b088      	sub	sp, #32
 8006342:	af00      	add	r7, sp, #0
 8006344:	60f8      	str	r0, [r7, #12]
 8006346:	60b9      	str	r1, [r7, #8]
 8006348:	607a      	str	r2, [r7, #4]
 800634a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800634c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800634e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	009b      	lsls	r3, r3, #2
 8006354:	461a      	mov	r2, r3
 8006356:	21a5      	movs	r1, #165	@ 0xa5
 8006358:	f001 fe18 	bl	8007f8c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800635c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800635e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006366:	3b01      	subs	r3, #1
 8006368:	009b      	lsls	r3, r3, #2
 800636a:	4413      	add	r3, r2
 800636c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800636e:	69bb      	ldr	r3, [r7, #24]
 8006370:	f023 0307 	bic.w	r3, r3, #7
 8006374:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006376:	69bb      	ldr	r3, [r7, #24]
 8006378:	f003 0307 	and.w	r3, r3, #7
 800637c:	2b00      	cmp	r3, #0
 800637e:	d00b      	beq.n	8006398 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8006380:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006384:	f383 8811 	msr	BASEPRI, r3
 8006388:	f3bf 8f6f 	isb	sy
 800638c:	f3bf 8f4f 	dsb	sy
 8006390:	617b      	str	r3, [r7, #20]
}
 8006392:	bf00      	nop
 8006394:	bf00      	nop
 8006396:	e7fd      	b.n	8006394 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d01f      	beq.n	80063de <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800639e:	2300      	movs	r3, #0
 80063a0:	61fb      	str	r3, [r7, #28]
 80063a2:	e012      	b.n	80063ca <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80063a4:	68ba      	ldr	r2, [r7, #8]
 80063a6:	69fb      	ldr	r3, [r7, #28]
 80063a8:	4413      	add	r3, r2
 80063aa:	7819      	ldrb	r1, [r3, #0]
 80063ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063ae:	69fb      	ldr	r3, [r7, #28]
 80063b0:	4413      	add	r3, r2
 80063b2:	3334      	adds	r3, #52	@ 0x34
 80063b4:	460a      	mov	r2, r1
 80063b6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80063b8:	68ba      	ldr	r2, [r7, #8]
 80063ba:	69fb      	ldr	r3, [r7, #28]
 80063bc:	4413      	add	r3, r2
 80063be:	781b      	ldrb	r3, [r3, #0]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d006      	beq.n	80063d2 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80063c4:	69fb      	ldr	r3, [r7, #28]
 80063c6:	3301      	adds	r3, #1
 80063c8:	61fb      	str	r3, [r7, #28]
 80063ca:	69fb      	ldr	r3, [r7, #28]
 80063cc:	2b0f      	cmp	r3, #15
 80063ce:	d9e9      	bls.n	80063a4 <prvInitialiseNewTask+0x66>
 80063d0:	e000      	b.n	80063d4 <prvInitialiseNewTask+0x96>
			{
				break;
 80063d2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80063d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063d6:	2200      	movs	r2, #0
 80063d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80063dc:	e003      	b.n	80063e6 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80063de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063e0:	2200      	movs	r2, #0
 80063e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80063e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063e8:	2b37      	cmp	r3, #55	@ 0x37
 80063ea:	d901      	bls.n	80063f0 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80063ec:	2337      	movs	r3, #55	@ 0x37
 80063ee:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80063f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80063f4:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80063f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80063fa:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80063fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063fe:	2200      	movs	r2, #0
 8006400:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006404:	3304      	adds	r3, #4
 8006406:	4618      	mov	r0, r3
 8006408:	f7ff f966 	bl	80056d8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800640c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800640e:	3318      	adds	r3, #24
 8006410:	4618      	mov	r0, r3
 8006412:	f7ff f961 	bl	80056d8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006418:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800641a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800641c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800641e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006424:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006428:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800642a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800642c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800642e:	2200      	movs	r2, #0
 8006430:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006434:	2200      	movs	r2, #0
 8006436:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800643a:	683a      	ldr	r2, [r7, #0]
 800643c:	68f9      	ldr	r1, [r7, #12]
 800643e:	69b8      	ldr	r0, [r7, #24]
 8006440:	f001 f93e 	bl	80076c0 <pxPortInitialiseStack>
 8006444:	4602      	mov	r2, r0
 8006446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006448:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800644a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800644c:	2b00      	cmp	r3, #0
 800644e:	d002      	beq.n	8006456 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006450:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006452:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006454:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006456:	bf00      	nop
 8006458:	3720      	adds	r7, #32
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
	...

08006460 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b082      	sub	sp, #8
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006468:	f001 fa5e 	bl	8007928 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800646c:	4b2d      	ldr	r3, [pc, #180]	@ (8006524 <prvAddNewTaskToReadyList+0xc4>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	3301      	adds	r3, #1
 8006472:	4a2c      	ldr	r2, [pc, #176]	@ (8006524 <prvAddNewTaskToReadyList+0xc4>)
 8006474:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006476:	4b2c      	ldr	r3, [pc, #176]	@ (8006528 <prvAddNewTaskToReadyList+0xc8>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d109      	bne.n	8006492 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800647e:	4a2a      	ldr	r2, [pc, #168]	@ (8006528 <prvAddNewTaskToReadyList+0xc8>)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006484:	4b27      	ldr	r3, [pc, #156]	@ (8006524 <prvAddNewTaskToReadyList+0xc4>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	2b01      	cmp	r3, #1
 800648a:	d110      	bne.n	80064ae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800648c:	f000 fc1e 	bl	8006ccc <prvInitialiseTaskLists>
 8006490:	e00d      	b.n	80064ae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006492:	4b26      	ldr	r3, [pc, #152]	@ (800652c <prvAddNewTaskToReadyList+0xcc>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d109      	bne.n	80064ae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800649a:	4b23      	ldr	r3, [pc, #140]	@ (8006528 <prvAddNewTaskToReadyList+0xc8>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064a4:	429a      	cmp	r2, r3
 80064a6:	d802      	bhi.n	80064ae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80064a8:	4a1f      	ldr	r2, [pc, #124]	@ (8006528 <prvAddNewTaskToReadyList+0xc8>)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80064ae:	4b20      	ldr	r3, [pc, #128]	@ (8006530 <prvAddNewTaskToReadyList+0xd0>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	3301      	adds	r3, #1
 80064b4:	4a1e      	ldr	r2, [pc, #120]	@ (8006530 <prvAddNewTaskToReadyList+0xd0>)
 80064b6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80064b8:	4b1d      	ldr	r3, [pc, #116]	@ (8006530 <prvAddNewTaskToReadyList+0xd0>)
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064c4:	4b1b      	ldr	r3, [pc, #108]	@ (8006534 <prvAddNewTaskToReadyList+0xd4>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	429a      	cmp	r2, r3
 80064ca:	d903      	bls.n	80064d4 <prvAddNewTaskToReadyList+0x74>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064d0:	4a18      	ldr	r2, [pc, #96]	@ (8006534 <prvAddNewTaskToReadyList+0xd4>)
 80064d2:	6013      	str	r3, [r2, #0]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064d8:	4613      	mov	r3, r2
 80064da:	009b      	lsls	r3, r3, #2
 80064dc:	4413      	add	r3, r2
 80064de:	009b      	lsls	r3, r3, #2
 80064e0:	4a15      	ldr	r2, [pc, #84]	@ (8006538 <prvAddNewTaskToReadyList+0xd8>)
 80064e2:	441a      	add	r2, r3
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	3304      	adds	r3, #4
 80064e8:	4619      	mov	r1, r3
 80064ea:	4610      	mov	r0, r2
 80064ec:	f7ff f901 	bl	80056f2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80064f0:	f001 fa4c 	bl	800798c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80064f4:	4b0d      	ldr	r3, [pc, #52]	@ (800652c <prvAddNewTaskToReadyList+0xcc>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d00e      	beq.n	800651a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80064fc:	4b0a      	ldr	r3, [pc, #40]	@ (8006528 <prvAddNewTaskToReadyList+0xc8>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006506:	429a      	cmp	r2, r3
 8006508:	d207      	bcs.n	800651a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800650a:	4b0c      	ldr	r3, [pc, #48]	@ (800653c <prvAddNewTaskToReadyList+0xdc>)
 800650c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006510:	601a      	str	r2, [r3, #0]
 8006512:	f3bf 8f4f 	dsb	sy
 8006516:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800651a:	bf00      	nop
 800651c:	3708      	adds	r7, #8
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}
 8006522:	bf00      	nop
 8006524:	20000fa4 	.word	0x20000fa4
 8006528:	20000ad0 	.word	0x20000ad0
 800652c:	20000fb0 	.word	0x20000fb0
 8006530:	20000fc0 	.word	0x20000fc0
 8006534:	20000fac 	.word	0x20000fac
 8006538:	20000ad4 	.word	0x20000ad4
 800653c:	e000ed04 	.word	0xe000ed04

08006540 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006540:	b580      	push	{r7, lr}
 8006542:	b084      	sub	sp, #16
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006548:	2300      	movs	r3, #0
 800654a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d018      	beq.n	8006584 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006552:	4b14      	ldr	r3, [pc, #80]	@ (80065a4 <vTaskDelay+0x64>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d00b      	beq.n	8006572 <vTaskDelay+0x32>
	__asm volatile
 800655a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800655e:	f383 8811 	msr	BASEPRI, r3
 8006562:	f3bf 8f6f 	isb	sy
 8006566:	f3bf 8f4f 	dsb	sy
 800656a:	60bb      	str	r3, [r7, #8]
}
 800656c:	bf00      	nop
 800656e:	bf00      	nop
 8006570:	e7fd      	b.n	800656e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006572:	f000 f883 	bl	800667c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006576:	2100      	movs	r1, #0
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f000 fcf3 	bl	8006f64 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800657e:	f000 f88b 	bl	8006698 <xTaskResumeAll>
 8006582:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d107      	bne.n	800659a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800658a:	4b07      	ldr	r3, [pc, #28]	@ (80065a8 <vTaskDelay+0x68>)
 800658c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006590:	601a      	str	r2, [r3, #0]
 8006592:	f3bf 8f4f 	dsb	sy
 8006596:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800659a:	bf00      	nop
 800659c:	3710      	adds	r7, #16
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}
 80065a2:	bf00      	nop
 80065a4:	20000fcc 	.word	0x20000fcc
 80065a8:	e000ed04 	.word	0xe000ed04

080065ac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b08a      	sub	sp, #40	@ 0x28
 80065b0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80065b2:	2300      	movs	r3, #0
 80065b4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80065b6:	2300      	movs	r3, #0
 80065b8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80065ba:	463a      	mov	r2, r7
 80065bc:	1d39      	adds	r1, r7, #4
 80065be:	f107 0308 	add.w	r3, r7, #8
 80065c2:	4618      	mov	r0, r3
 80065c4:	f7ff f834 	bl	8005630 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80065c8:	6839      	ldr	r1, [r7, #0]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	68ba      	ldr	r2, [r7, #8]
 80065ce:	9202      	str	r2, [sp, #8]
 80065d0:	9301      	str	r3, [sp, #4]
 80065d2:	2300      	movs	r3, #0
 80065d4:	9300      	str	r3, [sp, #0]
 80065d6:	2300      	movs	r3, #0
 80065d8:	460a      	mov	r2, r1
 80065da:	4922      	ldr	r1, [pc, #136]	@ (8006664 <vTaskStartScheduler+0xb8>)
 80065dc:	4822      	ldr	r0, [pc, #136]	@ (8006668 <vTaskStartScheduler+0xbc>)
 80065de:	f7ff fe09 	bl	80061f4 <xTaskCreateStatic>
 80065e2:	4603      	mov	r3, r0
 80065e4:	4a21      	ldr	r2, [pc, #132]	@ (800666c <vTaskStartScheduler+0xc0>)
 80065e6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80065e8:	4b20      	ldr	r3, [pc, #128]	@ (800666c <vTaskStartScheduler+0xc0>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d002      	beq.n	80065f6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80065f0:	2301      	movs	r3, #1
 80065f2:	617b      	str	r3, [r7, #20]
 80065f4:	e001      	b.n	80065fa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80065f6:	2300      	movs	r3, #0
 80065f8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d102      	bne.n	8006606 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006600:	f000 fd04 	bl	800700c <xTimerCreateTimerTask>
 8006604:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	2b01      	cmp	r3, #1
 800660a:	d116      	bne.n	800663a <vTaskStartScheduler+0x8e>
	__asm volatile
 800660c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006610:	f383 8811 	msr	BASEPRI, r3
 8006614:	f3bf 8f6f 	isb	sy
 8006618:	f3bf 8f4f 	dsb	sy
 800661c:	613b      	str	r3, [r7, #16]
}
 800661e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006620:	4b13      	ldr	r3, [pc, #76]	@ (8006670 <vTaskStartScheduler+0xc4>)
 8006622:	f04f 32ff 	mov.w	r2, #4294967295
 8006626:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006628:	4b12      	ldr	r3, [pc, #72]	@ (8006674 <vTaskStartScheduler+0xc8>)
 800662a:	2201      	movs	r2, #1
 800662c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800662e:	4b12      	ldr	r3, [pc, #72]	@ (8006678 <vTaskStartScheduler+0xcc>)
 8006630:	2200      	movs	r2, #0
 8006632:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006634:	f001 f8d4 	bl	80077e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006638:	e00f      	b.n	800665a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006640:	d10b      	bne.n	800665a <vTaskStartScheduler+0xae>
	__asm volatile
 8006642:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006646:	f383 8811 	msr	BASEPRI, r3
 800664a:	f3bf 8f6f 	isb	sy
 800664e:	f3bf 8f4f 	dsb	sy
 8006652:	60fb      	str	r3, [r7, #12]
}
 8006654:	bf00      	nop
 8006656:	bf00      	nop
 8006658:	e7fd      	b.n	8006656 <vTaskStartScheduler+0xaa>
}
 800665a:	bf00      	nop
 800665c:	3718      	adds	r7, #24
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}
 8006662:	bf00      	nop
 8006664:	08008910 	.word	0x08008910
 8006668:	08006c9d 	.word	0x08006c9d
 800666c:	20000fc8 	.word	0x20000fc8
 8006670:	20000fc4 	.word	0x20000fc4
 8006674:	20000fb0 	.word	0x20000fb0
 8006678:	20000fa8 	.word	0x20000fa8

0800667c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800667c:	b480      	push	{r7}
 800667e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006680:	4b04      	ldr	r3, [pc, #16]	@ (8006694 <vTaskSuspendAll+0x18>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	3301      	adds	r3, #1
 8006686:	4a03      	ldr	r2, [pc, #12]	@ (8006694 <vTaskSuspendAll+0x18>)
 8006688:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800668a:	bf00      	nop
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr
 8006694:	20000fcc 	.word	0x20000fcc

08006698 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b084      	sub	sp, #16
 800669c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800669e:	2300      	movs	r3, #0
 80066a0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80066a2:	2300      	movs	r3, #0
 80066a4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80066a6:	4b42      	ldr	r3, [pc, #264]	@ (80067b0 <xTaskResumeAll+0x118>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d10b      	bne.n	80066c6 <xTaskResumeAll+0x2e>
	__asm volatile
 80066ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066b2:	f383 8811 	msr	BASEPRI, r3
 80066b6:	f3bf 8f6f 	isb	sy
 80066ba:	f3bf 8f4f 	dsb	sy
 80066be:	603b      	str	r3, [r7, #0]
}
 80066c0:	bf00      	nop
 80066c2:	bf00      	nop
 80066c4:	e7fd      	b.n	80066c2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80066c6:	f001 f92f 	bl	8007928 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80066ca:	4b39      	ldr	r3, [pc, #228]	@ (80067b0 <xTaskResumeAll+0x118>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	3b01      	subs	r3, #1
 80066d0:	4a37      	ldr	r2, [pc, #220]	@ (80067b0 <xTaskResumeAll+0x118>)
 80066d2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80066d4:	4b36      	ldr	r3, [pc, #216]	@ (80067b0 <xTaskResumeAll+0x118>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d162      	bne.n	80067a2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80066dc:	4b35      	ldr	r3, [pc, #212]	@ (80067b4 <xTaskResumeAll+0x11c>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d05e      	beq.n	80067a2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80066e4:	e02f      	b.n	8006746 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066e6:	4b34      	ldr	r3, [pc, #208]	@ (80067b8 <xTaskResumeAll+0x120>)
 80066e8:	68db      	ldr	r3, [r3, #12]
 80066ea:	68db      	ldr	r3, [r3, #12]
 80066ec:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	3318      	adds	r3, #24
 80066f2:	4618      	mov	r0, r3
 80066f4:	f7ff f85a 	bl	80057ac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	3304      	adds	r3, #4
 80066fc:	4618      	mov	r0, r3
 80066fe:	f7ff f855 	bl	80057ac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006706:	4b2d      	ldr	r3, [pc, #180]	@ (80067bc <xTaskResumeAll+0x124>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	429a      	cmp	r2, r3
 800670c:	d903      	bls.n	8006716 <xTaskResumeAll+0x7e>
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006712:	4a2a      	ldr	r2, [pc, #168]	@ (80067bc <xTaskResumeAll+0x124>)
 8006714:	6013      	str	r3, [r2, #0]
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800671a:	4613      	mov	r3, r2
 800671c:	009b      	lsls	r3, r3, #2
 800671e:	4413      	add	r3, r2
 8006720:	009b      	lsls	r3, r3, #2
 8006722:	4a27      	ldr	r2, [pc, #156]	@ (80067c0 <xTaskResumeAll+0x128>)
 8006724:	441a      	add	r2, r3
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	3304      	adds	r3, #4
 800672a:	4619      	mov	r1, r3
 800672c:	4610      	mov	r0, r2
 800672e:	f7fe ffe0 	bl	80056f2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006736:	4b23      	ldr	r3, [pc, #140]	@ (80067c4 <xTaskResumeAll+0x12c>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800673c:	429a      	cmp	r2, r3
 800673e:	d302      	bcc.n	8006746 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006740:	4b21      	ldr	r3, [pc, #132]	@ (80067c8 <xTaskResumeAll+0x130>)
 8006742:	2201      	movs	r2, #1
 8006744:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006746:	4b1c      	ldr	r3, [pc, #112]	@ (80067b8 <xTaskResumeAll+0x120>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d1cb      	bne.n	80066e6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d001      	beq.n	8006758 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006754:	f000 fb58 	bl	8006e08 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006758:	4b1c      	ldr	r3, [pc, #112]	@ (80067cc <xTaskResumeAll+0x134>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d010      	beq.n	8006786 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006764:	f000 f846 	bl	80067f4 <xTaskIncrementTick>
 8006768:	4603      	mov	r3, r0
 800676a:	2b00      	cmp	r3, #0
 800676c:	d002      	beq.n	8006774 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800676e:	4b16      	ldr	r3, [pc, #88]	@ (80067c8 <xTaskResumeAll+0x130>)
 8006770:	2201      	movs	r2, #1
 8006772:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	3b01      	subs	r3, #1
 8006778:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d1f1      	bne.n	8006764 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8006780:	4b12      	ldr	r3, [pc, #72]	@ (80067cc <xTaskResumeAll+0x134>)
 8006782:	2200      	movs	r2, #0
 8006784:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006786:	4b10      	ldr	r3, [pc, #64]	@ (80067c8 <xTaskResumeAll+0x130>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d009      	beq.n	80067a2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800678e:	2301      	movs	r3, #1
 8006790:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006792:	4b0f      	ldr	r3, [pc, #60]	@ (80067d0 <xTaskResumeAll+0x138>)
 8006794:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006798:	601a      	str	r2, [r3, #0]
 800679a:	f3bf 8f4f 	dsb	sy
 800679e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80067a2:	f001 f8f3 	bl	800798c <vPortExitCritical>

	return xAlreadyYielded;
 80067a6:	68bb      	ldr	r3, [r7, #8]
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3710      	adds	r7, #16
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}
 80067b0:	20000fcc 	.word	0x20000fcc
 80067b4:	20000fa4 	.word	0x20000fa4
 80067b8:	20000f64 	.word	0x20000f64
 80067bc:	20000fac 	.word	0x20000fac
 80067c0:	20000ad4 	.word	0x20000ad4
 80067c4:	20000ad0 	.word	0x20000ad0
 80067c8:	20000fb8 	.word	0x20000fb8
 80067cc:	20000fb4 	.word	0x20000fb4
 80067d0:	e000ed04 	.word	0xe000ed04

080067d4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80067d4:	b480      	push	{r7}
 80067d6:	b083      	sub	sp, #12
 80067d8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80067da:	4b05      	ldr	r3, [pc, #20]	@ (80067f0 <xTaskGetTickCount+0x1c>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80067e0:	687b      	ldr	r3, [r7, #4]
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	370c      	adds	r7, #12
 80067e6:	46bd      	mov	sp, r7
 80067e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ec:	4770      	bx	lr
 80067ee:	bf00      	nop
 80067f0:	20000fa8 	.word	0x20000fa8

080067f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b086      	sub	sp, #24
 80067f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80067fa:	2300      	movs	r3, #0
 80067fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80067fe:	4b4f      	ldr	r3, [pc, #316]	@ (800693c <xTaskIncrementTick+0x148>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	2b00      	cmp	r3, #0
 8006804:	f040 8090 	bne.w	8006928 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006808:	4b4d      	ldr	r3, [pc, #308]	@ (8006940 <xTaskIncrementTick+0x14c>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	3301      	adds	r3, #1
 800680e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006810:	4a4b      	ldr	r2, [pc, #300]	@ (8006940 <xTaskIncrementTick+0x14c>)
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d121      	bne.n	8006860 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800681c:	4b49      	ldr	r3, [pc, #292]	@ (8006944 <xTaskIncrementTick+0x150>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d00b      	beq.n	800683e <xTaskIncrementTick+0x4a>
	__asm volatile
 8006826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800682a:	f383 8811 	msr	BASEPRI, r3
 800682e:	f3bf 8f6f 	isb	sy
 8006832:	f3bf 8f4f 	dsb	sy
 8006836:	603b      	str	r3, [r7, #0]
}
 8006838:	bf00      	nop
 800683a:	bf00      	nop
 800683c:	e7fd      	b.n	800683a <xTaskIncrementTick+0x46>
 800683e:	4b41      	ldr	r3, [pc, #260]	@ (8006944 <xTaskIncrementTick+0x150>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	60fb      	str	r3, [r7, #12]
 8006844:	4b40      	ldr	r3, [pc, #256]	@ (8006948 <xTaskIncrementTick+0x154>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a3e      	ldr	r2, [pc, #248]	@ (8006944 <xTaskIncrementTick+0x150>)
 800684a:	6013      	str	r3, [r2, #0]
 800684c:	4a3e      	ldr	r2, [pc, #248]	@ (8006948 <xTaskIncrementTick+0x154>)
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	6013      	str	r3, [r2, #0]
 8006852:	4b3e      	ldr	r3, [pc, #248]	@ (800694c <xTaskIncrementTick+0x158>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	3301      	adds	r3, #1
 8006858:	4a3c      	ldr	r2, [pc, #240]	@ (800694c <xTaskIncrementTick+0x158>)
 800685a:	6013      	str	r3, [r2, #0]
 800685c:	f000 fad4 	bl	8006e08 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006860:	4b3b      	ldr	r3, [pc, #236]	@ (8006950 <xTaskIncrementTick+0x15c>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	693a      	ldr	r2, [r7, #16]
 8006866:	429a      	cmp	r2, r3
 8006868:	d349      	bcc.n	80068fe <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800686a:	4b36      	ldr	r3, [pc, #216]	@ (8006944 <xTaskIncrementTick+0x150>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d104      	bne.n	800687e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006874:	4b36      	ldr	r3, [pc, #216]	@ (8006950 <xTaskIncrementTick+0x15c>)
 8006876:	f04f 32ff 	mov.w	r2, #4294967295
 800687a:	601a      	str	r2, [r3, #0]
					break;
 800687c:	e03f      	b.n	80068fe <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800687e:	4b31      	ldr	r3, [pc, #196]	@ (8006944 <xTaskIncrementTick+0x150>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	68db      	ldr	r3, [r3, #12]
 8006884:	68db      	ldr	r3, [r3, #12]
 8006886:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800688e:	693a      	ldr	r2, [r7, #16]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	429a      	cmp	r2, r3
 8006894:	d203      	bcs.n	800689e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006896:	4a2e      	ldr	r2, [pc, #184]	@ (8006950 <xTaskIncrementTick+0x15c>)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800689c:	e02f      	b.n	80068fe <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	3304      	adds	r3, #4
 80068a2:	4618      	mov	r0, r3
 80068a4:	f7fe ff82 	bl	80057ac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d004      	beq.n	80068ba <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	3318      	adds	r3, #24
 80068b4:	4618      	mov	r0, r3
 80068b6:	f7fe ff79 	bl	80057ac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068be:	4b25      	ldr	r3, [pc, #148]	@ (8006954 <xTaskIncrementTick+0x160>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d903      	bls.n	80068ce <xTaskIncrementTick+0xda>
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068ca:	4a22      	ldr	r2, [pc, #136]	@ (8006954 <xTaskIncrementTick+0x160>)
 80068cc:	6013      	str	r3, [r2, #0]
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068d2:	4613      	mov	r3, r2
 80068d4:	009b      	lsls	r3, r3, #2
 80068d6:	4413      	add	r3, r2
 80068d8:	009b      	lsls	r3, r3, #2
 80068da:	4a1f      	ldr	r2, [pc, #124]	@ (8006958 <xTaskIncrementTick+0x164>)
 80068dc:	441a      	add	r2, r3
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	3304      	adds	r3, #4
 80068e2:	4619      	mov	r1, r3
 80068e4:	4610      	mov	r0, r2
 80068e6:	f7fe ff04 	bl	80056f2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068ee:	4b1b      	ldr	r3, [pc, #108]	@ (800695c <xTaskIncrementTick+0x168>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068f4:	429a      	cmp	r2, r3
 80068f6:	d3b8      	bcc.n	800686a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80068f8:	2301      	movs	r3, #1
 80068fa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80068fc:	e7b5      	b.n	800686a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80068fe:	4b17      	ldr	r3, [pc, #92]	@ (800695c <xTaskIncrementTick+0x168>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006904:	4914      	ldr	r1, [pc, #80]	@ (8006958 <xTaskIncrementTick+0x164>)
 8006906:	4613      	mov	r3, r2
 8006908:	009b      	lsls	r3, r3, #2
 800690a:	4413      	add	r3, r2
 800690c:	009b      	lsls	r3, r3, #2
 800690e:	440b      	add	r3, r1
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	2b01      	cmp	r3, #1
 8006914:	d901      	bls.n	800691a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8006916:	2301      	movs	r3, #1
 8006918:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800691a:	4b11      	ldr	r3, [pc, #68]	@ (8006960 <xTaskIncrementTick+0x16c>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d007      	beq.n	8006932 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8006922:	2301      	movs	r3, #1
 8006924:	617b      	str	r3, [r7, #20]
 8006926:	e004      	b.n	8006932 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006928:	4b0e      	ldr	r3, [pc, #56]	@ (8006964 <xTaskIncrementTick+0x170>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	3301      	adds	r3, #1
 800692e:	4a0d      	ldr	r2, [pc, #52]	@ (8006964 <xTaskIncrementTick+0x170>)
 8006930:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006932:	697b      	ldr	r3, [r7, #20]
}
 8006934:	4618      	mov	r0, r3
 8006936:	3718      	adds	r7, #24
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}
 800693c:	20000fcc 	.word	0x20000fcc
 8006940:	20000fa8 	.word	0x20000fa8
 8006944:	20000f5c 	.word	0x20000f5c
 8006948:	20000f60 	.word	0x20000f60
 800694c:	20000fbc 	.word	0x20000fbc
 8006950:	20000fc4 	.word	0x20000fc4
 8006954:	20000fac 	.word	0x20000fac
 8006958:	20000ad4 	.word	0x20000ad4
 800695c:	20000ad0 	.word	0x20000ad0
 8006960:	20000fb8 	.word	0x20000fb8
 8006964:	20000fb4 	.word	0x20000fb4

08006968 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006968:	b480      	push	{r7}
 800696a:	b085      	sub	sp, #20
 800696c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800696e:	4b28      	ldr	r3, [pc, #160]	@ (8006a10 <vTaskSwitchContext+0xa8>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d003      	beq.n	800697e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006976:	4b27      	ldr	r3, [pc, #156]	@ (8006a14 <vTaskSwitchContext+0xac>)
 8006978:	2201      	movs	r2, #1
 800697a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800697c:	e042      	b.n	8006a04 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800697e:	4b25      	ldr	r3, [pc, #148]	@ (8006a14 <vTaskSwitchContext+0xac>)
 8006980:	2200      	movs	r2, #0
 8006982:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006984:	4b24      	ldr	r3, [pc, #144]	@ (8006a18 <vTaskSwitchContext+0xb0>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	60fb      	str	r3, [r7, #12]
 800698a:	e011      	b.n	80069b0 <vTaskSwitchContext+0x48>
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d10b      	bne.n	80069aa <vTaskSwitchContext+0x42>
	__asm volatile
 8006992:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006996:	f383 8811 	msr	BASEPRI, r3
 800699a:	f3bf 8f6f 	isb	sy
 800699e:	f3bf 8f4f 	dsb	sy
 80069a2:	607b      	str	r3, [r7, #4]
}
 80069a4:	bf00      	nop
 80069a6:	bf00      	nop
 80069a8:	e7fd      	b.n	80069a6 <vTaskSwitchContext+0x3e>
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	3b01      	subs	r3, #1
 80069ae:	60fb      	str	r3, [r7, #12]
 80069b0:	491a      	ldr	r1, [pc, #104]	@ (8006a1c <vTaskSwitchContext+0xb4>)
 80069b2:	68fa      	ldr	r2, [r7, #12]
 80069b4:	4613      	mov	r3, r2
 80069b6:	009b      	lsls	r3, r3, #2
 80069b8:	4413      	add	r3, r2
 80069ba:	009b      	lsls	r3, r3, #2
 80069bc:	440b      	add	r3, r1
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d0e3      	beq.n	800698c <vTaskSwitchContext+0x24>
 80069c4:	68fa      	ldr	r2, [r7, #12]
 80069c6:	4613      	mov	r3, r2
 80069c8:	009b      	lsls	r3, r3, #2
 80069ca:	4413      	add	r3, r2
 80069cc:	009b      	lsls	r3, r3, #2
 80069ce:	4a13      	ldr	r2, [pc, #76]	@ (8006a1c <vTaskSwitchContext+0xb4>)
 80069d0:	4413      	add	r3, r2
 80069d2:	60bb      	str	r3, [r7, #8]
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	685a      	ldr	r2, [r3, #4]
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	605a      	str	r2, [r3, #4]
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	685a      	ldr	r2, [r3, #4]
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	3308      	adds	r3, #8
 80069e6:	429a      	cmp	r2, r3
 80069e8:	d104      	bne.n	80069f4 <vTaskSwitchContext+0x8c>
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	685b      	ldr	r3, [r3, #4]
 80069ee:	685a      	ldr	r2, [r3, #4]
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	605a      	str	r2, [r3, #4]
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	68db      	ldr	r3, [r3, #12]
 80069fa:	4a09      	ldr	r2, [pc, #36]	@ (8006a20 <vTaskSwitchContext+0xb8>)
 80069fc:	6013      	str	r3, [r2, #0]
 80069fe:	4a06      	ldr	r2, [pc, #24]	@ (8006a18 <vTaskSwitchContext+0xb0>)
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	6013      	str	r3, [r2, #0]
}
 8006a04:	bf00      	nop
 8006a06:	3714      	adds	r7, #20
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0e:	4770      	bx	lr
 8006a10:	20000fcc 	.word	0x20000fcc
 8006a14:	20000fb8 	.word	0x20000fb8
 8006a18:	20000fac 	.word	0x20000fac
 8006a1c:	20000ad4 	.word	0x20000ad4
 8006a20:	20000ad0 	.word	0x20000ad0

08006a24 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b084      	sub	sp, #16
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
 8006a2c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d10b      	bne.n	8006a4c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006a34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a38:	f383 8811 	msr	BASEPRI, r3
 8006a3c:	f3bf 8f6f 	isb	sy
 8006a40:	f3bf 8f4f 	dsb	sy
 8006a44:	60fb      	str	r3, [r7, #12]
}
 8006a46:	bf00      	nop
 8006a48:	bf00      	nop
 8006a4a:	e7fd      	b.n	8006a48 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006a4c:	4b07      	ldr	r3, [pc, #28]	@ (8006a6c <vTaskPlaceOnEventList+0x48>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	3318      	adds	r3, #24
 8006a52:	4619      	mov	r1, r3
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f7fe fe70 	bl	800573a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006a5a:	2101      	movs	r1, #1
 8006a5c:	6838      	ldr	r0, [r7, #0]
 8006a5e:	f000 fa81 	bl	8006f64 <prvAddCurrentTaskToDelayedList>
}
 8006a62:	bf00      	nop
 8006a64:	3710      	adds	r7, #16
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}
 8006a6a:	bf00      	nop
 8006a6c:	20000ad0 	.word	0x20000ad0

08006a70 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b086      	sub	sp, #24
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	60f8      	str	r0, [r7, #12]
 8006a78:	60b9      	str	r1, [r7, #8]
 8006a7a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d10b      	bne.n	8006a9a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8006a82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a86:	f383 8811 	msr	BASEPRI, r3
 8006a8a:	f3bf 8f6f 	isb	sy
 8006a8e:	f3bf 8f4f 	dsb	sy
 8006a92:	617b      	str	r3, [r7, #20]
}
 8006a94:	bf00      	nop
 8006a96:	bf00      	nop
 8006a98:	e7fd      	b.n	8006a96 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006a9a:	4b0a      	ldr	r3, [pc, #40]	@ (8006ac4 <vTaskPlaceOnEventListRestricted+0x54>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	3318      	adds	r3, #24
 8006aa0:	4619      	mov	r1, r3
 8006aa2:	68f8      	ldr	r0, [r7, #12]
 8006aa4:	f7fe fe25 	bl	80056f2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d002      	beq.n	8006ab4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8006aae:	f04f 33ff 	mov.w	r3, #4294967295
 8006ab2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006ab4:	6879      	ldr	r1, [r7, #4]
 8006ab6:	68b8      	ldr	r0, [r7, #8]
 8006ab8:	f000 fa54 	bl	8006f64 <prvAddCurrentTaskToDelayedList>
	}
 8006abc:	bf00      	nop
 8006abe:	3718      	adds	r7, #24
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}
 8006ac4:	20000ad0 	.word	0x20000ad0

08006ac8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b086      	sub	sp, #24
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	68db      	ldr	r3, [r3, #12]
 8006ad4:	68db      	ldr	r3, [r3, #12]
 8006ad6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d10b      	bne.n	8006af6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006ade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ae2:	f383 8811 	msr	BASEPRI, r3
 8006ae6:	f3bf 8f6f 	isb	sy
 8006aea:	f3bf 8f4f 	dsb	sy
 8006aee:	60fb      	str	r3, [r7, #12]
}
 8006af0:	bf00      	nop
 8006af2:	bf00      	nop
 8006af4:	e7fd      	b.n	8006af2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	3318      	adds	r3, #24
 8006afa:	4618      	mov	r0, r3
 8006afc:	f7fe fe56 	bl	80057ac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b00:	4b1d      	ldr	r3, [pc, #116]	@ (8006b78 <xTaskRemoveFromEventList+0xb0>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d11d      	bne.n	8006b44 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	3304      	adds	r3, #4
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f7fe fe4d 	bl	80057ac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b16:	4b19      	ldr	r3, [pc, #100]	@ (8006b7c <xTaskRemoveFromEventList+0xb4>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	d903      	bls.n	8006b26 <xTaskRemoveFromEventList+0x5e>
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b22:	4a16      	ldr	r2, [pc, #88]	@ (8006b7c <xTaskRemoveFromEventList+0xb4>)
 8006b24:	6013      	str	r3, [r2, #0]
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b2a:	4613      	mov	r3, r2
 8006b2c:	009b      	lsls	r3, r3, #2
 8006b2e:	4413      	add	r3, r2
 8006b30:	009b      	lsls	r3, r3, #2
 8006b32:	4a13      	ldr	r2, [pc, #76]	@ (8006b80 <xTaskRemoveFromEventList+0xb8>)
 8006b34:	441a      	add	r2, r3
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	3304      	adds	r3, #4
 8006b3a:	4619      	mov	r1, r3
 8006b3c:	4610      	mov	r0, r2
 8006b3e:	f7fe fdd8 	bl	80056f2 <vListInsertEnd>
 8006b42:	e005      	b.n	8006b50 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	3318      	adds	r3, #24
 8006b48:	4619      	mov	r1, r3
 8006b4a:	480e      	ldr	r0, [pc, #56]	@ (8006b84 <xTaskRemoveFromEventList+0xbc>)
 8006b4c:	f7fe fdd1 	bl	80056f2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b54:	4b0c      	ldr	r3, [pc, #48]	@ (8006b88 <xTaskRemoveFromEventList+0xc0>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b5a:	429a      	cmp	r2, r3
 8006b5c:	d905      	bls.n	8006b6a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006b62:	4b0a      	ldr	r3, [pc, #40]	@ (8006b8c <xTaskRemoveFromEventList+0xc4>)
 8006b64:	2201      	movs	r2, #1
 8006b66:	601a      	str	r2, [r3, #0]
 8006b68:	e001      	b.n	8006b6e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006b6e:	697b      	ldr	r3, [r7, #20]
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3718      	adds	r7, #24
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}
 8006b78:	20000fcc 	.word	0x20000fcc
 8006b7c:	20000fac 	.word	0x20000fac
 8006b80:	20000ad4 	.word	0x20000ad4
 8006b84:	20000f64 	.word	0x20000f64
 8006b88:	20000ad0 	.word	0x20000ad0
 8006b8c:	20000fb8 	.word	0x20000fb8

08006b90 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006b90:	b480      	push	{r7}
 8006b92:	b083      	sub	sp, #12
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006b98:	4b06      	ldr	r3, [pc, #24]	@ (8006bb4 <vTaskInternalSetTimeOutState+0x24>)
 8006b9a:	681a      	ldr	r2, [r3, #0]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006ba0:	4b05      	ldr	r3, [pc, #20]	@ (8006bb8 <vTaskInternalSetTimeOutState+0x28>)
 8006ba2:	681a      	ldr	r2, [r3, #0]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	605a      	str	r2, [r3, #4]
}
 8006ba8:	bf00      	nop
 8006baa:	370c      	adds	r7, #12
 8006bac:	46bd      	mov	sp, r7
 8006bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb2:	4770      	bx	lr
 8006bb4:	20000fbc 	.word	0x20000fbc
 8006bb8:	20000fa8 	.word	0x20000fa8

08006bbc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b088      	sub	sp, #32
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d10b      	bne.n	8006be4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006bcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bd0:	f383 8811 	msr	BASEPRI, r3
 8006bd4:	f3bf 8f6f 	isb	sy
 8006bd8:	f3bf 8f4f 	dsb	sy
 8006bdc:	613b      	str	r3, [r7, #16]
}
 8006bde:	bf00      	nop
 8006be0:	bf00      	nop
 8006be2:	e7fd      	b.n	8006be0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d10b      	bne.n	8006c02 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006bea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bee:	f383 8811 	msr	BASEPRI, r3
 8006bf2:	f3bf 8f6f 	isb	sy
 8006bf6:	f3bf 8f4f 	dsb	sy
 8006bfa:	60fb      	str	r3, [r7, #12]
}
 8006bfc:	bf00      	nop
 8006bfe:	bf00      	nop
 8006c00:	e7fd      	b.n	8006bfe <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006c02:	f000 fe91 	bl	8007928 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006c06:	4b1d      	ldr	r3, [pc, #116]	@ (8006c7c <xTaskCheckForTimeOut+0xc0>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	69ba      	ldr	r2, [r7, #24]
 8006c12:	1ad3      	subs	r3, r2, r3
 8006c14:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c1e:	d102      	bne.n	8006c26 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006c20:	2300      	movs	r3, #0
 8006c22:	61fb      	str	r3, [r7, #28]
 8006c24:	e023      	b.n	8006c6e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681a      	ldr	r2, [r3, #0]
 8006c2a:	4b15      	ldr	r3, [pc, #84]	@ (8006c80 <xTaskCheckForTimeOut+0xc4>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d007      	beq.n	8006c42 <xTaskCheckForTimeOut+0x86>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	69ba      	ldr	r2, [r7, #24]
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	d302      	bcc.n	8006c42 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	61fb      	str	r3, [r7, #28]
 8006c40:	e015      	b.n	8006c6e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	697a      	ldr	r2, [r7, #20]
 8006c48:	429a      	cmp	r2, r3
 8006c4a:	d20b      	bcs.n	8006c64 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	681a      	ldr	r2, [r3, #0]
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	1ad2      	subs	r2, r2, r3
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f7ff ff99 	bl	8006b90 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	61fb      	str	r3, [r7, #28]
 8006c62:	e004      	b.n	8006c6e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	2200      	movs	r2, #0
 8006c68:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006c6e:	f000 fe8d 	bl	800798c <vPortExitCritical>

	return xReturn;
 8006c72:	69fb      	ldr	r3, [r7, #28]
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3720      	adds	r7, #32
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}
 8006c7c:	20000fa8 	.word	0x20000fa8
 8006c80:	20000fbc 	.word	0x20000fbc

08006c84 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006c84:	b480      	push	{r7}
 8006c86:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006c88:	4b03      	ldr	r3, [pc, #12]	@ (8006c98 <vTaskMissedYield+0x14>)
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	601a      	str	r2, [r3, #0]
}
 8006c8e:	bf00      	nop
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr
 8006c98:	20000fb8 	.word	0x20000fb8

08006c9c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b082      	sub	sp, #8
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006ca4:	f000 f852 	bl	8006d4c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006ca8:	4b06      	ldr	r3, [pc, #24]	@ (8006cc4 <prvIdleTask+0x28>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	2b01      	cmp	r3, #1
 8006cae:	d9f9      	bls.n	8006ca4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006cb0:	4b05      	ldr	r3, [pc, #20]	@ (8006cc8 <prvIdleTask+0x2c>)
 8006cb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006cb6:	601a      	str	r2, [r3, #0]
 8006cb8:	f3bf 8f4f 	dsb	sy
 8006cbc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006cc0:	e7f0      	b.n	8006ca4 <prvIdleTask+0x8>
 8006cc2:	bf00      	nop
 8006cc4:	20000ad4 	.word	0x20000ad4
 8006cc8:	e000ed04 	.word	0xe000ed04

08006ccc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b082      	sub	sp, #8
 8006cd0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	607b      	str	r3, [r7, #4]
 8006cd6:	e00c      	b.n	8006cf2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006cd8:	687a      	ldr	r2, [r7, #4]
 8006cda:	4613      	mov	r3, r2
 8006cdc:	009b      	lsls	r3, r3, #2
 8006cde:	4413      	add	r3, r2
 8006ce0:	009b      	lsls	r3, r3, #2
 8006ce2:	4a12      	ldr	r2, [pc, #72]	@ (8006d2c <prvInitialiseTaskLists+0x60>)
 8006ce4:	4413      	add	r3, r2
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f7fe fcd6 	bl	8005698 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	3301      	adds	r3, #1
 8006cf0:	607b      	str	r3, [r7, #4]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2b37      	cmp	r3, #55	@ 0x37
 8006cf6:	d9ef      	bls.n	8006cd8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006cf8:	480d      	ldr	r0, [pc, #52]	@ (8006d30 <prvInitialiseTaskLists+0x64>)
 8006cfa:	f7fe fccd 	bl	8005698 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006cfe:	480d      	ldr	r0, [pc, #52]	@ (8006d34 <prvInitialiseTaskLists+0x68>)
 8006d00:	f7fe fcca 	bl	8005698 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006d04:	480c      	ldr	r0, [pc, #48]	@ (8006d38 <prvInitialiseTaskLists+0x6c>)
 8006d06:	f7fe fcc7 	bl	8005698 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006d0a:	480c      	ldr	r0, [pc, #48]	@ (8006d3c <prvInitialiseTaskLists+0x70>)
 8006d0c:	f7fe fcc4 	bl	8005698 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006d10:	480b      	ldr	r0, [pc, #44]	@ (8006d40 <prvInitialiseTaskLists+0x74>)
 8006d12:	f7fe fcc1 	bl	8005698 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006d16:	4b0b      	ldr	r3, [pc, #44]	@ (8006d44 <prvInitialiseTaskLists+0x78>)
 8006d18:	4a05      	ldr	r2, [pc, #20]	@ (8006d30 <prvInitialiseTaskLists+0x64>)
 8006d1a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006d1c:	4b0a      	ldr	r3, [pc, #40]	@ (8006d48 <prvInitialiseTaskLists+0x7c>)
 8006d1e:	4a05      	ldr	r2, [pc, #20]	@ (8006d34 <prvInitialiseTaskLists+0x68>)
 8006d20:	601a      	str	r2, [r3, #0]
}
 8006d22:	bf00      	nop
 8006d24:	3708      	adds	r7, #8
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}
 8006d2a:	bf00      	nop
 8006d2c:	20000ad4 	.word	0x20000ad4
 8006d30:	20000f34 	.word	0x20000f34
 8006d34:	20000f48 	.word	0x20000f48
 8006d38:	20000f64 	.word	0x20000f64
 8006d3c:	20000f78 	.word	0x20000f78
 8006d40:	20000f90 	.word	0x20000f90
 8006d44:	20000f5c 	.word	0x20000f5c
 8006d48:	20000f60 	.word	0x20000f60

08006d4c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b082      	sub	sp, #8
 8006d50:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006d52:	e019      	b.n	8006d88 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006d54:	f000 fde8 	bl	8007928 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d58:	4b10      	ldr	r3, [pc, #64]	@ (8006d9c <prvCheckTasksWaitingTermination+0x50>)
 8006d5a:	68db      	ldr	r3, [r3, #12]
 8006d5c:	68db      	ldr	r3, [r3, #12]
 8006d5e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	3304      	adds	r3, #4
 8006d64:	4618      	mov	r0, r3
 8006d66:	f7fe fd21 	bl	80057ac <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006d6a:	4b0d      	ldr	r3, [pc, #52]	@ (8006da0 <prvCheckTasksWaitingTermination+0x54>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	3b01      	subs	r3, #1
 8006d70:	4a0b      	ldr	r2, [pc, #44]	@ (8006da0 <prvCheckTasksWaitingTermination+0x54>)
 8006d72:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006d74:	4b0b      	ldr	r3, [pc, #44]	@ (8006da4 <prvCheckTasksWaitingTermination+0x58>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	3b01      	subs	r3, #1
 8006d7a:	4a0a      	ldr	r2, [pc, #40]	@ (8006da4 <prvCheckTasksWaitingTermination+0x58>)
 8006d7c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006d7e:	f000 fe05 	bl	800798c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f000 f810 	bl	8006da8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006d88:	4b06      	ldr	r3, [pc, #24]	@ (8006da4 <prvCheckTasksWaitingTermination+0x58>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d1e1      	bne.n	8006d54 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006d90:	bf00      	nop
 8006d92:	bf00      	nop
 8006d94:	3708      	adds	r7, #8
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}
 8006d9a:	bf00      	nop
 8006d9c:	20000f78 	.word	0x20000f78
 8006da0:	20000fa4 	.word	0x20000fa4
 8006da4:	20000f8c 	.word	0x20000f8c

08006da8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b084      	sub	sp, #16
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d108      	bne.n	8006dcc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f000 ffa2 	bl	8007d08 <vPortFree>
				vPortFree( pxTCB );
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f000 ff9f 	bl	8007d08 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006dca:	e019      	b.n	8006e00 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006dd2:	2b01      	cmp	r3, #1
 8006dd4:	d103      	bne.n	8006dde <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f000 ff96 	bl	8007d08 <vPortFree>
	}
 8006ddc:	e010      	b.n	8006e00 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006de4:	2b02      	cmp	r3, #2
 8006de6:	d00b      	beq.n	8006e00 <prvDeleteTCB+0x58>
	__asm volatile
 8006de8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dec:	f383 8811 	msr	BASEPRI, r3
 8006df0:	f3bf 8f6f 	isb	sy
 8006df4:	f3bf 8f4f 	dsb	sy
 8006df8:	60fb      	str	r3, [r7, #12]
}
 8006dfa:	bf00      	nop
 8006dfc:	bf00      	nop
 8006dfe:	e7fd      	b.n	8006dfc <prvDeleteTCB+0x54>
	}
 8006e00:	bf00      	nop
 8006e02:	3710      	adds	r7, #16
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}

08006e08 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b083      	sub	sp, #12
 8006e0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e0e:	4b0c      	ldr	r3, [pc, #48]	@ (8006e40 <prvResetNextTaskUnblockTime+0x38>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d104      	bne.n	8006e22 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006e18:	4b0a      	ldr	r3, [pc, #40]	@ (8006e44 <prvResetNextTaskUnblockTime+0x3c>)
 8006e1a:	f04f 32ff 	mov.w	r2, #4294967295
 8006e1e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006e20:	e008      	b.n	8006e34 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e22:	4b07      	ldr	r3, [pc, #28]	@ (8006e40 <prvResetNextTaskUnblockTime+0x38>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	68db      	ldr	r3, [r3, #12]
 8006e28:	68db      	ldr	r3, [r3, #12]
 8006e2a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	4a04      	ldr	r2, [pc, #16]	@ (8006e44 <prvResetNextTaskUnblockTime+0x3c>)
 8006e32:	6013      	str	r3, [r2, #0]
}
 8006e34:	bf00      	nop
 8006e36:	370c      	adds	r7, #12
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3e:	4770      	bx	lr
 8006e40:	20000f5c 	.word	0x20000f5c
 8006e44:	20000fc4 	.word	0x20000fc4

08006e48 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006e48:	b480      	push	{r7}
 8006e4a:	b083      	sub	sp, #12
 8006e4c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006e4e:	4b0b      	ldr	r3, [pc, #44]	@ (8006e7c <xTaskGetSchedulerState+0x34>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d102      	bne.n	8006e5c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006e56:	2301      	movs	r3, #1
 8006e58:	607b      	str	r3, [r7, #4]
 8006e5a:	e008      	b.n	8006e6e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e5c:	4b08      	ldr	r3, [pc, #32]	@ (8006e80 <xTaskGetSchedulerState+0x38>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d102      	bne.n	8006e6a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006e64:	2302      	movs	r3, #2
 8006e66:	607b      	str	r3, [r7, #4]
 8006e68:	e001      	b.n	8006e6e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006e6e:	687b      	ldr	r3, [r7, #4]
	}
 8006e70:	4618      	mov	r0, r3
 8006e72:	370c      	adds	r7, #12
 8006e74:	46bd      	mov	sp, r7
 8006e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7a:	4770      	bx	lr
 8006e7c:	20000fb0 	.word	0x20000fb0
 8006e80:	20000fcc 	.word	0x20000fcc

08006e84 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b086      	sub	sp, #24
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006e90:	2300      	movs	r3, #0
 8006e92:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d058      	beq.n	8006f4c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006e9a:	4b2f      	ldr	r3, [pc, #188]	@ (8006f58 <xTaskPriorityDisinherit+0xd4>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	693a      	ldr	r2, [r7, #16]
 8006ea0:	429a      	cmp	r2, r3
 8006ea2:	d00b      	beq.n	8006ebc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006ea4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ea8:	f383 8811 	msr	BASEPRI, r3
 8006eac:	f3bf 8f6f 	isb	sy
 8006eb0:	f3bf 8f4f 	dsb	sy
 8006eb4:	60fb      	str	r3, [r7, #12]
}
 8006eb6:	bf00      	nop
 8006eb8:	bf00      	nop
 8006eba:	e7fd      	b.n	8006eb8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d10b      	bne.n	8006edc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006ec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ec8:	f383 8811 	msr	BASEPRI, r3
 8006ecc:	f3bf 8f6f 	isb	sy
 8006ed0:	f3bf 8f4f 	dsb	sy
 8006ed4:	60bb      	str	r3, [r7, #8]
}
 8006ed6:	bf00      	nop
 8006ed8:	bf00      	nop
 8006eda:	e7fd      	b.n	8006ed8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ee0:	1e5a      	subs	r2, r3, #1
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006eee:	429a      	cmp	r2, r3
 8006ef0:	d02c      	beq.n	8006f4c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d128      	bne.n	8006f4c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	3304      	adds	r3, #4
 8006efe:	4618      	mov	r0, r3
 8006f00:	f7fe fc54 	bl	80057ac <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006f04:	693b      	ldr	r3, [r7, #16]
 8006f06:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f0c:	693b      	ldr	r3, [r7, #16]
 8006f0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f10:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006f14:	693b      	ldr	r3, [r7, #16]
 8006f16:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f1c:	4b0f      	ldr	r3, [pc, #60]	@ (8006f5c <xTaskPriorityDisinherit+0xd8>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	429a      	cmp	r2, r3
 8006f22:	d903      	bls.n	8006f2c <xTaskPriorityDisinherit+0xa8>
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f28:	4a0c      	ldr	r2, [pc, #48]	@ (8006f5c <xTaskPriorityDisinherit+0xd8>)
 8006f2a:	6013      	str	r3, [r2, #0]
 8006f2c:	693b      	ldr	r3, [r7, #16]
 8006f2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f30:	4613      	mov	r3, r2
 8006f32:	009b      	lsls	r3, r3, #2
 8006f34:	4413      	add	r3, r2
 8006f36:	009b      	lsls	r3, r3, #2
 8006f38:	4a09      	ldr	r2, [pc, #36]	@ (8006f60 <xTaskPriorityDisinherit+0xdc>)
 8006f3a:	441a      	add	r2, r3
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	3304      	adds	r3, #4
 8006f40:	4619      	mov	r1, r3
 8006f42:	4610      	mov	r0, r2
 8006f44:	f7fe fbd5 	bl	80056f2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006f48:	2301      	movs	r3, #1
 8006f4a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006f4c:	697b      	ldr	r3, [r7, #20]
	}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3718      	adds	r7, #24
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}
 8006f56:	bf00      	nop
 8006f58:	20000ad0 	.word	0x20000ad0
 8006f5c:	20000fac 	.word	0x20000fac
 8006f60:	20000ad4 	.word	0x20000ad4

08006f64 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b084      	sub	sp, #16
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006f6e:	4b21      	ldr	r3, [pc, #132]	@ (8006ff4 <prvAddCurrentTaskToDelayedList+0x90>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f74:	4b20      	ldr	r3, [pc, #128]	@ (8006ff8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	3304      	adds	r3, #4
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f7fe fc16 	bl	80057ac <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f86:	d10a      	bne.n	8006f9e <prvAddCurrentTaskToDelayedList+0x3a>
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d007      	beq.n	8006f9e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f8e:	4b1a      	ldr	r3, [pc, #104]	@ (8006ff8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	3304      	adds	r3, #4
 8006f94:	4619      	mov	r1, r3
 8006f96:	4819      	ldr	r0, [pc, #100]	@ (8006ffc <prvAddCurrentTaskToDelayedList+0x98>)
 8006f98:	f7fe fbab 	bl	80056f2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006f9c:	e026      	b.n	8006fec <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006f9e:	68fa      	ldr	r2, [r7, #12]
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	4413      	add	r3, r2
 8006fa4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006fa6:	4b14      	ldr	r3, [pc, #80]	@ (8006ff8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	68ba      	ldr	r2, [r7, #8]
 8006fac:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006fae:	68ba      	ldr	r2, [r7, #8]
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	429a      	cmp	r2, r3
 8006fb4:	d209      	bcs.n	8006fca <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006fb6:	4b12      	ldr	r3, [pc, #72]	@ (8007000 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006fb8:	681a      	ldr	r2, [r3, #0]
 8006fba:	4b0f      	ldr	r3, [pc, #60]	@ (8006ff8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	3304      	adds	r3, #4
 8006fc0:	4619      	mov	r1, r3
 8006fc2:	4610      	mov	r0, r2
 8006fc4:	f7fe fbb9 	bl	800573a <vListInsert>
}
 8006fc8:	e010      	b.n	8006fec <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006fca:	4b0e      	ldr	r3, [pc, #56]	@ (8007004 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006fcc:	681a      	ldr	r2, [r3, #0]
 8006fce:	4b0a      	ldr	r3, [pc, #40]	@ (8006ff8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	3304      	adds	r3, #4
 8006fd4:	4619      	mov	r1, r3
 8006fd6:	4610      	mov	r0, r2
 8006fd8:	f7fe fbaf 	bl	800573a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006fdc:	4b0a      	ldr	r3, [pc, #40]	@ (8007008 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	68ba      	ldr	r2, [r7, #8]
 8006fe2:	429a      	cmp	r2, r3
 8006fe4:	d202      	bcs.n	8006fec <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006fe6:	4a08      	ldr	r2, [pc, #32]	@ (8007008 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	6013      	str	r3, [r2, #0]
}
 8006fec:	bf00      	nop
 8006fee:	3710      	adds	r7, #16
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}
 8006ff4:	20000fa8 	.word	0x20000fa8
 8006ff8:	20000ad0 	.word	0x20000ad0
 8006ffc:	20000f90 	.word	0x20000f90
 8007000:	20000f60 	.word	0x20000f60
 8007004:	20000f5c 	.word	0x20000f5c
 8007008:	20000fc4 	.word	0x20000fc4

0800700c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b08a      	sub	sp, #40	@ 0x28
 8007010:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007012:	2300      	movs	r3, #0
 8007014:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007016:	f000 fb13 	bl	8007640 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800701a:	4b1d      	ldr	r3, [pc, #116]	@ (8007090 <xTimerCreateTimerTask+0x84>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d021      	beq.n	8007066 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007022:	2300      	movs	r3, #0
 8007024:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007026:	2300      	movs	r3, #0
 8007028:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800702a:	1d3a      	adds	r2, r7, #4
 800702c:	f107 0108 	add.w	r1, r7, #8
 8007030:	f107 030c 	add.w	r3, r7, #12
 8007034:	4618      	mov	r0, r3
 8007036:	f7fe fb15 	bl	8005664 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800703a:	6879      	ldr	r1, [r7, #4]
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	68fa      	ldr	r2, [r7, #12]
 8007040:	9202      	str	r2, [sp, #8]
 8007042:	9301      	str	r3, [sp, #4]
 8007044:	2302      	movs	r3, #2
 8007046:	9300      	str	r3, [sp, #0]
 8007048:	2300      	movs	r3, #0
 800704a:	460a      	mov	r2, r1
 800704c:	4911      	ldr	r1, [pc, #68]	@ (8007094 <xTimerCreateTimerTask+0x88>)
 800704e:	4812      	ldr	r0, [pc, #72]	@ (8007098 <xTimerCreateTimerTask+0x8c>)
 8007050:	f7ff f8d0 	bl	80061f4 <xTaskCreateStatic>
 8007054:	4603      	mov	r3, r0
 8007056:	4a11      	ldr	r2, [pc, #68]	@ (800709c <xTimerCreateTimerTask+0x90>)
 8007058:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800705a:	4b10      	ldr	r3, [pc, #64]	@ (800709c <xTimerCreateTimerTask+0x90>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d001      	beq.n	8007066 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007062:	2301      	movs	r3, #1
 8007064:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d10b      	bne.n	8007084 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800706c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007070:	f383 8811 	msr	BASEPRI, r3
 8007074:	f3bf 8f6f 	isb	sy
 8007078:	f3bf 8f4f 	dsb	sy
 800707c:	613b      	str	r3, [r7, #16]
}
 800707e:	bf00      	nop
 8007080:	bf00      	nop
 8007082:	e7fd      	b.n	8007080 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007084:	697b      	ldr	r3, [r7, #20]
}
 8007086:	4618      	mov	r0, r3
 8007088:	3718      	adds	r7, #24
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}
 800708e:	bf00      	nop
 8007090:	20001000 	.word	0x20001000
 8007094:	08008918 	.word	0x08008918
 8007098:	080071d9 	.word	0x080071d9
 800709c:	20001004 	.word	0x20001004

080070a0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b08a      	sub	sp, #40	@ 0x28
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	60f8      	str	r0, [r7, #12]
 80070a8:	60b9      	str	r1, [r7, #8]
 80070aa:	607a      	str	r2, [r7, #4]
 80070ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80070ae:	2300      	movs	r3, #0
 80070b0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d10b      	bne.n	80070d0 <xTimerGenericCommand+0x30>
	__asm volatile
 80070b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070bc:	f383 8811 	msr	BASEPRI, r3
 80070c0:	f3bf 8f6f 	isb	sy
 80070c4:	f3bf 8f4f 	dsb	sy
 80070c8:	623b      	str	r3, [r7, #32]
}
 80070ca:	bf00      	nop
 80070cc:	bf00      	nop
 80070ce:	e7fd      	b.n	80070cc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80070d0:	4b19      	ldr	r3, [pc, #100]	@ (8007138 <xTimerGenericCommand+0x98>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d02a      	beq.n	800712e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	2b05      	cmp	r3, #5
 80070e8:	dc18      	bgt.n	800711c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80070ea:	f7ff fead 	bl	8006e48 <xTaskGetSchedulerState>
 80070ee:	4603      	mov	r3, r0
 80070f0:	2b02      	cmp	r3, #2
 80070f2:	d109      	bne.n	8007108 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80070f4:	4b10      	ldr	r3, [pc, #64]	@ (8007138 <xTimerGenericCommand+0x98>)
 80070f6:	6818      	ldr	r0, [r3, #0]
 80070f8:	f107 0110 	add.w	r1, r7, #16
 80070fc:	2300      	movs	r3, #0
 80070fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007100:	f7fe fc88 	bl	8005a14 <xQueueGenericSend>
 8007104:	6278      	str	r0, [r7, #36]	@ 0x24
 8007106:	e012      	b.n	800712e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007108:	4b0b      	ldr	r3, [pc, #44]	@ (8007138 <xTimerGenericCommand+0x98>)
 800710a:	6818      	ldr	r0, [r3, #0]
 800710c:	f107 0110 	add.w	r1, r7, #16
 8007110:	2300      	movs	r3, #0
 8007112:	2200      	movs	r2, #0
 8007114:	f7fe fc7e 	bl	8005a14 <xQueueGenericSend>
 8007118:	6278      	str	r0, [r7, #36]	@ 0x24
 800711a:	e008      	b.n	800712e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800711c:	4b06      	ldr	r3, [pc, #24]	@ (8007138 <xTimerGenericCommand+0x98>)
 800711e:	6818      	ldr	r0, [r3, #0]
 8007120:	f107 0110 	add.w	r1, r7, #16
 8007124:	2300      	movs	r3, #0
 8007126:	683a      	ldr	r2, [r7, #0]
 8007128:	f7fe fd76 	bl	8005c18 <xQueueGenericSendFromISR>
 800712c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800712e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007130:	4618      	mov	r0, r3
 8007132:	3728      	adds	r7, #40	@ 0x28
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}
 8007138:	20001000 	.word	0x20001000

0800713c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b088      	sub	sp, #32
 8007140:	af02      	add	r7, sp, #8
 8007142:	6078      	str	r0, [r7, #4]
 8007144:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007146:	4b23      	ldr	r3, [pc, #140]	@ (80071d4 <prvProcessExpiredTimer+0x98>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	68db      	ldr	r3, [r3, #12]
 800714c:	68db      	ldr	r3, [r3, #12]
 800714e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	3304      	adds	r3, #4
 8007154:	4618      	mov	r0, r3
 8007156:	f7fe fb29 	bl	80057ac <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007160:	f003 0304 	and.w	r3, r3, #4
 8007164:	2b00      	cmp	r3, #0
 8007166:	d023      	beq.n	80071b0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	699a      	ldr	r2, [r3, #24]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	18d1      	adds	r1, r2, r3
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	683a      	ldr	r2, [r7, #0]
 8007174:	6978      	ldr	r0, [r7, #20]
 8007176:	f000 f8d5 	bl	8007324 <prvInsertTimerInActiveList>
 800717a:	4603      	mov	r3, r0
 800717c:	2b00      	cmp	r3, #0
 800717e:	d020      	beq.n	80071c2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007180:	2300      	movs	r3, #0
 8007182:	9300      	str	r3, [sp, #0]
 8007184:	2300      	movs	r3, #0
 8007186:	687a      	ldr	r2, [r7, #4]
 8007188:	2100      	movs	r1, #0
 800718a:	6978      	ldr	r0, [r7, #20]
 800718c:	f7ff ff88 	bl	80070a0 <xTimerGenericCommand>
 8007190:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d114      	bne.n	80071c2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007198:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800719c:	f383 8811 	msr	BASEPRI, r3
 80071a0:	f3bf 8f6f 	isb	sy
 80071a4:	f3bf 8f4f 	dsb	sy
 80071a8:	60fb      	str	r3, [r7, #12]
}
 80071aa:	bf00      	nop
 80071ac:	bf00      	nop
 80071ae:	e7fd      	b.n	80071ac <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80071b6:	f023 0301 	bic.w	r3, r3, #1
 80071ba:	b2da      	uxtb	r2, r3
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	6a1b      	ldr	r3, [r3, #32]
 80071c6:	6978      	ldr	r0, [r7, #20]
 80071c8:	4798      	blx	r3
}
 80071ca:	bf00      	nop
 80071cc:	3718      	adds	r7, #24
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}
 80071d2:	bf00      	nop
 80071d4:	20000ff8 	.word	0x20000ff8

080071d8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b084      	sub	sp, #16
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80071e0:	f107 0308 	add.w	r3, r7, #8
 80071e4:	4618      	mov	r0, r3
 80071e6:	f000 f859 	bl	800729c <prvGetNextExpireTime>
 80071ea:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	4619      	mov	r1, r3
 80071f0:	68f8      	ldr	r0, [r7, #12]
 80071f2:	f000 f805 	bl	8007200 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80071f6:	f000 f8d7 	bl	80073a8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80071fa:	bf00      	nop
 80071fc:	e7f0      	b.n	80071e0 <prvTimerTask+0x8>
	...

08007200 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b084      	sub	sp, #16
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
 8007208:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800720a:	f7ff fa37 	bl	800667c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800720e:	f107 0308 	add.w	r3, r7, #8
 8007212:	4618      	mov	r0, r3
 8007214:	f000 f866 	bl	80072e4 <prvSampleTimeNow>
 8007218:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d130      	bne.n	8007282 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d10a      	bne.n	800723c <prvProcessTimerOrBlockTask+0x3c>
 8007226:	687a      	ldr	r2, [r7, #4]
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	429a      	cmp	r2, r3
 800722c:	d806      	bhi.n	800723c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800722e:	f7ff fa33 	bl	8006698 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007232:	68f9      	ldr	r1, [r7, #12]
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f7ff ff81 	bl	800713c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800723a:	e024      	b.n	8007286 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d008      	beq.n	8007254 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007242:	4b13      	ldr	r3, [pc, #76]	@ (8007290 <prvProcessTimerOrBlockTask+0x90>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d101      	bne.n	8007250 <prvProcessTimerOrBlockTask+0x50>
 800724c:	2301      	movs	r3, #1
 800724e:	e000      	b.n	8007252 <prvProcessTimerOrBlockTask+0x52>
 8007250:	2300      	movs	r3, #0
 8007252:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007254:	4b0f      	ldr	r3, [pc, #60]	@ (8007294 <prvProcessTimerOrBlockTask+0x94>)
 8007256:	6818      	ldr	r0, [r3, #0]
 8007258:	687a      	ldr	r2, [r7, #4]
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	1ad3      	subs	r3, r2, r3
 800725e:	683a      	ldr	r2, [r7, #0]
 8007260:	4619      	mov	r1, r3
 8007262:	f7fe ff93 	bl	800618c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007266:	f7ff fa17 	bl	8006698 <xTaskResumeAll>
 800726a:	4603      	mov	r3, r0
 800726c:	2b00      	cmp	r3, #0
 800726e:	d10a      	bne.n	8007286 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007270:	4b09      	ldr	r3, [pc, #36]	@ (8007298 <prvProcessTimerOrBlockTask+0x98>)
 8007272:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007276:	601a      	str	r2, [r3, #0]
 8007278:	f3bf 8f4f 	dsb	sy
 800727c:	f3bf 8f6f 	isb	sy
}
 8007280:	e001      	b.n	8007286 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007282:	f7ff fa09 	bl	8006698 <xTaskResumeAll>
}
 8007286:	bf00      	nop
 8007288:	3710      	adds	r7, #16
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}
 800728e:	bf00      	nop
 8007290:	20000ffc 	.word	0x20000ffc
 8007294:	20001000 	.word	0x20001000
 8007298:	e000ed04 	.word	0xe000ed04

0800729c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800729c:	b480      	push	{r7}
 800729e:	b085      	sub	sp, #20
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80072a4:	4b0e      	ldr	r3, [pc, #56]	@ (80072e0 <prvGetNextExpireTime+0x44>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d101      	bne.n	80072b2 <prvGetNextExpireTime+0x16>
 80072ae:	2201      	movs	r2, #1
 80072b0:	e000      	b.n	80072b4 <prvGetNextExpireTime+0x18>
 80072b2:	2200      	movs	r2, #0
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d105      	bne.n	80072cc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80072c0:	4b07      	ldr	r3, [pc, #28]	@ (80072e0 <prvGetNextExpireTime+0x44>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	68db      	ldr	r3, [r3, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	60fb      	str	r3, [r7, #12]
 80072ca:	e001      	b.n	80072d0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80072cc:	2300      	movs	r3, #0
 80072ce:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80072d0:	68fb      	ldr	r3, [r7, #12]
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	3714      	adds	r7, #20
 80072d6:	46bd      	mov	sp, r7
 80072d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072dc:	4770      	bx	lr
 80072de:	bf00      	nop
 80072e0:	20000ff8 	.word	0x20000ff8

080072e4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b084      	sub	sp, #16
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80072ec:	f7ff fa72 	bl	80067d4 <xTaskGetTickCount>
 80072f0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80072f2:	4b0b      	ldr	r3, [pc, #44]	@ (8007320 <prvSampleTimeNow+0x3c>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	68fa      	ldr	r2, [r7, #12]
 80072f8:	429a      	cmp	r2, r3
 80072fa:	d205      	bcs.n	8007308 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80072fc:	f000 f93a 	bl	8007574 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2201      	movs	r2, #1
 8007304:	601a      	str	r2, [r3, #0]
 8007306:	e002      	b.n	800730e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2200      	movs	r2, #0
 800730c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800730e:	4a04      	ldr	r2, [pc, #16]	@ (8007320 <prvSampleTimeNow+0x3c>)
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007314:	68fb      	ldr	r3, [r7, #12]
}
 8007316:	4618      	mov	r0, r3
 8007318:	3710      	adds	r7, #16
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}
 800731e:	bf00      	nop
 8007320:	20001008 	.word	0x20001008

08007324 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b086      	sub	sp, #24
 8007328:	af00      	add	r7, sp, #0
 800732a:	60f8      	str	r0, [r7, #12]
 800732c:	60b9      	str	r1, [r7, #8]
 800732e:	607a      	str	r2, [r7, #4]
 8007330:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007332:	2300      	movs	r3, #0
 8007334:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	68ba      	ldr	r2, [r7, #8]
 800733a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	68fa      	ldr	r2, [r7, #12]
 8007340:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007342:	68ba      	ldr	r2, [r7, #8]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	429a      	cmp	r2, r3
 8007348:	d812      	bhi.n	8007370 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800734a:	687a      	ldr	r2, [r7, #4]
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	1ad2      	subs	r2, r2, r3
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	699b      	ldr	r3, [r3, #24]
 8007354:	429a      	cmp	r2, r3
 8007356:	d302      	bcc.n	800735e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007358:	2301      	movs	r3, #1
 800735a:	617b      	str	r3, [r7, #20]
 800735c:	e01b      	b.n	8007396 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800735e:	4b10      	ldr	r3, [pc, #64]	@ (80073a0 <prvInsertTimerInActiveList+0x7c>)
 8007360:	681a      	ldr	r2, [r3, #0]
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	3304      	adds	r3, #4
 8007366:	4619      	mov	r1, r3
 8007368:	4610      	mov	r0, r2
 800736a:	f7fe f9e6 	bl	800573a <vListInsert>
 800736e:	e012      	b.n	8007396 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007370:	687a      	ldr	r2, [r7, #4]
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	429a      	cmp	r2, r3
 8007376:	d206      	bcs.n	8007386 <prvInsertTimerInActiveList+0x62>
 8007378:	68ba      	ldr	r2, [r7, #8]
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	429a      	cmp	r2, r3
 800737e:	d302      	bcc.n	8007386 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007380:	2301      	movs	r3, #1
 8007382:	617b      	str	r3, [r7, #20]
 8007384:	e007      	b.n	8007396 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007386:	4b07      	ldr	r3, [pc, #28]	@ (80073a4 <prvInsertTimerInActiveList+0x80>)
 8007388:	681a      	ldr	r2, [r3, #0]
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	3304      	adds	r3, #4
 800738e:	4619      	mov	r1, r3
 8007390:	4610      	mov	r0, r2
 8007392:	f7fe f9d2 	bl	800573a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007396:	697b      	ldr	r3, [r7, #20]
}
 8007398:	4618      	mov	r0, r3
 800739a:	3718      	adds	r7, #24
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}
 80073a0:	20000ffc 	.word	0x20000ffc
 80073a4:	20000ff8 	.word	0x20000ff8

080073a8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b08e      	sub	sp, #56	@ 0x38
 80073ac:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80073ae:	e0ce      	b.n	800754e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	da19      	bge.n	80073ea <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80073b6:	1d3b      	adds	r3, r7, #4
 80073b8:	3304      	adds	r3, #4
 80073ba:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80073bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d10b      	bne.n	80073da <prvProcessReceivedCommands+0x32>
	__asm volatile
 80073c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073c6:	f383 8811 	msr	BASEPRI, r3
 80073ca:	f3bf 8f6f 	isb	sy
 80073ce:	f3bf 8f4f 	dsb	sy
 80073d2:	61fb      	str	r3, [r7, #28]
}
 80073d4:	bf00      	nop
 80073d6:	bf00      	nop
 80073d8:	e7fd      	b.n	80073d6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80073da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80073e0:	6850      	ldr	r0, [r2, #4]
 80073e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80073e4:	6892      	ldr	r2, [r2, #8]
 80073e6:	4611      	mov	r1, r2
 80073e8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	f2c0 80ae 	blt.w	800754e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80073f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073f8:	695b      	ldr	r3, [r3, #20]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d004      	beq.n	8007408 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80073fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007400:	3304      	adds	r3, #4
 8007402:	4618      	mov	r0, r3
 8007404:	f7fe f9d2 	bl	80057ac <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007408:	463b      	mov	r3, r7
 800740a:	4618      	mov	r0, r3
 800740c:	f7ff ff6a 	bl	80072e4 <prvSampleTimeNow>
 8007410:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2b09      	cmp	r3, #9
 8007416:	f200 8097 	bhi.w	8007548 <prvProcessReceivedCommands+0x1a0>
 800741a:	a201      	add	r2, pc, #4	@ (adr r2, 8007420 <prvProcessReceivedCommands+0x78>)
 800741c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007420:	08007449 	.word	0x08007449
 8007424:	08007449 	.word	0x08007449
 8007428:	08007449 	.word	0x08007449
 800742c:	080074bf 	.word	0x080074bf
 8007430:	080074d3 	.word	0x080074d3
 8007434:	0800751f 	.word	0x0800751f
 8007438:	08007449 	.word	0x08007449
 800743c:	08007449 	.word	0x08007449
 8007440:	080074bf 	.word	0x080074bf
 8007444:	080074d3 	.word	0x080074d3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007448:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800744a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800744e:	f043 0301 	orr.w	r3, r3, #1
 8007452:	b2da      	uxtb	r2, r3
 8007454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007456:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800745a:	68ba      	ldr	r2, [r7, #8]
 800745c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800745e:	699b      	ldr	r3, [r3, #24]
 8007460:	18d1      	adds	r1, r2, r3
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007466:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007468:	f7ff ff5c 	bl	8007324 <prvInsertTimerInActiveList>
 800746c:	4603      	mov	r3, r0
 800746e:	2b00      	cmp	r3, #0
 8007470:	d06c      	beq.n	800754c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007472:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007474:	6a1b      	ldr	r3, [r3, #32]
 8007476:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007478:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800747a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800747c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007480:	f003 0304 	and.w	r3, r3, #4
 8007484:	2b00      	cmp	r3, #0
 8007486:	d061      	beq.n	800754c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007488:	68ba      	ldr	r2, [r7, #8]
 800748a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800748c:	699b      	ldr	r3, [r3, #24]
 800748e:	441a      	add	r2, r3
 8007490:	2300      	movs	r3, #0
 8007492:	9300      	str	r3, [sp, #0]
 8007494:	2300      	movs	r3, #0
 8007496:	2100      	movs	r1, #0
 8007498:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800749a:	f7ff fe01 	bl	80070a0 <xTimerGenericCommand>
 800749e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80074a0:	6a3b      	ldr	r3, [r7, #32]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d152      	bne.n	800754c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80074a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074aa:	f383 8811 	msr	BASEPRI, r3
 80074ae:	f3bf 8f6f 	isb	sy
 80074b2:	f3bf 8f4f 	dsb	sy
 80074b6:	61bb      	str	r3, [r7, #24]
}
 80074b8:	bf00      	nop
 80074ba:	bf00      	nop
 80074bc:	e7fd      	b.n	80074ba <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80074be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80074c4:	f023 0301 	bic.w	r3, r3, #1
 80074c8:	b2da      	uxtb	r2, r3
 80074ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074cc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80074d0:	e03d      	b.n	800754e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80074d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80074d8:	f043 0301 	orr.w	r3, r3, #1
 80074dc:	b2da      	uxtb	r2, r3
 80074de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074e0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80074e4:	68ba      	ldr	r2, [r7, #8]
 80074e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074e8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80074ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074ec:	699b      	ldr	r3, [r3, #24]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d10b      	bne.n	800750a <prvProcessReceivedCommands+0x162>
	__asm volatile
 80074f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074f6:	f383 8811 	msr	BASEPRI, r3
 80074fa:	f3bf 8f6f 	isb	sy
 80074fe:	f3bf 8f4f 	dsb	sy
 8007502:	617b      	str	r3, [r7, #20]
}
 8007504:	bf00      	nop
 8007506:	bf00      	nop
 8007508:	e7fd      	b.n	8007506 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800750a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800750c:	699a      	ldr	r2, [r3, #24]
 800750e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007510:	18d1      	adds	r1, r2, r3
 8007512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007514:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007516:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007518:	f7ff ff04 	bl	8007324 <prvInsertTimerInActiveList>
					break;
 800751c:	e017      	b.n	800754e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800751e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007520:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007524:	f003 0302 	and.w	r3, r3, #2
 8007528:	2b00      	cmp	r3, #0
 800752a:	d103      	bne.n	8007534 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800752c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800752e:	f000 fbeb 	bl	8007d08 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007532:	e00c      	b.n	800754e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007536:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800753a:	f023 0301 	bic.w	r3, r3, #1
 800753e:	b2da      	uxtb	r2, r3
 8007540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007542:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007546:	e002      	b.n	800754e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007548:	bf00      	nop
 800754a:	e000      	b.n	800754e <prvProcessReceivedCommands+0x1a6>
					break;
 800754c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800754e:	4b08      	ldr	r3, [pc, #32]	@ (8007570 <prvProcessReceivedCommands+0x1c8>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	1d39      	adds	r1, r7, #4
 8007554:	2200      	movs	r2, #0
 8007556:	4618      	mov	r0, r3
 8007558:	f7fe fbfc 	bl	8005d54 <xQueueReceive>
 800755c:	4603      	mov	r3, r0
 800755e:	2b00      	cmp	r3, #0
 8007560:	f47f af26 	bne.w	80073b0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007564:	bf00      	nop
 8007566:	bf00      	nop
 8007568:	3730      	adds	r7, #48	@ 0x30
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}
 800756e:	bf00      	nop
 8007570:	20001000 	.word	0x20001000

08007574 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b088      	sub	sp, #32
 8007578:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800757a:	e049      	b.n	8007610 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800757c:	4b2e      	ldr	r3, [pc, #184]	@ (8007638 <prvSwitchTimerLists+0xc4>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	68db      	ldr	r3, [r3, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007586:	4b2c      	ldr	r3, [pc, #176]	@ (8007638 <prvSwitchTimerLists+0xc4>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	68db      	ldr	r3, [r3, #12]
 800758c:	68db      	ldr	r3, [r3, #12]
 800758e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	3304      	adds	r3, #4
 8007594:	4618      	mov	r0, r3
 8007596:	f7fe f909 	bl	80057ac <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	6a1b      	ldr	r3, [r3, #32]
 800759e:	68f8      	ldr	r0, [r7, #12]
 80075a0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80075a8:	f003 0304 	and.w	r3, r3, #4
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d02f      	beq.n	8007610 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	699b      	ldr	r3, [r3, #24]
 80075b4:	693a      	ldr	r2, [r7, #16]
 80075b6:	4413      	add	r3, r2
 80075b8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80075ba:	68ba      	ldr	r2, [r7, #8]
 80075bc:	693b      	ldr	r3, [r7, #16]
 80075be:	429a      	cmp	r2, r3
 80075c0:	d90e      	bls.n	80075e0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	68ba      	ldr	r2, [r7, #8]
 80075c6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	68fa      	ldr	r2, [r7, #12]
 80075cc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80075ce:	4b1a      	ldr	r3, [pc, #104]	@ (8007638 <prvSwitchTimerLists+0xc4>)
 80075d0:	681a      	ldr	r2, [r3, #0]
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	3304      	adds	r3, #4
 80075d6:	4619      	mov	r1, r3
 80075d8:	4610      	mov	r0, r2
 80075da:	f7fe f8ae 	bl	800573a <vListInsert>
 80075de:	e017      	b.n	8007610 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80075e0:	2300      	movs	r3, #0
 80075e2:	9300      	str	r3, [sp, #0]
 80075e4:	2300      	movs	r3, #0
 80075e6:	693a      	ldr	r2, [r7, #16]
 80075e8:	2100      	movs	r1, #0
 80075ea:	68f8      	ldr	r0, [r7, #12]
 80075ec:	f7ff fd58 	bl	80070a0 <xTimerGenericCommand>
 80075f0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d10b      	bne.n	8007610 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80075f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075fc:	f383 8811 	msr	BASEPRI, r3
 8007600:	f3bf 8f6f 	isb	sy
 8007604:	f3bf 8f4f 	dsb	sy
 8007608:	603b      	str	r3, [r7, #0]
}
 800760a:	bf00      	nop
 800760c:	bf00      	nop
 800760e:	e7fd      	b.n	800760c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007610:	4b09      	ldr	r3, [pc, #36]	@ (8007638 <prvSwitchTimerLists+0xc4>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d1b0      	bne.n	800757c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800761a:	4b07      	ldr	r3, [pc, #28]	@ (8007638 <prvSwitchTimerLists+0xc4>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007620:	4b06      	ldr	r3, [pc, #24]	@ (800763c <prvSwitchTimerLists+0xc8>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a04      	ldr	r2, [pc, #16]	@ (8007638 <prvSwitchTimerLists+0xc4>)
 8007626:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007628:	4a04      	ldr	r2, [pc, #16]	@ (800763c <prvSwitchTimerLists+0xc8>)
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	6013      	str	r3, [r2, #0]
}
 800762e:	bf00      	nop
 8007630:	3718      	adds	r7, #24
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}
 8007636:	bf00      	nop
 8007638:	20000ff8 	.word	0x20000ff8
 800763c:	20000ffc 	.word	0x20000ffc

08007640 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b082      	sub	sp, #8
 8007644:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007646:	f000 f96f 	bl	8007928 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800764a:	4b15      	ldr	r3, [pc, #84]	@ (80076a0 <prvCheckForValidListAndQueue+0x60>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d120      	bne.n	8007694 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007652:	4814      	ldr	r0, [pc, #80]	@ (80076a4 <prvCheckForValidListAndQueue+0x64>)
 8007654:	f7fe f820 	bl	8005698 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007658:	4813      	ldr	r0, [pc, #76]	@ (80076a8 <prvCheckForValidListAndQueue+0x68>)
 800765a:	f7fe f81d 	bl	8005698 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800765e:	4b13      	ldr	r3, [pc, #76]	@ (80076ac <prvCheckForValidListAndQueue+0x6c>)
 8007660:	4a10      	ldr	r2, [pc, #64]	@ (80076a4 <prvCheckForValidListAndQueue+0x64>)
 8007662:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007664:	4b12      	ldr	r3, [pc, #72]	@ (80076b0 <prvCheckForValidListAndQueue+0x70>)
 8007666:	4a10      	ldr	r2, [pc, #64]	@ (80076a8 <prvCheckForValidListAndQueue+0x68>)
 8007668:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800766a:	2300      	movs	r3, #0
 800766c:	9300      	str	r3, [sp, #0]
 800766e:	4b11      	ldr	r3, [pc, #68]	@ (80076b4 <prvCheckForValidListAndQueue+0x74>)
 8007670:	4a11      	ldr	r2, [pc, #68]	@ (80076b8 <prvCheckForValidListAndQueue+0x78>)
 8007672:	2110      	movs	r1, #16
 8007674:	200a      	movs	r0, #10
 8007676:	f7fe f92d 	bl	80058d4 <xQueueGenericCreateStatic>
 800767a:	4603      	mov	r3, r0
 800767c:	4a08      	ldr	r2, [pc, #32]	@ (80076a0 <prvCheckForValidListAndQueue+0x60>)
 800767e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007680:	4b07      	ldr	r3, [pc, #28]	@ (80076a0 <prvCheckForValidListAndQueue+0x60>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d005      	beq.n	8007694 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007688:	4b05      	ldr	r3, [pc, #20]	@ (80076a0 <prvCheckForValidListAndQueue+0x60>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	490b      	ldr	r1, [pc, #44]	@ (80076bc <prvCheckForValidListAndQueue+0x7c>)
 800768e:	4618      	mov	r0, r3
 8007690:	f7fe fd52 	bl	8006138 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007694:	f000 f97a 	bl	800798c <vPortExitCritical>
}
 8007698:	bf00      	nop
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}
 800769e:	bf00      	nop
 80076a0:	20001000 	.word	0x20001000
 80076a4:	20000fd0 	.word	0x20000fd0
 80076a8:	20000fe4 	.word	0x20000fe4
 80076ac:	20000ff8 	.word	0x20000ff8
 80076b0:	20000ffc 	.word	0x20000ffc
 80076b4:	200010ac 	.word	0x200010ac
 80076b8:	2000100c 	.word	0x2000100c
 80076bc:	08008920 	.word	0x08008920

080076c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80076c0:	b480      	push	{r7}
 80076c2:	b085      	sub	sp, #20
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	60f8      	str	r0, [r7, #12]
 80076c8:	60b9      	str	r1, [r7, #8]
 80076ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	3b04      	subs	r3, #4
 80076d0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80076d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	3b04      	subs	r3, #4
 80076de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	f023 0201 	bic.w	r2, r3, #1
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	3b04      	subs	r3, #4
 80076ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80076f0:	4a0c      	ldr	r2, [pc, #48]	@ (8007724 <pxPortInitialiseStack+0x64>)
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	3b14      	subs	r3, #20
 80076fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80076fc:	687a      	ldr	r2, [r7, #4]
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	3b04      	subs	r3, #4
 8007706:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	f06f 0202 	mvn.w	r2, #2
 800770e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	3b20      	subs	r3, #32
 8007714:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007716:	68fb      	ldr	r3, [r7, #12]
}
 8007718:	4618      	mov	r0, r3
 800771a:	3714      	adds	r7, #20
 800771c:	46bd      	mov	sp, r7
 800771e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007722:	4770      	bx	lr
 8007724:	08007729 	.word	0x08007729

08007728 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007728:	b480      	push	{r7}
 800772a:	b085      	sub	sp, #20
 800772c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800772e:	2300      	movs	r3, #0
 8007730:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007732:	4b13      	ldr	r3, [pc, #76]	@ (8007780 <prvTaskExitError+0x58>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800773a:	d00b      	beq.n	8007754 <prvTaskExitError+0x2c>
	__asm volatile
 800773c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007740:	f383 8811 	msr	BASEPRI, r3
 8007744:	f3bf 8f6f 	isb	sy
 8007748:	f3bf 8f4f 	dsb	sy
 800774c:	60fb      	str	r3, [r7, #12]
}
 800774e:	bf00      	nop
 8007750:	bf00      	nop
 8007752:	e7fd      	b.n	8007750 <prvTaskExitError+0x28>
	__asm volatile
 8007754:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007758:	f383 8811 	msr	BASEPRI, r3
 800775c:	f3bf 8f6f 	isb	sy
 8007760:	f3bf 8f4f 	dsb	sy
 8007764:	60bb      	str	r3, [r7, #8]
}
 8007766:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007768:	bf00      	nop
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d0fc      	beq.n	800776a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007770:	bf00      	nop
 8007772:	bf00      	nop
 8007774:	3714      	adds	r7, #20
 8007776:	46bd      	mov	sp, r7
 8007778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777c:	4770      	bx	lr
 800777e:	bf00      	nop
 8007780:	20000068 	.word	0x20000068
	...

08007790 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007790:	4b07      	ldr	r3, [pc, #28]	@ (80077b0 <pxCurrentTCBConst2>)
 8007792:	6819      	ldr	r1, [r3, #0]
 8007794:	6808      	ldr	r0, [r1, #0]
 8007796:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800779a:	f380 8809 	msr	PSP, r0
 800779e:	f3bf 8f6f 	isb	sy
 80077a2:	f04f 0000 	mov.w	r0, #0
 80077a6:	f380 8811 	msr	BASEPRI, r0
 80077aa:	4770      	bx	lr
 80077ac:	f3af 8000 	nop.w

080077b0 <pxCurrentTCBConst2>:
 80077b0:	20000ad0 	.word	0x20000ad0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80077b4:	bf00      	nop
 80077b6:	bf00      	nop

080077b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80077b8:	4808      	ldr	r0, [pc, #32]	@ (80077dc <prvPortStartFirstTask+0x24>)
 80077ba:	6800      	ldr	r0, [r0, #0]
 80077bc:	6800      	ldr	r0, [r0, #0]
 80077be:	f380 8808 	msr	MSP, r0
 80077c2:	f04f 0000 	mov.w	r0, #0
 80077c6:	f380 8814 	msr	CONTROL, r0
 80077ca:	b662      	cpsie	i
 80077cc:	b661      	cpsie	f
 80077ce:	f3bf 8f4f 	dsb	sy
 80077d2:	f3bf 8f6f 	isb	sy
 80077d6:	df00      	svc	0
 80077d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80077da:	bf00      	nop
 80077dc:	e000ed08 	.word	0xe000ed08

080077e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b086      	sub	sp, #24
 80077e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80077e6:	4b47      	ldr	r3, [pc, #284]	@ (8007904 <xPortStartScheduler+0x124>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4a47      	ldr	r2, [pc, #284]	@ (8007908 <xPortStartScheduler+0x128>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d10b      	bne.n	8007808 <xPortStartScheduler+0x28>
	__asm volatile
 80077f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077f4:	f383 8811 	msr	BASEPRI, r3
 80077f8:	f3bf 8f6f 	isb	sy
 80077fc:	f3bf 8f4f 	dsb	sy
 8007800:	60fb      	str	r3, [r7, #12]
}
 8007802:	bf00      	nop
 8007804:	bf00      	nop
 8007806:	e7fd      	b.n	8007804 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007808:	4b3e      	ldr	r3, [pc, #248]	@ (8007904 <xPortStartScheduler+0x124>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a3f      	ldr	r2, [pc, #252]	@ (800790c <xPortStartScheduler+0x12c>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d10b      	bne.n	800782a <xPortStartScheduler+0x4a>
	__asm volatile
 8007812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007816:	f383 8811 	msr	BASEPRI, r3
 800781a:	f3bf 8f6f 	isb	sy
 800781e:	f3bf 8f4f 	dsb	sy
 8007822:	613b      	str	r3, [r7, #16]
}
 8007824:	bf00      	nop
 8007826:	bf00      	nop
 8007828:	e7fd      	b.n	8007826 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800782a:	4b39      	ldr	r3, [pc, #228]	@ (8007910 <xPortStartScheduler+0x130>)
 800782c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	781b      	ldrb	r3, [r3, #0]
 8007832:	b2db      	uxtb	r3, r3
 8007834:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	22ff      	movs	r2, #255	@ 0xff
 800783a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	781b      	ldrb	r3, [r3, #0]
 8007840:	b2db      	uxtb	r3, r3
 8007842:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007844:	78fb      	ldrb	r3, [r7, #3]
 8007846:	b2db      	uxtb	r3, r3
 8007848:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800784c:	b2da      	uxtb	r2, r3
 800784e:	4b31      	ldr	r3, [pc, #196]	@ (8007914 <xPortStartScheduler+0x134>)
 8007850:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007852:	4b31      	ldr	r3, [pc, #196]	@ (8007918 <xPortStartScheduler+0x138>)
 8007854:	2207      	movs	r2, #7
 8007856:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007858:	e009      	b.n	800786e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800785a:	4b2f      	ldr	r3, [pc, #188]	@ (8007918 <xPortStartScheduler+0x138>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	3b01      	subs	r3, #1
 8007860:	4a2d      	ldr	r2, [pc, #180]	@ (8007918 <xPortStartScheduler+0x138>)
 8007862:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007864:	78fb      	ldrb	r3, [r7, #3]
 8007866:	b2db      	uxtb	r3, r3
 8007868:	005b      	lsls	r3, r3, #1
 800786a:	b2db      	uxtb	r3, r3
 800786c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800786e:	78fb      	ldrb	r3, [r7, #3]
 8007870:	b2db      	uxtb	r3, r3
 8007872:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007876:	2b80      	cmp	r3, #128	@ 0x80
 8007878:	d0ef      	beq.n	800785a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800787a:	4b27      	ldr	r3, [pc, #156]	@ (8007918 <xPortStartScheduler+0x138>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f1c3 0307 	rsb	r3, r3, #7
 8007882:	2b04      	cmp	r3, #4
 8007884:	d00b      	beq.n	800789e <xPortStartScheduler+0xbe>
	__asm volatile
 8007886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800788a:	f383 8811 	msr	BASEPRI, r3
 800788e:	f3bf 8f6f 	isb	sy
 8007892:	f3bf 8f4f 	dsb	sy
 8007896:	60bb      	str	r3, [r7, #8]
}
 8007898:	bf00      	nop
 800789a:	bf00      	nop
 800789c:	e7fd      	b.n	800789a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800789e:	4b1e      	ldr	r3, [pc, #120]	@ (8007918 <xPortStartScheduler+0x138>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	021b      	lsls	r3, r3, #8
 80078a4:	4a1c      	ldr	r2, [pc, #112]	@ (8007918 <xPortStartScheduler+0x138>)
 80078a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80078a8:	4b1b      	ldr	r3, [pc, #108]	@ (8007918 <xPortStartScheduler+0x138>)
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80078b0:	4a19      	ldr	r2, [pc, #100]	@ (8007918 <xPortStartScheduler+0x138>)
 80078b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	b2da      	uxtb	r2, r3
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80078bc:	4b17      	ldr	r3, [pc, #92]	@ (800791c <xPortStartScheduler+0x13c>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	4a16      	ldr	r2, [pc, #88]	@ (800791c <xPortStartScheduler+0x13c>)
 80078c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80078c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80078c8:	4b14      	ldr	r3, [pc, #80]	@ (800791c <xPortStartScheduler+0x13c>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4a13      	ldr	r2, [pc, #76]	@ (800791c <xPortStartScheduler+0x13c>)
 80078ce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80078d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80078d4:	f000 f8da 	bl	8007a8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80078d8:	4b11      	ldr	r3, [pc, #68]	@ (8007920 <xPortStartScheduler+0x140>)
 80078da:	2200      	movs	r2, #0
 80078dc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80078de:	f000 f8f9 	bl	8007ad4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80078e2:	4b10      	ldr	r3, [pc, #64]	@ (8007924 <xPortStartScheduler+0x144>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a0f      	ldr	r2, [pc, #60]	@ (8007924 <xPortStartScheduler+0x144>)
 80078e8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80078ec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80078ee:	f7ff ff63 	bl	80077b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80078f2:	f7ff f839 	bl	8006968 <vTaskSwitchContext>
	prvTaskExitError();
 80078f6:	f7ff ff17 	bl	8007728 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80078fa:	2300      	movs	r3, #0
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	3718      	adds	r7, #24
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}
 8007904:	e000ed00 	.word	0xe000ed00
 8007908:	410fc271 	.word	0x410fc271
 800790c:	410fc270 	.word	0x410fc270
 8007910:	e000e400 	.word	0xe000e400
 8007914:	200010fc 	.word	0x200010fc
 8007918:	20001100 	.word	0x20001100
 800791c:	e000ed20 	.word	0xe000ed20
 8007920:	20000068 	.word	0x20000068
 8007924:	e000ef34 	.word	0xe000ef34

08007928 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007928:	b480      	push	{r7}
 800792a:	b083      	sub	sp, #12
 800792c:	af00      	add	r7, sp, #0
	__asm volatile
 800792e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007932:	f383 8811 	msr	BASEPRI, r3
 8007936:	f3bf 8f6f 	isb	sy
 800793a:	f3bf 8f4f 	dsb	sy
 800793e:	607b      	str	r3, [r7, #4]
}
 8007940:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007942:	4b10      	ldr	r3, [pc, #64]	@ (8007984 <vPortEnterCritical+0x5c>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	3301      	adds	r3, #1
 8007948:	4a0e      	ldr	r2, [pc, #56]	@ (8007984 <vPortEnterCritical+0x5c>)
 800794a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800794c:	4b0d      	ldr	r3, [pc, #52]	@ (8007984 <vPortEnterCritical+0x5c>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	2b01      	cmp	r3, #1
 8007952:	d110      	bne.n	8007976 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007954:	4b0c      	ldr	r3, [pc, #48]	@ (8007988 <vPortEnterCritical+0x60>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	b2db      	uxtb	r3, r3
 800795a:	2b00      	cmp	r3, #0
 800795c:	d00b      	beq.n	8007976 <vPortEnterCritical+0x4e>
	__asm volatile
 800795e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007962:	f383 8811 	msr	BASEPRI, r3
 8007966:	f3bf 8f6f 	isb	sy
 800796a:	f3bf 8f4f 	dsb	sy
 800796e:	603b      	str	r3, [r7, #0]
}
 8007970:	bf00      	nop
 8007972:	bf00      	nop
 8007974:	e7fd      	b.n	8007972 <vPortEnterCritical+0x4a>
	}
}
 8007976:	bf00      	nop
 8007978:	370c      	adds	r7, #12
 800797a:	46bd      	mov	sp, r7
 800797c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007980:	4770      	bx	lr
 8007982:	bf00      	nop
 8007984:	20000068 	.word	0x20000068
 8007988:	e000ed04 	.word	0xe000ed04

0800798c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800798c:	b480      	push	{r7}
 800798e:	b083      	sub	sp, #12
 8007990:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007992:	4b12      	ldr	r3, [pc, #72]	@ (80079dc <vPortExitCritical+0x50>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d10b      	bne.n	80079b2 <vPortExitCritical+0x26>
	__asm volatile
 800799a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800799e:	f383 8811 	msr	BASEPRI, r3
 80079a2:	f3bf 8f6f 	isb	sy
 80079a6:	f3bf 8f4f 	dsb	sy
 80079aa:	607b      	str	r3, [r7, #4]
}
 80079ac:	bf00      	nop
 80079ae:	bf00      	nop
 80079b0:	e7fd      	b.n	80079ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80079b2:	4b0a      	ldr	r3, [pc, #40]	@ (80079dc <vPortExitCritical+0x50>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	3b01      	subs	r3, #1
 80079b8:	4a08      	ldr	r2, [pc, #32]	@ (80079dc <vPortExitCritical+0x50>)
 80079ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80079bc:	4b07      	ldr	r3, [pc, #28]	@ (80079dc <vPortExitCritical+0x50>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d105      	bne.n	80079d0 <vPortExitCritical+0x44>
 80079c4:	2300      	movs	r3, #0
 80079c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	f383 8811 	msr	BASEPRI, r3
}
 80079ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80079d0:	bf00      	nop
 80079d2:	370c      	adds	r7, #12
 80079d4:	46bd      	mov	sp, r7
 80079d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079da:	4770      	bx	lr
 80079dc:	20000068 	.word	0x20000068

080079e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80079e0:	f3ef 8009 	mrs	r0, PSP
 80079e4:	f3bf 8f6f 	isb	sy
 80079e8:	4b15      	ldr	r3, [pc, #84]	@ (8007a40 <pxCurrentTCBConst>)
 80079ea:	681a      	ldr	r2, [r3, #0]
 80079ec:	f01e 0f10 	tst.w	lr, #16
 80079f0:	bf08      	it	eq
 80079f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80079f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079fa:	6010      	str	r0, [r2, #0]
 80079fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007a00:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007a04:	f380 8811 	msr	BASEPRI, r0
 8007a08:	f3bf 8f4f 	dsb	sy
 8007a0c:	f3bf 8f6f 	isb	sy
 8007a10:	f7fe ffaa 	bl	8006968 <vTaskSwitchContext>
 8007a14:	f04f 0000 	mov.w	r0, #0
 8007a18:	f380 8811 	msr	BASEPRI, r0
 8007a1c:	bc09      	pop	{r0, r3}
 8007a1e:	6819      	ldr	r1, [r3, #0]
 8007a20:	6808      	ldr	r0, [r1, #0]
 8007a22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a26:	f01e 0f10 	tst.w	lr, #16
 8007a2a:	bf08      	it	eq
 8007a2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007a30:	f380 8809 	msr	PSP, r0
 8007a34:	f3bf 8f6f 	isb	sy
 8007a38:	4770      	bx	lr
 8007a3a:	bf00      	nop
 8007a3c:	f3af 8000 	nop.w

08007a40 <pxCurrentTCBConst>:
 8007a40:	20000ad0 	.word	0x20000ad0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007a44:	bf00      	nop
 8007a46:	bf00      	nop

08007a48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b082      	sub	sp, #8
 8007a4c:	af00      	add	r7, sp, #0
	__asm volatile
 8007a4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a52:	f383 8811 	msr	BASEPRI, r3
 8007a56:	f3bf 8f6f 	isb	sy
 8007a5a:	f3bf 8f4f 	dsb	sy
 8007a5e:	607b      	str	r3, [r7, #4]
}
 8007a60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007a62:	f7fe fec7 	bl	80067f4 <xTaskIncrementTick>
 8007a66:	4603      	mov	r3, r0
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d003      	beq.n	8007a74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007a6c:	4b06      	ldr	r3, [pc, #24]	@ (8007a88 <xPortSysTickHandler+0x40>)
 8007a6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a72:	601a      	str	r2, [r3, #0]
 8007a74:	2300      	movs	r3, #0
 8007a76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	f383 8811 	msr	BASEPRI, r3
}
 8007a7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007a80:	bf00      	nop
 8007a82:	3708      	adds	r7, #8
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}
 8007a88:	e000ed04 	.word	0xe000ed04

08007a8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007a90:	4b0b      	ldr	r3, [pc, #44]	@ (8007ac0 <vPortSetupTimerInterrupt+0x34>)
 8007a92:	2200      	movs	r2, #0
 8007a94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007a96:	4b0b      	ldr	r3, [pc, #44]	@ (8007ac4 <vPortSetupTimerInterrupt+0x38>)
 8007a98:	2200      	movs	r2, #0
 8007a9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007a9c:	4b0a      	ldr	r3, [pc, #40]	@ (8007ac8 <vPortSetupTimerInterrupt+0x3c>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4a0a      	ldr	r2, [pc, #40]	@ (8007acc <vPortSetupTimerInterrupt+0x40>)
 8007aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8007aa6:	099b      	lsrs	r3, r3, #6
 8007aa8:	4a09      	ldr	r2, [pc, #36]	@ (8007ad0 <vPortSetupTimerInterrupt+0x44>)
 8007aaa:	3b01      	subs	r3, #1
 8007aac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007aae:	4b04      	ldr	r3, [pc, #16]	@ (8007ac0 <vPortSetupTimerInterrupt+0x34>)
 8007ab0:	2207      	movs	r2, #7
 8007ab2:	601a      	str	r2, [r3, #0]
}
 8007ab4:	bf00      	nop
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abc:	4770      	bx	lr
 8007abe:	bf00      	nop
 8007ac0:	e000e010 	.word	0xe000e010
 8007ac4:	e000e018 	.word	0xe000e018
 8007ac8:	2000005c 	.word	0x2000005c
 8007acc:	10624dd3 	.word	0x10624dd3
 8007ad0:	e000e014 	.word	0xe000e014

08007ad4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007ad4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007ae4 <vPortEnableVFP+0x10>
 8007ad8:	6801      	ldr	r1, [r0, #0]
 8007ada:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007ade:	6001      	str	r1, [r0, #0]
 8007ae0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007ae2:	bf00      	nop
 8007ae4:	e000ed88 	.word	0xe000ed88

08007ae8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007ae8:	b480      	push	{r7}
 8007aea:	b085      	sub	sp, #20
 8007aec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007aee:	f3ef 8305 	mrs	r3, IPSR
 8007af2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	2b0f      	cmp	r3, #15
 8007af8:	d915      	bls.n	8007b26 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007afa:	4a18      	ldr	r2, [pc, #96]	@ (8007b5c <vPortValidateInterruptPriority+0x74>)
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	4413      	add	r3, r2
 8007b00:	781b      	ldrb	r3, [r3, #0]
 8007b02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007b04:	4b16      	ldr	r3, [pc, #88]	@ (8007b60 <vPortValidateInterruptPriority+0x78>)
 8007b06:	781b      	ldrb	r3, [r3, #0]
 8007b08:	7afa      	ldrb	r2, [r7, #11]
 8007b0a:	429a      	cmp	r2, r3
 8007b0c:	d20b      	bcs.n	8007b26 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8007b0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b12:	f383 8811 	msr	BASEPRI, r3
 8007b16:	f3bf 8f6f 	isb	sy
 8007b1a:	f3bf 8f4f 	dsb	sy
 8007b1e:	607b      	str	r3, [r7, #4]
}
 8007b20:	bf00      	nop
 8007b22:	bf00      	nop
 8007b24:	e7fd      	b.n	8007b22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007b26:	4b0f      	ldr	r3, [pc, #60]	@ (8007b64 <vPortValidateInterruptPriority+0x7c>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007b2e:	4b0e      	ldr	r3, [pc, #56]	@ (8007b68 <vPortValidateInterruptPriority+0x80>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	429a      	cmp	r2, r3
 8007b34:	d90b      	bls.n	8007b4e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007b36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b3a:	f383 8811 	msr	BASEPRI, r3
 8007b3e:	f3bf 8f6f 	isb	sy
 8007b42:	f3bf 8f4f 	dsb	sy
 8007b46:	603b      	str	r3, [r7, #0]
}
 8007b48:	bf00      	nop
 8007b4a:	bf00      	nop
 8007b4c:	e7fd      	b.n	8007b4a <vPortValidateInterruptPriority+0x62>
	}
 8007b4e:	bf00      	nop
 8007b50:	3714      	adds	r7, #20
 8007b52:	46bd      	mov	sp, r7
 8007b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b58:	4770      	bx	lr
 8007b5a:	bf00      	nop
 8007b5c:	e000e3f0 	.word	0xe000e3f0
 8007b60:	200010fc 	.word	0x200010fc
 8007b64:	e000ed0c 	.word	0xe000ed0c
 8007b68:	20001100 	.word	0x20001100

08007b6c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b08a      	sub	sp, #40	@ 0x28
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007b74:	2300      	movs	r3, #0
 8007b76:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007b78:	f7fe fd80 	bl	800667c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007b7c:	4b5c      	ldr	r3, [pc, #368]	@ (8007cf0 <pvPortMalloc+0x184>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d101      	bne.n	8007b88 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007b84:	f000 f924 	bl	8007dd0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007b88:	4b5a      	ldr	r3, [pc, #360]	@ (8007cf4 <pvPortMalloc+0x188>)
 8007b8a:	681a      	ldr	r2, [r3, #0]
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	4013      	ands	r3, r2
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	f040 8095 	bne.w	8007cc0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d01e      	beq.n	8007bda <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007b9c:	2208      	movs	r2, #8
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	4413      	add	r3, r2
 8007ba2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f003 0307 	and.w	r3, r3, #7
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d015      	beq.n	8007bda <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f023 0307 	bic.w	r3, r3, #7
 8007bb4:	3308      	adds	r3, #8
 8007bb6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f003 0307 	and.w	r3, r3, #7
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d00b      	beq.n	8007bda <pvPortMalloc+0x6e>
	__asm volatile
 8007bc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bc6:	f383 8811 	msr	BASEPRI, r3
 8007bca:	f3bf 8f6f 	isb	sy
 8007bce:	f3bf 8f4f 	dsb	sy
 8007bd2:	617b      	str	r3, [r7, #20]
}
 8007bd4:	bf00      	nop
 8007bd6:	bf00      	nop
 8007bd8:	e7fd      	b.n	8007bd6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d06f      	beq.n	8007cc0 <pvPortMalloc+0x154>
 8007be0:	4b45      	ldr	r3, [pc, #276]	@ (8007cf8 <pvPortMalloc+0x18c>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	687a      	ldr	r2, [r7, #4]
 8007be6:	429a      	cmp	r2, r3
 8007be8:	d86a      	bhi.n	8007cc0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007bea:	4b44      	ldr	r3, [pc, #272]	@ (8007cfc <pvPortMalloc+0x190>)
 8007bec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007bee:	4b43      	ldr	r3, [pc, #268]	@ (8007cfc <pvPortMalloc+0x190>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007bf4:	e004      	b.n	8007c00 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bf8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c02:	685b      	ldr	r3, [r3, #4]
 8007c04:	687a      	ldr	r2, [r7, #4]
 8007c06:	429a      	cmp	r2, r3
 8007c08:	d903      	bls.n	8007c12 <pvPortMalloc+0xa6>
 8007c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d1f1      	bne.n	8007bf6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007c12:	4b37      	ldr	r3, [pc, #220]	@ (8007cf0 <pvPortMalloc+0x184>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c18:	429a      	cmp	r2, r3
 8007c1a:	d051      	beq.n	8007cc0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007c1c:	6a3b      	ldr	r3, [r7, #32]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	2208      	movs	r2, #8
 8007c22:	4413      	add	r3, r2
 8007c24:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c28:	681a      	ldr	r2, [r3, #0]
 8007c2a:	6a3b      	ldr	r3, [r7, #32]
 8007c2c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c30:	685a      	ldr	r2, [r3, #4]
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	1ad2      	subs	r2, r2, r3
 8007c36:	2308      	movs	r3, #8
 8007c38:	005b      	lsls	r3, r3, #1
 8007c3a:	429a      	cmp	r2, r3
 8007c3c:	d920      	bls.n	8007c80 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007c3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	4413      	add	r3, r2
 8007c44:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c46:	69bb      	ldr	r3, [r7, #24]
 8007c48:	f003 0307 	and.w	r3, r3, #7
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d00b      	beq.n	8007c68 <pvPortMalloc+0xfc>
	__asm volatile
 8007c50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c54:	f383 8811 	msr	BASEPRI, r3
 8007c58:	f3bf 8f6f 	isb	sy
 8007c5c:	f3bf 8f4f 	dsb	sy
 8007c60:	613b      	str	r3, [r7, #16]
}
 8007c62:	bf00      	nop
 8007c64:	bf00      	nop
 8007c66:	e7fd      	b.n	8007c64 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c6a:	685a      	ldr	r2, [r3, #4]
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	1ad2      	subs	r2, r2, r3
 8007c70:	69bb      	ldr	r3, [r7, #24]
 8007c72:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c76:	687a      	ldr	r2, [r7, #4]
 8007c78:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007c7a:	69b8      	ldr	r0, [r7, #24]
 8007c7c:	f000 f90a 	bl	8007e94 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007c80:	4b1d      	ldr	r3, [pc, #116]	@ (8007cf8 <pvPortMalloc+0x18c>)
 8007c82:	681a      	ldr	r2, [r3, #0]
 8007c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c86:	685b      	ldr	r3, [r3, #4]
 8007c88:	1ad3      	subs	r3, r2, r3
 8007c8a:	4a1b      	ldr	r2, [pc, #108]	@ (8007cf8 <pvPortMalloc+0x18c>)
 8007c8c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007c8e:	4b1a      	ldr	r3, [pc, #104]	@ (8007cf8 <pvPortMalloc+0x18c>)
 8007c90:	681a      	ldr	r2, [r3, #0]
 8007c92:	4b1b      	ldr	r3, [pc, #108]	@ (8007d00 <pvPortMalloc+0x194>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	429a      	cmp	r2, r3
 8007c98:	d203      	bcs.n	8007ca2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007c9a:	4b17      	ldr	r3, [pc, #92]	@ (8007cf8 <pvPortMalloc+0x18c>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4a18      	ldr	r2, [pc, #96]	@ (8007d00 <pvPortMalloc+0x194>)
 8007ca0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ca4:	685a      	ldr	r2, [r3, #4]
 8007ca6:	4b13      	ldr	r3, [pc, #76]	@ (8007cf4 <pvPortMalloc+0x188>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	431a      	orrs	r2, r3
 8007cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007cb6:	4b13      	ldr	r3, [pc, #76]	@ (8007d04 <pvPortMalloc+0x198>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	3301      	adds	r3, #1
 8007cbc:	4a11      	ldr	r2, [pc, #68]	@ (8007d04 <pvPortMalloc+0x198>)
 8007cbe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007cc0:	f7fe fcea 	bl	8006698 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007cc4:	69fb      	ldr	r3, [r7, #28]
 8007cc6:	f003 0307 	and.w	r3, r3, #7
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d00b      	beq.n	8007ce6 <pvPortMalloc+0x17a>
	__asm volatile
 8007cce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cd2:	f383 8811 	msr	BASEPRI, r3
 8007cd6:	f3bf 8f6f 	isb	sy
 8007cda:	f3bf 8f4f 	dsb	sy
 8007cde:	60fb      	str	r3, [r7, #12]
}
 8007ce0:	bf00      	nop
 8007ce2:	bf00      	nop
 8007ce4:	e7fd      	b.n	8007ce2 <pvPortMalloc+0x176>
	return pvReturn;
 8007ce6:	69fb      	ldr	r3, [r7, #28]
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3728      	adds	r7, #40	@ 0x28
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}
 8007cf0:	20004d0c 	.word	0x20004d0c
 8007cf4:	20004d20 	.word	0x20004d20
 8007cf8:	20004d10 	.word	0x20004d10
 8007cfc:	20004d04 	.word	0x20004d04
 8007d00:	20004d14 	.word	0x20004d14
 8007d04:	20004d18 	.word	0x20004d18

08007d08 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b086      	sub	sp, #24
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d04f      	beq.n	8007dba <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007d1a:	2308      	movs	r3, #8
 8007d1c:	425b      	negs	r3, r3
 8007d1e:	697a      	ldr	r2, [r7, #20]
 8007d20:	4413      	add	r3, r2
 8007d22:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007d28:	693b      	ldr	r3, [r7, #16]
 8007d2a:	685a      	ldr	r2, [r3, #4]
 8007d2c:	4b25      	ldr	r3, [pc, #148]	@ (8007dc4 <vPortFree+0xbc>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4013      	ands	r3, r2
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d10b      	bne.n	8007d4e <vPortFree+0x46>
	__asm volatile
 8007d36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d3a:	f383 8811 	msr	BASEPRI, r3
 8007d3e:	f3bf 8f6f 	isb	sy
 8007d42:	f3bf 8f4f 	dsb	sy
 8007d46:	60fb      	str	r3, [r7, #12]
}
 8007d48:	bf00      	nop
 8007d4a:	bf00      	nop
 8007d4c:	e7fd      	b.n	8007d4a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007d4e:	693b      	ldr	r3, [r7, #16]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d00b      	beq.n	8007d6e <vPortFree+0x66>
	__asm volatile
 8007d56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d5a:	f383 8811 	msr	BASEPRI, r3
 8007d5e:	f3bf 8f6f 	isb	sy
 8007d62:	f3bf 8f4f 	dsb	sy
 8007d66:	60bb      	str	r3, [r7, #8]
}
 8007d68:	bf00      	nop
 8007d6a:	bf00      	nop
 8007d6c:	e7fd      	b.n	8007d6a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007d6e:	693b      	ldr	r3, [r7, #16]
 8007d70:	685a      	ldr	r2, [r3, #4]
 8007d72:	4b14      	ldr	r3, [pc, #80]	@ (8007dc4 <vPortFree+0xbc>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4013      	ands	r3, r2
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d01e      	beq.n	8007dba <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007d7c:	693b      	ldr	r3, [r7, #16]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d11a      	bne.n	8007dba <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007d84:	693b      	ldr	r3, [r7, #16]
 8007d86:	685a      	ldr	r2, [r3, #4]
 8007d88:	4b0e      	ldr	r3, [pc, #56]	@ (8007dc4 <vPortFree+0xbc>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	43db      	mvns	r3, r3
 8007d8e:	401a      	ands	r2, r3
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007d94:	f7fe fc72 	bl	800667c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007d98:	693b      	ldr	r3, [r7, #16]
 8007d9a:	685a      	ldr	r2, [r3, #4]
 8007d9c:	4b0a      	ldr	r3, [pc, #40]	@ (8007dc8 <vPortFree+0xc0>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	4413      	add	r3, r2
 8007da2:	4a09      	ldr	r2, [pc, #36]	@ (8007dc8 <vPortFree+0xc0>)
 8007da4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007da6:	6938      	ldr	r0, [r7, #16]
 8007da8:	f000 f874 	bl	8007e94 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007dac:	4b07      	ldr	r3, [pc, #28]	@ (8007dcc <vPortFree+0xc4>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	3301      	adds	r3, #1
 8007db2:	4a06      	ldr	r2, [pc, #24]	@ (8007dcc <vPortFree+0xc4>)
 8007db4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007db6:	f7fe fc6f 	bl	8006698 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007dba:	bf00      	nop
 8007dbc:	3718      	adds	r7, #24
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}
 8007dc2:	bf00      	nop
 8007dc4:	20004d20 	.word	0x20004d20
 8007dc8:	20004d10 	.word	0x20004d10
 8007dcc:	20004d1c 	.word	0x20004d1c

08007dd0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b085      	sub	sp, #20
 8007dd4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007dd6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8007dda:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007ddc:	4b27      	ldr	r3, [pc, #156]	@ (8007e7c <prvHeapInit+0xac>)
 8007dde:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	f003 0307 	and.w	r3, r3, #7
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d00c      	beq.n	8007e04 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	3307      	adds	r3, #7
 8007dee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	f023 0307 	bic.w	r3, r3, #7
 8007df6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007df8:	68ba      	ldr	r2, [r7, #8]
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	1ad3      	subs	r3, r2, r3
 8007dfe:	4a1f      	ldr	r2, [pc, #124]	@ (8007e7c <prvHeapInit+0xac>)
 8007e00:	4413      	add	r3, r2
 8007e02:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007e08:	4a1d      	ldr	r2, [pc, #116]	@ (8007e80 <prvHeapInit+0xb0>)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007e0e:	4b1c      	ldr	r3, [pc, #112]	@ (8007e80 <prvHeapInit+0xb0>)
 8007e10:	2200      	movs	r2, #0
 8007e12:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	68ba      	ldr	r2, [r7, #8]
 8007e18:	4413      	add	r3, r2
 8007e1a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007e1c:	2208      	movs	r2, #8
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	1a9b      	subs	r3, r3, r2
 8007e22:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	f023 0307 	bic.w	r3, r3, #7
 8007e2a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	4a15      	ldr	r2, [pc, #84]	@ (8007e84 <prvHeapInit+0xb4>)
 8007e30:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007e32:	4b14      	ldr	r3, [pc, #80]	@ (8007e84 <prvHeapInit+0xb4>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	2200      	movs	r2, #0
 8007e38:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007e3a:	4b12      	ldr	r3, [pc, #72]	@ (8007e84 <prvHeapInit+0xb4>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	68fa      	ldr	r2, [r7, #12]
 8007e4a:	1ad2      	subs	r2, r2, r3
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007e50:	4b0c      	ldr	r3, [pc, #48]	@ (8007e84 <prvHeapInit+0xb4>)
 8007e52:	681a      	ldr	r2, [r3, #0]
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	685b      	ldr	r3, [r3, #4]
 8007e5c:	4a0a      	ldr	r2, [pc, #40]	@ (8007e88 <prvHeapInit+0xb8>)
 8007e5e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	685b      	ldr	r3, [r3, #4]
 8007e64:	4a09      	ldr	r2, [pc, #36]	@ (8007e8c <prvHeapInit+0xbc>)
 8007e66:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007e68:	4b09      	ldr	r3, [pc, #36]	@ (8007e90 <prvHeapInit+0xc0>)
 8007e6a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007e6e:	601a      	str	r2, [r3, #0]
}
 8007e70:	bf00      	nop
 8007e72:	3714      	adds	r7, #20
 8007e74:	46bd      	mov	sp, r7
 8007e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7a:	4770      	bx	lr
 8007e7c:	20001104 	.word	0x20001104
 8007e80:	20004d04 	.word	0x20004d04
 8007e84:	20004d0c 	.word	0x20004d0c
 8007e88:	20004d14 	.word	0x20004d14
 8007e8c:	20004d10 	.word	0x20004d10
 8007e90:	20004d20 	.word	0x20004d20

08007e94 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007e94:	b480      	push	{r7}
 8007e96:	b085      	sub	sp, #20
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007e9c:	4b28      	ldr	r3, [pc, #160]	@ (8007f40 <prvInsertBlockIntoFreeList+0xac>)
 8007e9e:	60fb      	str	r3, [r7, #12]
 8007ea0:	e002      	b.n	8007ea8 <prvInsertBlockIntoFreeList+0x14>
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	60fb      	str	r3, [r7, #12]
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	687a      	ldr	r2, [r7, #4]
 8007eae:	429a      	cmp	r2, r3
 8007eb0:	d8f7      	bhi.n	8007ea2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	685b      	ldr	r3, [r3, #4]
 8007eba:	68ba      	ldr	r2, [r7, #8]
 8007ebc:	4413      	add	r3, r2
 8007ebe:	687a      	ldr	r2, [r7, #4]
 8007ec0:	429a      	cmp	r2, r3
 8007ec2:	d108      	bne.n	8007ed6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	685a      	ldr	r2, [r3, #4]
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	685b      	ldr	r3, [r3, #4]
 8007ecc:	441a      	add	r2, r3
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	68ba      	ldr	r2, [r7, #8]
 8007ee0:	441a      	add	r2, r3
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	429a      	cmp	r2, r3
 8007ee8:	d118      	bne.n	8007f1c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681a      	ldr	r2, [r3, #0]
 8007eee:	4b15      	ldr	r3, [pc, #84]	@ (8007f44 <prvInsertBlockIntoFreeList+0xb0>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	429a      	cmp	r2, r3
 8007ef4:	d00d      	beq.n	8007f12 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	685a      	ldr	r2, [r3, #4]
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	685b      	ldr	r3, [r3, #4]
 8007f00:	441a      	add	r2, r3
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	681a      	ldr	r2, [r3, #0]
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	601a      	str	r2, [r3, #0]
 8007f10:	e008      	b.n	8007f24 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007f12:	4b0c      	ldr	r3, [pc, #48]	@ (8007f44 <prvInsertBlockIntoFreeList+0xb0>)
 8007f14:	681a      	ldr	r2, [r3, #0]
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	601a      	str	r2, [r3, #0]
 8007f1a:	e003      	b.n	8007f24 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681a      	ldr	r2, [r3, #0]
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007f24:	68fa      	ldr	r2, [r7, #12]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	429a      	cmp	r2, r3
 8007f2a:	d002      	beq.n	8007f32 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	687a      	ldr	r2, [r7, #4]
 8007f30:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007f32:	bf00      	nop
 8007f34:	3714      	adds	r7, #20
 8007f36:	46bd      	mov	sp, r7
 8007f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3c:	4770      	bx	lr
 8007f3e:	bf00      	nop
 8007f40:	20004d04 	.word	0x20004d04
 8007f44:	20004d0c 	.word	0x20004d0c

08007f48 <siprintf>:
 8007f48:	b40e      	push	{r1, r2, r3}
 8007f4a:	b510      	push	{r4, lr}
 8007f4c:	b09d      	sub	sp, #116	@ 0x74
 8007f4e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8007f50:	9002      	str	r0, [sp, #8]
 8007f52:	9006      	str	r0, [sp, #24]
 8007f54:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007f58:	480a      	ldr	r0, [pc, #40]	@ (8007f84 <siprintf+0x3c>)
 8007f5a:	9107      	str	r1, [sp, #28]
 8007f5c:	9104      	str	r1, [sp, #16]
 8007f5e:	490a      	ldr	r1, [pc, #40]	@ (8007f88 <siprintf+0x40>)
 8007f60:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f64:	9105      	str	r1, [sp, #20]
 8007f66:	2400      	movs	r4, #0
 8007f68:	a902      	add	r1, sp, #8
 8007f6a:	6800      	ldr	r0, [r0, #0]
 8007f6c:	9301      	str	r3, [sp, #4]
 8007f6e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8007f70:	f000 f9a2 	bl	80082b8 <_svfiprintf_r>
 8007f74:	9b02      	ldr	r3, [sp, #8]
 8007f76:	701c      	strb	r4, [r3, #0]
 8007f78:	b01d      	add	sp, #116	@ 0x74
 8007f7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f7e:	b003      	add	sp, #12
 8007f80:	4770      	bx	lr
 8007f82:	bf00      	nop
 8007f84:	2000006c 	.word	0x2000006c
 8007f88:	ffff0208 	.word	0xffff0208

08007f8c <memset>:
 8007f8c:	4402      	add	r2, r0
 8007f8e:	4603      	mov	r3, r0
 8007f90:	4293      	cmp	r3, r2
 8007f92:	d100      	bne.n	8007f96 <memset+0xa>
 8007f94:	4770      	bx	lr
 8007f96:	f803 1b01 	strb.w	r1, [r3], #1
 8007f9a:	e7f9      	b.n	8007f90 <memset+0x4>

08007f9c <__errno>:
 8007f9c:	4b01      	ldr	r3, [pc, #4]	@ (8007fa4 <__errno+0x8>)
 8007f9e:	6818      	ldr	r0, [r3, #0]
 8007fa0:	4770      	bx	lr
 8007fa2:	bf00      	nop
 8007fa4:	2000006c 	.word	0x2000006c

08007fa8 <__libc_init_array>:
 8007fa8:	b570      	push	{r4, r5, r6, lr}
 8007faa:	4d0d      	ldr	r5, [pc, #52]	@ (8007fe0 <__libc_init_array+0x38>)
 8007fac:	4c0d      	ldr	r4, [pc, #52]	@ (8007fe4 <__libc_init_array+0x3c>)
 8007fae:	1b64      	subs	r4, r4, r5
 8007fb0:	10a4      	asrs	r4, r4, #2
 8007fb2:	2600      	movs	r6, #0
 8007fb4:	42a6      	cmp	r6, r4
 8007fb6:	d109      	bne.n	8007fcc <__libc_init_array+0x24>
 8007fb8:	4d0b      	ldr	r5, [pc, #44]	@ (8007fe8 <__libc_init_array+0x40>)
 8007fba:	4c0c      	ldr	r4, [pc, #48]	@ (8007fec <__libc_init_array+0x44>)
 8007fbc:	f000 fc64 	bl	8008888 <_init>
 8007fc0:	1b64      	subs	r4, r4, r5
 8007fc2:	10a4      	asrs	r4, r4, #2
 8007fc4:	2600      	movs	r6, #0
 8007fc6:	42a6      	cmp	r6, r4
 8007fc8:	d105      	bne.n	8007fd6 <__libc_init_array+0x2e>
 8007fca:	bd70      	pop	{r4, r5, r6, pc}
 8007fcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fd0:	4798      	blx	r3
 8007fd2:	3601      	adds	r6, #1
 8007fd4:	e7ee      	b.n	8007fb4 <__libc_init_array+0xc>
 8007fd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fda:	4798      	blx	r3
 8007fdc:	3601      	adds	r6, #1
 8007fde:	e7f2      	b.n	8007fc6 <__libc_init_array+0x1e>
 8007fe0:	080089a0 	.word	0x080089a0
 8007fe4:	080089a0 	.word	0x080089a0
 8007fe8:	080089a0 	.word	0x080089a0
 8007fec:	080089a4 	.word	0x080089a4

08007ff0 <__retarget_lock_acquire_recursive>:
 8007ff0:	4770      	bx	lr

08007ff2 <__retarget_lock_release_recursive>:
 8007ff2:	4770      	bx	lr

08007ff4 <memcpy>:
 8007ff4:	440a      	add	r2, r1
 8007ff6:	4291      	cmp	r1, r2
 8007ff8:	f100 33ff 	add.w	r3, r0, #4294967295
 8007ffc:	d100      	bne.n	8008000 <memcpy+0xc>
 8007ffe:	4770      	bx	lr
 8008000:	b510      	push	{r4, lr}
 8008002:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008006:	f803 4f01 	strb.w	r4, [r3, #1]!
 800800a:	4291      	cmp	r1, r2
 800800c:	d1f9      	bne.n	8008002 <memcpy+0xe>
 800800e:	bd10      	pop	{r4, pc}

08008010 <_free_r>:
 8008010:	b538      	push	{r3, r4, r5, lr}
 8008012:	4605      	mov	r5, r0
 8008014:	2900      	cmp	r1, #0
 8008016:	d041      	beq.n	800809c <_free_r+0x8c>
 8008018:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800801c:	1f0c      	subs	r4, r1, #4
 800801e:	2b00      	cmp	r3, #0
 8008020:	bfb8      	it	lt
 8008022:	18e4      	addlt	r4, r4, r3
 8008024:	f000 f8e0 	bl	80081e8 <__malloc_lock>
 8008028:	4a1d      	ldr	r2, [pc, #116]	@ (80080a0 <_free_r+0x90>)
 800802a:	6813      	ldr	r3, [r2, #0]
 800802c:	b933      	cbnz	r3, 800803c <_free_r+0x2c>
 800802e:	6063      	str	r3, [r4, #4]
 8008030:	6014      	str	r4, [r2, #0]
 8008032:	4628      	mov	r0, r5
 8008034:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008038:	f000 b8dc 	b.w	80081f4 <__malloc_unlock>
 800803c:	42a3      	cmp	r3, r4
 800803e:	d908      	bls.n	8008052 <_free_r+0x42>
 8008040:	6820      	ldr	r0, [r4, #0]
 8008042:	1821      	adds	r1, r4, r0
 8008044:	428b      	cmp	r3, r1
 8008046:	bf01      	itttt	eq
 8008048:	6819      	ldreq	r1, [r3, #0]
 800804a:	685b      	ldreq	r3, [r3, #4]
 800804c:	1809      	addeq	r1, r1, r0
 800804e:	6021      	streq	r1, [r4, #0]
 8008050:	e7ed      	b.n	800802e <_free_r+0x1e>
 8008052:	461a      	mov	r2, r3
 8008054:	685b      	ldr	r3, [r3, #4]
 8008056:	b10b      	cbz	r3, 800805c <_free_r+0x4c>
 8008058:	42a3      	cmp	r3, r4
 800805a:	d9fa      	bls.n	8008052 <_free_r+0x42>
 800805c:	6811      	ldr	r1, [r2, #0]
 800805e:	1850      	adds	r0, r2, r1
 8008060:	42a0      	cmp	r0, r4
 8008062:	d10b      	bne.n	800807c <_free_r+0x6c>
 8008064:	6820      	ldr	r0, [r4, #0]
 8008066:	4401      	add	r1, r0
 8008068:	1850      	adds	r0, r2, r1
 800806a:	4283      	cmp	r3, r0
 800806c:	6011      	str	r1, [r2, #0]
 800806e:	d1e0      	bne.n	8008032 <_free_r+0x22>
 8008070:	6818      	ldr	r0, [r3, #0]
 8008072:	685b      	ldr	r3, [r3, #4]
 8008074:	6053      	str	r3, [r2, #4]
 8008076:	4408      	add	r0, r1
 8008078:	6010      	str	r0, [r2, #0]
 800807a:	e7da      	b.n	8008032 <_free_r+0x22>
 800807c:	d902      	bls.n	8008084 <_free_r+0x74>
 800807e:	230c      	movs	r3, #12
 8008080:	602b      	str	r3, [r5, #0]
 8008082:	e7d6      	b.n	8008032 <_free_r+0x22>
 8008084:	6820      	ldr	r0, [r4, #0]
 8008086:	1821      	adds	r1, r4, r0
 8008088:	428b      	cmp	r3, r1
 800808a:	bf04      	itt	eq
 800808c:	6819      	ldreq	r1, [r3, #0]
 800808e:	685b      	ldreq	r3, [r3, #4]
 8008090:	6063      	str	r3, [r4, #4]
 8008092:	bf04      	itt	eq
 8008094:	1809      	addeq	r1, r1, r0
 8008096:	6021      	streq	r1, [r4, #0]
 8008098:	6054      	str	r4, [r2, #4]
 800809a:	e7ca      	b.n	8008032 <_free_r+0x22>
 800809c:	bd38      	pop	{r3, r4, r5, pc}
 800809e:	bf00      	nop
 80080a0:	20004e68 	.word	0x20004e68

080080a4 <sbrk_aligned>:
 80080a4:	b570      	push	{r4, r5, r6, lr}
 80080a6:	4e0f      	ldr	r6, [pc, #60]	@ (80080e4 <sbrk_aligned+0x40>)
 80080a8:	460c      	mov	r4, r1
 80080aa:	6831      	ldr	r1, [r6, #0]
 80080ac:	4605      	mov	r5, r0
 80080ae:	b911      	cbnz	r1, 80080b6 <sbrk_aligned+0x12>
 80080b0:	f000 fba4 	bl	80087fc <_sbrk_r>
 80080b4:	6030      	str	r0, [r6, #0]
 80080b6:	4621      	mov	r1, r4
 80080b8:	4628      	mov	r0, r5
 80080ba:	f000 fb9f 	bl	80087fc <_sbrk_r>
 80080be:	1c43      	adds	r3, r0, #1
 80080c0:	d103      	bne.n	80080ca <sbrk_aligned+0x26>
 80080c2:	f04f 34ff 	mov.w	r4, #4294967295
 80080c6:	4620      	mov	r0, r4
 80080c8:	bd70      	pop	{r4, r5, r6, pc}
 80080ca:	1cc4      	adds	r4, r0, #3
 80080cc:	f024 0403 	bic.w	r4, r4, #3
 80080d0:	42a0      	cmp	r0, r4
 80080d2:	d0f8      	beq.n	80080c6 <sbrk_aligned+0x22>
 80080d4:	1a21      	subs	r1, r4, r0
 80080d6:	4628      	mov	r0, r5
 80080d8:	f000 fb90 	bl	80087fc <_sbrk_r>
 80080dc:	3001      	adds	r0, #1
 80080de:	d1f2      	bne.n	80080c6 <sbrk_aligned+0x22>
 80080e0:	e7ef      	b.n	80080c2 <sbrk_aligned+0x1e>
 80080e2:	bf00      	nop
 80080e4:	20004e64 	.word	0x20004e64

080080e8 <_malloc_r>:
 80080e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080ec:	1ccd      	adds	r5, r1, #3
 80080ee:	f025 0503 	bic.w	r5, r5, #3
 80080f2:	3508      	adds	r5, #8
 80080f4:	2d0c      	cmp	r5, #12
 80080f6:	bf38      	it	cc
 80080f8:	250c      	movcc	r5, #12
 80080fa:	2d00      	cmp	r5, #0
 80080fc:	4606      	mov	r6, r0
 80080fe:	db01      	blt.n	8008104 <_malloc_r+0x1c>
 8008100:	42a9      	cmp	r1, r5
 8008102:	d904      	bls.n	800810e <_malloc_r+0x26>
 8008104:	230c      	movs	r3, #12
 8008106:	6033      	str	r3, [r6, #0]
 8008108:	2000      	movs	r0, #0
 800810a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800810e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80081e4 <_malloc_r+0xfc>
 8008112:	f000 f869 	bl	80081e8 <__malloc_lock>
 8008116:	f8d8 3000 	ldr.w	r3, [r8]
 800811a:	461c      	mov	r4, r3
 800811c:	bb44      	cbnz	r4, 8008170 <_malloc_r+0x88>
 800811e:	4629      	mov	r1, r5
 8008120:	4630      	mov	r0, r6
 8008122:	f7ff ffbf 	bl	80080a4 <sbrk_aligned>
 8008126:	1c43      	adds	r3, r0, #1
 8008128:	4604      	mov	r4, r0
 800812a:	d158      	bne.n	80081de <_malloc_r+0xf6>
 800812c:	f8d8 4000 	ldr.w	r4, [r8]
 8008130:	4627      	mov	r7, r4
 8008132:	2f00      	cmp	r7, #0
 8008134:	d143      	bne.n	80081be <_malloc_r+0xd6>
 8008136:	2c00      	cmp	r4, #0
 8008138:	d04b      	beq.n	80081d2 <_malloc_r+0xea>
 800813a:	6823      	ldr	r3, [r4, #0]
 800813c:	4639      	mov	r1, r7
 800813e:	4630      	mov	r0, r6
 8008140:	eb04 0903 	add.w	r9, r4, r3
 8008144:	f000 fb5a 	bl	80087fc <_sbrk_r>
 8008148:	4581      	cmp	r9, r0
 800814a:	d142      	bne.n	80081d2 <_malloc_r+0xea>
 800814c:	6821      	ldr	r1, [r4, #0]
 800814e:	1a6d      	subs	r5, r5, r1
 8008150:	4629      	mov	r1, r5
 8008152:	4630      	mov	r0, r6
 8008154:	f7ff ffa6 	bl	80080a4 <sbrk_aligned>
 8008158:	3001      	adds	r0, #1
 800815a:	d03a      	beq.n	80081d2 <_malloc_r+0xea>
 800815c:	6823      	ldr	r3, [r4, #0]
 800815e:	442b      	add	r3, r5
 8008160:	6023      	str	r3, [r4, #0]
 8008162:	f8d8 3000 	ldr.w	r3, [r8]
 8008166:	685a      	ldr	r2, [r3, #4]
 8008168:	bb62      	cbnz	r2, 80081c4 <_malloc_r+0xdc>
 800816a:	f8c8 7000 	str.w	r7, [r8]
 800816e:	e00f      	b.n	8008190 <_malloc_r+0xa8>
 8008170:	6822      	ldr	r2, [r4, #0]
 8008172:	1b52      	subs	r2, r2, r5
 8008174:	d420      	bmi.n	80081b8 <_malloc_r+0xd0>
 8008176:	2a0b      	cmp	r2, #11
 8008178:	d917      	bls.n	80081aa <_malloc_r+0xc2>
 800817a:	1961      	adds	r1, r4, r5
 800817c:	42a3      	cmp	r3, r4
 800817e:	6025      	str	r5, [r4, #0]
 8008180:	bf18      	it	ne
 8008182:	6059      	strne	r1, [r3, #4]
 8008184:	6863      	ldr	r3, [r4, #4]
 8008186:	bf08      	it	eq
 8008188:	f8c8 1000 	streq.w	r1, [r8]
 800818c:	5162      	str	r2, [r4, r5]
 800818e:	604b      	str	r3, [r1, #4]
 8008190:	4630      	mov	r0, r6
 8008192:	f000 f82f 	bl	80081f4 <__malloc_unlock>
 8008196:	f104 000b 	add.w	r0, r4, #11
 800819a:	1d23      	adds	r3, r4, #4
 800819c:	f020 0007 	bic.w	r0, r0, #7
 80081a0:	1ac2      	subs	r2, r0, r3
 80081a2:	bf1c      	itt	ne
 80081a4:	1a1b      	subne	r3, r3, r0
 80081a6:	50a3      	strne	r3, [r4, r2]
 80081a8:	e7af      	b.n	800810a <_malloc_r+0x22>
 80081aa:	6862      	ldr	r2, [r4, #4]
 80081ac:	42a3      	cmp	r3, r4
 80081ae:	bf0c      	ite	eq
 80081b0:	f8c8 2000 	streq.w	r2, [r8]
 80081b4:	605a      	strne	r2, [r3, #4]
 80081b6:	e7eb      	b.n	8008190 <_malloc_r+0xa8>
 80081b8:	4623      	mov	r3, r4
 80081ba:	6864      	ldr	r4, [r4, #4]
 80081bc:	e7ae      	b.n	800811c <_malloc_r+0x34>
 80081be:	463c      	mov	r4, r7
 80081c0:	687f      	ldr	r7, [r7, #4]
 80081c2:	e7b6      	b.n	8008132 <_malloc_r+0x4a>
 80081c4:	461a      	mov	r2, r3
 80081c6:	685b      	ldr	r3, [r3, #4]
 80081c8:	42a3      	cmp	r3, r4
 80081ca:	d1fb      	bne.n	80081c4 <_malloc_r+0xdc>
 80081cc:	2300      	movs	r3, #0
 80081ce:	6053      	str	r3, [r2, #4]
 80081d0:	e7de      	b.n	8008190 <_malloc_r+0xa8>
 80081d2:	230c      	movs	r3, #12
 80081d4:	6033      	str	r3, [r6, #0]
 80081d6:	4630      	mov	r0, r6
 80081d8:	f000 f80c 	bl	80081f4 <__malloc_unlock>
 80081dc:	e794      	b.n	8008108 <_malloc_r+0x20>
 80081de:	6005      	str	r5, [r0, #0]
 80081e0:	e7d6      	b.n	8008190 <_malloc_r+0xa8>
 80081e2:	bf00      	nop
 80081e4:	20004e68 	.word	0x20004e68

080081e8 <__malloc_lock>:
 80081e8:	4801      	ldr	r0, [pc, #4]	@ (80081f0 <__malloc_lock+0x8>)
 80081ea:	f7ff bf01 	b.w	8007ff0 <__retarget_lock_acquire_recursive>
 80081ee:	bf00      	nop
 80081f0:	20004e60 	.word	0x20004e60

080081f4 <__malloc_unlock>:
 80081f4:	4801      	ldr	r0, [pc, #4]	@ (80081fc <__malloc_unlock+0x8>)
 80081f6:	f7ff befc 	b.w	8007ff2 <__retarget_lock_release_recursive>
 80081fa:	bf00      	nop
 80081fc:	20004e60 	.word	0x20004e60

08008200 <__ssputs_r>:
 8008200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008204:	688e      	ldr	r6, [r1, #8]
 8008206:	461f      	mov	r7, r3
 8008208:	42be      	cmp	r6, r7
 800820a:	680b      	ldr	r3, [r1, #0]
 800820c:	4682      	mov	sl, r0
 800820e:	460c      	mov	r4, r1
 8008210:	4690      	mov	r8, r2
 8008212:	d82d      	bhi.n	8008270 <__ssputs_r+0x70>
 8008214:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008218:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800821c:	d026      	beq.n	800826c <__ssputs_r+0x6c>
 800821e:	6965      	ldr	r5, [r4, #20]
 8008220:	6909      	ldr	r1, [r1, #16]
 8008222:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008226:	eba3 0901 	sub.w	r9, r3, r1
 800822a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800822e:	1c7b      	adds	r3, r7, #1
 8008230:	444b      	add	r3, r9
 8008232:	106d      	asrs	r5, r5, #1
 8008234:	429d      	cmp	r5, r3
 8008236:	bf38      	it	cc
 8008238:	461d      	movcc	r5, r3
 800823a:	0553      	lsls	r3, r2, #21
 800823c:	d527      	bpl.n	800828e <__ssputs_r+0x8e>
 800823e:	4629      	mov	r1, r5
 8008240:	f7ff ff52 	bl	80080e8 <_malloc_r>
 8008244:	4606      	mov	r6, r0
 8008246:	b360      	cbz	r0, 80082a2 <__ssputs_r+0xa2>
 8008248:	6921      	ldr	r1, [r4, #16]
 800824a:	464a      	mov	r2, r9
 800824c:	f7ff fed2 	bl	8007ff4 <memcpy>
 8008250:	89a3      	ldrh	r3, [r4, #12]
 8008252:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008256:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800825a:	81a3      	strh	r3, [r4, #12]
 800825c:	6126      	str	r6, [r4, #16]
 800825e:	6165      	str	r5, [r4, #20]
 8008260:	444e      	add	r6, r9
 8008262:	eba5 0509 	sub.w	r5, r5, r9
 8008266:	6026      	str	r6, [r4, #0]
 8008268:	60a5      	str	r5, [r4, #8]
 800826a:	463e      	mov	r6, r7
 800826c:	42be      	cmp	r6, r7
 800826e:	d900      	bls.n	8008272 <__ssputs_r+0x72>
 8008270:	463e      	mov	r6, r7
 8008272:	6820      	ldr	r0, [r4, #0]
 8008274:	4632      	mov	r2, r6
 8008276:	4641      	mov	r1, r8
 8008278:	f000 faa6 	bl	80087c8 <memmove>
 800827c:	68a3      	ldr	r3, [r4, #8]
 800827e:	1b9b      	subs	r3, r3, r6
 8008280:	60a3      	str	r3, [r4, #8]
 8008282:	6823      	ldr	r3, [r4, #0]
 8008284:	4433      	add	r3, r6
 8008286:	6023      	str	r3, [r4, #0]
 8008288:	2000      	movs	r0, #0
 800828a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800828e:	462a      	mov	r2, r5
 8008290:	f000 fac4 	bl	800881c <_realloc_r>
 8008294:	4606      	mov	r6, r0
 8008296:	2800      	cmp	r0, #0
 8008298:	d1e0      	bne.n	800825c <__ssputs_r+0x5c>
 800829a:	6921      	ldr	r1, [r4, #16]
 800829c:	4650      	mov	r0, sl
 800829e:	f7ff feb7 	bl	8008010 <_free_r>
 80082a2:	230c      	movs	r3, #12
 80082a4:	f8ca 3000 	str.w	r3, [sl]
 80082a8:	89a3      	ldrh	r3, [r4, #12]
 80082aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80082ae:	81a3      	strh	r3, [r4, #12]
 80082b0:	f04f 30ff 	mov.w	r0, #4294967295
 80082b4:	e7e9      	b.n	800828a <__ssputs_r+0x8a>
	...

080082b8 <_svfiprintf_r>:
 80082b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082bc:	4698      	mov	r8, r3
 80082be:	898b      	ldrh	r3, [r1, #12]
 80082c0:	061b      	lsls	r3, r3, #24
 80082c2:	b09d      	sub	sp, #116	@ 0x74
 80082c4:	4607      	mov	r7, r0
 80082c6:	460d      	mov	r5, r1
 80082c8:	4614      	mov	r4, r2
 80082ca:	d510      	bpl.n	80082ee <_svfiprintf_r+0x36>
 80082cc:	690b      	ldr	r3, [r1, #16]
 80082ce:	b973      	cbnz	r3, 80082ee <_svfiprintf_r+0x36>
 80082d0:	2140      	movs	r1, #64	@ 0x40
 80082d2:	f7ff ff09 	bl	80080e8 <_malloc_r>
 80082d6:	6028      	str	r0, [r5, #0]
 80082d8:	6128      	str	r0, [r5, #16]
 80082da:	b930      	cbnz	r0, 80082ea <_svfiprintf_r+0x32>
 80082dc:	230c      	movs	r3, #12
 80082de:	603b      	str	r3, [r7, #0]
 80082e0:	f04f 30ff 	mov.w	r0, #4294967295
 80082e4:	b01d      	add	sp, #116	@ 0x74
 80082e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082ea:	2340      	movs	r3, #64	@ 0x40
 80082ec:	616b      	str	r3, [r5, #20]
 80082ee:	2300      	movs	r3, #0
 80082f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80082f2:	2320      	movs	r3, #32
 80082f4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80082f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80082fc:	2330      	movs	r3, #48	@ 0x30
 80082fe:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800849c <_svfiprintf_r+0x1e4>
 8008302:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008306:	f04f 0901 	mov.w	r9, #1
 800830a:	4623      	mov	r3, r4
 800830c:	469a      	mov	sl, r3
 800830e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008312:	b10a      	cbz	r2, 8008318 <_svfiprintf_r+0x60>
 8008314:	2a25      	cmp	r2, #37	@ 0x25
 8008316:	d1f9      	bne.n	800830c <_svfiprintf_r+0x54>
 8008318:	ebba 0b04 	subs.w	fp, sl, r4
 800831c:	d00b      	beq.n	8008336 <_svfiprintf_r+0x7e>
 800831e:	465b      	mov	r3, fp
 8008320:	4622      	mov	r2, r4
 8008322:	4629      	mov	r1, r5
 8008324:	4638      	mov	r0, r7
 8008326:	f7ff ff6b 	bl	8008200 <__ssputs_r>
 800832a:	3001      	adds	r0, #1
 800832c:	f000 80a7 	beq.w	800847e <_svfiprintf_r+0x1c6>
 8008330:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008332:	445a      	add	r2, fp
 8008334:	9209      	str	r2, [sp, #36]	@ 0x24
 8008336:	f89a 3000 	ldrb.w	r3, [sl]
 800833a:	2b00      	cmp	r3, #0
 800833c:	f000 809f 	beq.w	800847e <_svfiprintf_r+0x1c6>
 8008340:	2300      	movs	r3, #0
 8008342:	f04f 32ff 	mov.w	r2, #4294967295
 8008346:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800834a:	f10a 0a01 	add.w	sl, sl, #1
 800834e:	9304      	str	r3, [sp, #16]
 8008350:	9307      	str	r3, [sp, #28]
 8008352:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008356:	931a      	str	r3, [sp, #104]	@ 0x68
 8008358:	4654      	mov	r4, sl
 800835a:	2205      	movs	r2, #5
 800835c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008360:	484e      	ldr	r0, [pc, #312]	@ (800849c <_svfiprintf_r+0x1e4>)
 8008362:	f7f7 ff4d 	bl	8000200 <memchr>
 8008366:	9a04      	ldr	r2, [sp, #16]
 8008368:	b9d8      	cbnz	r0, 80083a2 <_svfiprintf_r+0xea>
 800836a:	06d0      	lsls	r0, r2, #27
 800836c:	bf44      	itt	mi
 800836e:	2320      	movmi	r3, #32
 8008370:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008374:	0711      	lsls	r1, r2, #28
 8008376:	bf44      	itt	mi
 8008378:	232b      	movmi	r3, #43	@ 0x2b
 800837a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800837e:	f89a 3000 	ldrb.w	r3, [sl]
 8008382:	2b2a      	cmp	r3, #42	@ 0x2a
 8008384:	d015      	beq.n	80083b2 <_svfiprintf_r+0xfa>
 8008386:	9a07      	ldr	r2, [sp, #28]
 8008388:	4654      	mov	r4, sl
 800838a:	2000      	movs	r0, #0
 800838c:	f04f 0c0a 	mov.w	ip, #10
 8008390:	4621      	mov	r1, r4
 8008392:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008396:	3b30      	subs	r3, #48	@ 0x30
 8008398:	2b09      	cmp	r3, #9
 800839a:	d94b      	bls.n	8008434 <_svfiprintf_r+0x17c>
 800839c:	b1b0      	cbz	r0, 80083cc <_svfiprintf_r+0x114>
 800839e:	9207      	str	r2, [sp, #28]
 80083a0:	e014      	b.n	80083cc <_svfiprintf_r+0x114>
 80083a2:	eba0 0308 	sub.w	r3, r0, r8
 80083a6:	fa09 f303 	lsl.w	r3, r9, r3
 80083aa:	4313      	orrs	r3, r2
 80083ac:	9304      	str	r3, [sp, #16]
 80083ae:	46a2      	mov	sl, r4
 80083b0:	e7d2      	b.n	8008358 <_svfiprintf_r+0xa0>
 80083b2:	9b03      	ldr	r3, [sp, #12]
 80083b4:	1d19      	adds	r1, r3, #4
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	9103      	str	r1, [sp, #12]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	bfbb      	ittet	lt
 80083be:	425b      	neglt	r3, r3
 80083c0:	f042 0202 	orrlt.w	r2, r2, #2
 80083c4:	9307      	strge	r3, [sp, #28]
 80083c6:	9307      	strlt	r3, [sp, #28]
 80083c8:	bfb8      	it	lt
 80083ca:	9204      	strlt	r2, [sp, #16]
 80083cc:	7823      	ldrb	r3, [r4, #0]
 80083ce:	2b2e      	cmp	r3, #46	@ 0x2e
 80083d0:	d10a      	bne.n	80083e8 <_svfiprintf_r+0x130>
 80083d2:	7863      	ldrb	r3, [r4, #1]
 80083d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80083d6:	d132      	bne.n	800843e <_svfiprintf_r+0x186>
 80083d8:	9b03      	ldr	r3, [sp, #12]
 80083da:	1d1a      	adds	r2, r3, #4
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	9203      	str	r2, [sp, #12]
 80083e0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80083e4:	3402      	adds	r4, #2
 80083e6:	9305      	str	r3, [sp, #20]
 80083e8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80084ac <_svfiprintf_r+0x1f4>
 80083ec:	7821      	ldrb	r1, [r4, #0]
 80083ee:	2203      	movs	r2, #3
 80083f0:	4650      	mov	r0, sl
 80083f2:	f7f7 ff05 	bl	8000200 <memchr>
 80083f6:	b138      	cbz	r0, 8008408 <_svfiprintf_r+0x150>
 80083f8:	9b04      	ldr	r3, [sp, #16]
 80083fa:	eba0 000a 	sub.w	r0, r0, sl
 80083fe:	2240      	movs	r2, #64	@ 0x40
 8008400:	4082      	lsls	r2, r0
 8008402:	4313      	orrs	r3, r2
 8008404:	3401      	adds	r4, #1
 8008406:	9304      	str	r3, [sp, #16]
 8008408:	f814 1b01 	ldrb.w	r1, [r4], #1
 800840c:	4824      	ldr	r0, [pc, #144]	@ (80084a0 <_svfiprintf_r+0x1e8>)
 800840e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008412:	2206      	movs	r2, #6
 8008414:	f7f7 fef4 	bl	8000200 <memchr>
 8008418:	2800      	cmp	r0, #0
 800841a:	d036      	beq.n	800848a <_svfiprintf_r+0x1d2>
 800841c:	4b21      	ldr	r3, [pc, #132]	@ (80084a4 <_svfiprintf_r+0x1ec>)
 800841e:	bb1b      	cbnz	r3, 8008468 <_svfiprintf_r+0x1b0>
 8008420:	9b03      	ldr	r3, [sp, #12]
 8008422:	3307      	adds	r3, #7
 8008424:	f023 0307 	bic.w	r3, r3, #7
 8008428:	3308      	adds	r3, #8
 800842a:	9303      	str	r3, [sp, #12]
 800842c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800842e:	4433      	add	r3, r6
 8008430:	9309      	str	r3, [sp, #36]	@ 0x24
 8008432:	e76a      	b.n	800830a <_svfiprintf_r+0x52>
 8008434:	fb0c 3202 	mla	r2, ip, r2, r3
 8008438:	460c      	mov	r4, r1
 800843a:	2001      	movs	r0, #1
 800843c:	e7a8      	b.n	8008390 <_svfiprintf_r+0xd8>
 800843e:	2300      	movs	r3, #0
 8008440:	3401      	adds	r4, #1
 8008442:	9305      	str	r3, [sp, #20]
 8008444:	4619      	mov	r1, r3
 8008446:	f04f 0c0a 	mov.w	ip, #10
 800844a:	4620      	mov	r0, r4
 800844c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008450:	3a30      	subs	r2, #48	@ 0x30
 8008452:	2a09      	cmp	r2, #9
 8008454:	d903      	bls.n	800845e <_svfiprintf_r+0x1a6>
 8008456:	2b00      	cmp	r3, #0
 8008458:	d0c6      	beq.n	80083e8 <_svfiprintf_r+0x130>
 800845a:	9105      	str	r1, [sp, #20]
 800845c:	e7c4      	b.n	80083e8 <_svfiprintf_r+0x130>
 800845e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008462:	4604      	mov	r4, r0
 8008464:	2301      	movs	r3, #1
 8008466:	e7f0      	b.n	800844a <_svfiprintf_r+0x192>
 8008468:	ab03      	add	r3, sp, #12
 800846a:	9300      	str	r3, [sp, #0]
 800846c:	462a      	mov	r2, r5
 800846e:	4b0e      	ldr	r3, [pc, #56]	@ (80084a8 <_svfiprintf_r+0x1f0>)
 8008470:	a904      	add	r1, sp, #16
 8008472:	4638      	mov	r0, r7
 8008474:	f3af 8000 	nop.w
 8008478:	1c42      	adds	r2, r0, #1
 800847a:	4606      	mov	r6, r0
 800847c:	d1d6      	bne.n	800842c <_svfiprintf_r+0x174>
 800847e:	89ab      	ldrh	r3, [r5, #12]
 8008480:	065b      	lsls	r3, r3, #25
 8008482:	f53f af2d 	bmi.w	80082e0 <_svfiprintf_r+0x28>
 8008486:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008488:	e72c      	b.n	80082e4 <_svfiprintf_r+0x2c>
 800848a:	ab03      	add	r3, sp, #12
 800848c:	9300      	str	r3, [sp, #0]
 800848e:	462a      	mov	r2, r5
 8008490:	4b05      	ldr	r3, [pc, #20]	@ (80084a8 <_svfiprintf_r+0x1f0>)
 8008492:	a904      	add	r1, sp, #16
 8008494:	4638      	mov	r0, r7
 8008496:	f000 f879 	bl	800858c <_printf_i>
 800849a:	e7ed      	b.n	8008478 <_svfiprintf_r+0x1c0>
 800849c:	08008964 	.word	0x08008964
 80084a0:	0800896e 	.word	0x0800896e
 80084a4:	00000000 	.word	0x00000000
 80084a8:	08008201 	.word	0x08008201
 80084ac:	0800896a 	.word	0x0800896a

080084b0 <_printf_common>:
 80084b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084b4:	4616      	mov	r6, r2
 80084b6:	4698      	mov	r8, r3
 80084b8:	688a      	ldr	r2, [r1, #8]
 80084ba:	690b      	ldr	r3, [r1, #16]
 80084bc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80084c0:	4293      	cmp	r3, r2
 80084c2:	bfb8      	it	lt
 80084c4:	4613      	movlt	r3, r2
 80084c6:	6033      	str	r3, [r6, #0]
 80084c8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80084cc:	4607      	mov	r7, r0
 80084ce:	460c      	mov	r4, r1
 80084d0:	b10a      	cbz	r2, 80084d6 <_printf_common+0x26>
 80084d2:	3301      	adds	r3, #1
 80084d4:	6033      	str	r3, [r6, #0]
 80084d6:	6823      	ldr	r3, [r4, #0]
 80084d8:	0699      	lsls	r1, r3, #26
 80084da:	bf42      	ittt	mi
 80084dc:	6833      	ldrmi	r3, [r6, #0]
 80084de:	3302      	addmi	r3, #2
 80084e0:	6033      	strmi	r3, [r6, #0]
 80084e2:	6825      	ldr	r5, [r4, #0]
 80084e4:	f015 0506 	ands.w	r5, r5, #6
 80084e8:	d106      	bne.n	80084f8 <_printf_common+0x48>
 80084ea:	f104 0a19 	add.w	sl, r4, #25
 80084ee:	68e3      	ldr	r3, [r4, #12]
 80084f0:	6832      	ldr	r2, [r6, #0]
 80084f2:	1a9b      	subs	r3, r3, r2
 80084f4:	42ab      	cmp	r3, r5
 80084f6:	dc26      	bgt.n	8008546 <_printf_common+0x96>
 80084f8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80084fc:	6822      	ldr	r2, [r4, #0]
 80084fe:	3b00      	subs	r3, #0
 8008500:	bf18      	it	ne
 8008502:	2301      	movne	r3, #1
 8008504:	0692      	lsls	r2, r2, #26
 8008506:	d42b      	bmi.n	8008560 <_printf_common+0xb0>
 8008508:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800850c:	4641      	mov	r1, r8
 800850e:	4638      	mov	r0, r7
 8008510:	47c8      	blx	r9
 8008512:	3001      	adds	r0, #1
 8008514:	d01e      	beq.n	8008554 <_printf_common+0xa4>
 8008516:	6823      	ldr	r3, [r4, #0]
 8008518:	6922      	ldr	r2, [r4, #16]
 800851a:	f003 0306 	and.w	r3, r3, #6
 800851e:	2b04      	cmp	r3, #4
 8008520:	bf02      	ittt	eq
 8008522:	68e5      	ldreq	r5, [r4, #12]
 8008524:	6833      	ldreq	r3, [r6, #0]
 8008526:	1aed      	subeq	r5, r5, r3
 8008528:	68a3      	ldr	r3, [r4, #8]
 800852a:	bf0c      	ite	eq
 800852c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008530:	2500      	movne	r5, #0
 8008532:	4293      	cmp	r3, r2
 8008534:	bfc4      	itt	gt
 8008536:	1a9b      	subgt	r3, r3, r2
 8008538:	18ed      	addgt	r5, r5, r3
 800853a:	2600      	movs	r6, #0
 800853c:	341a      	adds	r4, #26
 800853e:	42b5      	cmp	r5, r6
 8008540:	d11a      	bne.n	8008578 <_printf_common+0xc8>
 8008542:	2000      	movs	r0, #0
 8008544:	e008      	b.n	8008558 <_printf_common+0xa8>
 8008546:	2301      	movs	r3, #1
 8008548:	4652      	mov	r2, sl
 800854a:	4641      	mov	r1, r8
 800854c:	4638      	mov	r0, r7
 800854e:	47c8      	blx	r9
 8008550:	3001      	adds	r0, #1
 8008552:	d103      	bne.n	800855c <_printf_common+0xac>
 8008554:	f04f 30ff 	mov.w	r0, #4294967295
 8008558:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800855c:	3501      	adds	r5, #1
 800855e:	e7c6      	b.n	80084ee <_printf_common+0x3e>
 8008560:	18e1      	adds	r1, r4, r3
 8008562:	1c5a      	adds	r2, r3, #1
 8008564:	2030      	movs	r0, #48	@ 0x30
 8008566:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800856a:	4422      	add	r2, r4
 800856c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008570:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008574:	3302      	adds	r3, #2
 8008576:	e7c7      	b.n	8008508 <_printf_common+0x58>
 8008578:	2301      	movs	r3, #1
 800857a:	4622      	mov	r2, r4
 800857c:	4641      	mov	r1, r8
 800857e:	4638      	mov	r0, r7
 8008580:	47c8      	blx	r9
 8008582:	3001      	adds	r0, #1
 8008584:	d0e6      	beq.n	8008554 <_printf_common+0xa4>
 8008586:	3601      	adds	r6, #1
 8008588:	e7d9      	b.n	800853e <_printf_common+0x8e>
	...

0800858c <_printf_i>:
 800858c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008590:	7e0f      	ldrb	r7, [r1, #24]
 8008592:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008594:	2f78      	cmp	r7, #120	@ 0x78
 8008596:	4691      	mov	r9, r2
 8008598:	4680      	mov	r8, r0
 800859a:	460c      	mov	r4, r1
 800859c:	469a      	mov	sl, r3
 800859e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80085a2:	d807      	bhi.n	80085b4 <_printf_i+0x28>
 80085a4:	2f62      	cmp	r7, #98	@ 0x62
 80085a6:	d80a      	bhi.n	80085be <_printf_i+0x32>
 80085a8:	2f00      	cmp	r7, #0
 80085aa:	f000 80d1 	beq.w	8008750 <_printf_i+0x1c4>
 80085ae:	2f58      	cmp	r7, #88	@ 0x58
 80085b0:	f000 80b8 	beq.w	8008724 <_printf_i+0x198>
 80085b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80085b8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80085bc:	e03a      	b.n	8008634 <_printf_i+0xa8>
 80085be:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80085c2:	2b15      	cmp	r3, #21
 80085c4:	d8f6      	bhi.n	80085b4 <_printf_i+0x28>
 80085c6:	a101      	add	r1, pc, #4	@ (adr r1, 80085cc <_printf_i+0x40>)
 80085c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80085cc:	08008625 	.word	0x08008625
 80085d0:	08008639 	.word	0x08008639
 80085d4:	080085b5 	.word	0x080085b5
 80085d8:	080085b5 	.word	0x080085b5
 80085dc:	080085b5 	.word	0x080085b5
 80085e0:	080085b5 	.word	0x080085b5
 80085e4:	08008639 	.word	0x08008639
 80085e8:	080085b5 	.word	0x080085b5
 80085ec:	080085b5 	.word	0x080085b5
 80085f0:	080085b5 	.word	0x080085b5
 80085f4:	080085b5 	.word	0x080085b5
 80085f8:	08008737 	.word	0x08008737
 80085fc:	08008663 	.word	0x08008663
 8008600:	080086f1 	.word	0x080086f1
 8008604:	080085b5 	.word	0x080085b5
 8008608:	080085b5 	.word	0x080085b5
 800860c:	08008759 	.word	0x08008759
 8008610:	080085b5 	.word	0x080085b5
 8008614:	08008663 	.word	0x08008663
 8008618:	080085b5 	.word	0x080085b5
 800861c:	080085b5 	.word	0x080085b5
 8008620:	080086f9 	.word	0x080086f9
 8008624:	6833      	ldr	r3, [r6, #0]
 8008626:	1d1a      	adds	r2, r3, #4
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	6032      	str	r2, [r6, #0]
 800862c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008630:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008634:	2301      	movs	r3, #1
 8008636:	e09c      	b.n	8008772 <_printf_i+0x1e6>
 8008638:	6833      	ldr	r3, [r6, #0]
 800863a:	6820      	ldr	r0, [r4, #0]
 800863c:	1d19      	adds	r1, r3, #4
 800863e:	6031      	str	r1, [r6, #0]
 8008640:	0606      	lsls	r6, r0, #24
 8008642:	d501      	bpl.n	8008648 <_printf_i+0xbc>
 8008644:	681d      	ldr	r5, [r3, #0]
 8008646:	e003      	b.n	8008650 <_printf_i+0xc4>
 8008648:	0645      	lsls	r5, r0, #25
 800864a:	d5fb      	bpl.n	8008644 <_printf_i+0xb8>
 800864c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008650:	2d00      	cmp	r5, #0
 8008652:	da03      	bge.n	800865c <_printf_i+0xd0>
 8008654:	232d      	movs	r3, #45	@ 0x2d
 8008656:	426d      	negs	r5, r5
 8008658:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800865c:	4858      	ldr	r0, [pc, #352]	@ (80087c0 <_printf_i+0x234>)
 800865e:	230a      	movs	r3, #10
 8008660:	e011      	b.n	8008686 <_printf_i+0xfa>
 8008662:	6821      	ldr	r1, [r4, #0]
 8008664:	6833      	ldr	r3, [r6, #0]
 8008666:	0608      	lsls	r0, r1, #24
 8008668:	f853 5b04 	ldr.w	r5, [r3], #4
 800866c:	d402      	bmi.n	8008674 <_printf_i+0xe8>
 800866e:	0649      	lsls	r1, r1, #25
 8008670:	bf48      	it	mi
 8008672:	b2ad      	uxthmi	r5, r5
 8008674:	2f6f      	cmp	r7, #111	@ 0x6f
 8008676:	4852      	ldr	r0, [pc, #328]	@ (80087c0 <_printf_i+0x234>)
 8008678:	6033      	str	r3, [r6, #0]
 800867a:	bf14      	ite	ne
 800867c:	230a      	movne	r3, #10
 800867e:	2308      	moveq	r3, #8
 8008680:	2100      	movs	r1, #0
 8008682:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008686:	6866      	ldr	r6, [r4, #4]
 8008688:	60a6      	str	r6, [r4, #8]
 800868a:	2e00      	cmp	r6, #0
 800868c:	db05      	blt.n	800869a <_printf_i+0x10e>
 800868e:	6821      	ldr	r1, [r4, #0]
 8008690:	432e      	orrs	r6, r5
 8008692:	f021 0104 	bic.w	r1, r1, #4
 8008696:	6021      	str	r1, [r4, #0]
 8008698:	d04b      	beq.n	8008732 <_printf_i+0x1a6>
 800869a:	4616      	mov	r6, r2
 800869c:	fbb5 f1f3 	udiv	r1, r5, r3
 80086a0:	fb03 5711 	mls	r7, r3, r1, r5
 80086a4:	5dc7      	ldrb	r7, [r0, r7]
 80086a6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80086aa:	462f      	mov	r7, r5
 80086ac:	42bb      	cmp	r3, r7
 80086ae:	460d      	mov	r5, r1
 80086b0:	d9f4      	bls.n	800869c <_printf_i+0x110>
 80086b2:	2b08      	cmp	r3, #8
 80086b4:	d10b      	bne.n	80086ce <_printf_i+0x142>
 80086b6:	6823      	ldr	r3, [r4, #0]
 80086b8:	07df      	lsls	r7, r3, #31
 80086ba:	d508      	bpl.n	80086ce <_printf_i+0x142>
 80086bc:	6923      	ldr	r3, [r4, #16]
 80086be:	6861      	ldr	r1, [r4, #4]
 80086c0:	4299      	cmp	r1, r3
 80086c2:	bfde      	ittt	le
 80086c4:	2330      	movle	r3, #48	@ 0x30
 80086c6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80086ca:	f106 36ff 	addle.w	r6, r6, #4294967295
 80086ce:	1b92      	subs	r2, r2, r6
 80086d0:	6122      	str	r2, [r4, #16]
 80086d2:	f8cd a000 	str.w	sl, [sp]
 80086d6:	464b      	mov	r3, r9
 80086d8:	aa03      	add	r2, sp, #12
 80086da:	4621      	mov	r1, r4
 80086dc:	4640      	mov	r0, r8
 80086de:	f7ff fee7 	bl	80084b0 <_printf_common>
 80086e2:	3001      	adds	r0, #1
 80086e4:	d14a      	bne.n	800877c <_printf_i+0x1f0>
 80086e6:	f04f 30ff 	mov.w	r0, #4294967295
 80086ea:	b004      	add	sp, #16
 80086ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086f0:	6823      	ldr	r3, [r4, #0]
 80086f2:	f043 0320 	orr.w	r3, r3, #32
 80086f6:	6023      	str	r3, [r4, #0]
 80086f8:	4832      	ldr	r0, [pc, #200]	@ (80087c4 <_printf_i+0x238>)
 80086fa:	2778      	movs	r7, #120	@ 0x78
 80086fc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008700:	6823      	ldr	r3, [r4, #0]
 8008702:	6831      	ldr	r1, [r6, #0]
 8008704:	061f      	lsls	r7, r3, #24
 8008706:	f851 5b04 	ldr.w	r5, [r1], #4
 800870a:	d402      	bmi.n	8008712 <_printf_i+0x186>
 800870c:	065f      	lsls	r7, r3, #25
 800870e:	bf48      	it	mi
 8008710:	b2ad      	uxthmi	r5, r5
 8008712:	6031      	str	r1, [r6, #0]
 8008714:	07d9      	lsls	r1, r3, #31
 8008716:	bf44      	itt	mi
 8008718:	f043 0320 	orrmi.w	r3, r3, #32
 800871c:	6023      	strmi	r3, [r4, #0]
 800871e:	b11d      	cbz	r5, 8008728 <_printf_i+0x19c>
 8008720:	2310      	movs	r3, #16
 8008722:	e7ad      	b.n	8008680 <_printf_i+0xf4>
 8008724:	4826      	ldr	r0, [pc, #152]	@ (80087c0 <_printf_i+0x234>)
 8008726:	e7e9      	b.n	80086fc <_printf_i+0x170>
 8008728:	6823      	ldr	r3, [r4, #0]
 800872a:	f023 0320 	bic.w	r3, r3, #32
 800872e:	6023      	str	r3, [r4, #0]
 8008730:	e7f6      	b.n	8008720 <_printf_i+0x194>
 8008732:	4616      	mov	r6, r2
 8008734:	e7bd      	b.n	80086b2 <_printf_i+0x126>
 8008736:	6833      	ldr	r3, [r6, #0]
 8008738:	6825      	ldr	r5, [r4, #0]
 800873a:	6961      	ldr	r1, [r4, #20]
 800873c:	1d18      	adds	r0, r3, #4
 800873e:	6030      	str	r0, [r6, #0]
 8008740:	062e      	lsls	r6, r5, #24
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	d501      	bpl.n	800874a <_printf_i+0x1be>
 8008746:	6019      	str	r1, [r3, #0]
 8008748:	e002      	b.n	8008750 <_printf_i+0x1c4>
 800874a:	0668      	lsls	r0, r5, #25
 800874c:	d5fb      	bpl.n	8008746 <_printf_i+0x1ba>
 800874e:	8019      	strh	r1, [r3, #0]
 8008750:	2300      	movs	r3, #0
 8008752:	6123      	str	r3, [r4, #16]
 8008754:	4616      	mov	r6, r2
 8008756:	e7bc      	b.n	80086d2 <_printf_i+0x146>
 8008758:	6833      	ldr	r3, [r6, #0]
 800875a:	1d1a      	adds	r2, r3, #4
 800875c:	6032      	str	r2, [r6, #0]
 800875e:	681e      	ldr	r6, [r3, #0]
 8008760:	6862      	ldr	r2, [r4, #4]
 8008762:	2100      	movs	r1, #0
 8008764:	4630      	mov	r0, r6
 8008766:	f7f7 fd4b 	bl	8000200 <memchr>
 800876a:	b108      	cbz	r0, 8008770 <_printf_i+0x1e4>
 800876c:	1b80      	subs	r0, r0, r6
 800876e:	6060      	str	r0, [r4, #4]
 8008770:	6863      	ldr	r3, [r4, #4]
 8008772:	6123      	str	r3, [r4, #16]
 8008774:	2300      	movs	r3, #0
 8008776:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800877a:	e7aa      	b.n	80086d2 <_printf_i+0x146>
 800877c:	6923      	ldr	r3, [r4, #16]
 800877e:	4632      	mov	r2, r6
 8008780:	4649      	mov	r1, r9
 8008782:	4640      	mov	r0, r8
 8008784:	47d0      	blx	sl
 8008786:	3001      	adds	r0, #1
 8008788:	d0ad      	beq.n	80086e6 <_printf_i+0x15a>
 800878a:	6823      	ldr	r3, [r4, #0]
 800878c:	079b      	lsls	r3, r3, #30
 800878e:	d413      	bmi.n	80087b8 <_printf_i+0x22c>
 8008790:	68e0      	ldr	r0, [r4, #12]
 8008792:	9b03      	ldr	r3, [sp, #12]
 8008794:	4298      	cmp	r0, r3
 8008796:	bfb8      	it	lt
 8008798:	4618      	movlt	r0, r3
 800879a:	e7a6      	b.n	80086ea <_printf_i+0x15e>
 800879c:	2301      	movs	r3, #1
 800879e:	4632      	mov	r2, r6
 80087a0:	4649      	mov	r1, r9
 80087a2:	4640      	mov	r0, r8
 80087a4:	47d0      	blx	sl
 80087a6:	3001      	adds	r0, #1
 80087a8:	d09d      	beq.n	80086e6 <_printf_i+0x15a>
 80087aa:	3501      	adds	r5, #1
 80087ac:	68e3      	ldr	r3, [r4, #12]
 80087ae:	9903      	ldr	r1, [sp, #12]
 80087b0:	1a5b      	subs	r3, r3, r1
 80087b2:	42ab      	cmp	r3, r5
 80087b4:	dcf2      	bgt.n	800879c <_printf_i+0x210>
 80087b6:	e7eb      	b.n	8008790 <_printf_i+0x204>
 80087b8:	2500      	movs	r5, #0
 80087ba:	f104 0619 	add.w	r6, r4, #25
 80087be:	e7f5      	b.n	80087ac <_printf_i+0x220>
 80087c0:	08008975 	.word	0x08008975
 80087c4:	08008986 	.word	0x08008986

080087c8 <memmove>:
 80087c8:	4288      	cmp	r0, r1
 80087ca:	b510      	push	{r4, lr}
 80087cc:	eb01 0402 	add.w	r4, r1, r2
 80087d0:	d902      	bls.n	80087d8 <memmove+0x10>
 80087d2:	4284      	cmp	r4, r0
 80087d4:	4623      	mov	r3, r4
 80087d6:	d807      	bhi.n	80087e8 <memmove+0x20>
 80087d8:	1e43      	subs	r3, r0, #1
 80087da:	42a1      	cmp	r1, r4
 80087dc:	d008      	beq.n	80087f0 <memmove+0x28>
 80087de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80087e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80087e6:	e7f8      	b.n	80087da <memmove+0x12>
 80087e8:	4402      	add	r2, r0
 80087ea:	4601      	mov	r1, r0
 80087ec:	428a      	cmp	r2, r1
 80087ee:	d100      	bne.n	80087f2 <memmove+0x2a>
 80087f0:	bd10      	pop	{r4, pc}
 80087f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80087f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80087fa:	e7f7      	b.n	80087ec <memmove+0x24>

080087fc <_sbrk_r>:
 80087fc:	b538      	push	{r3, r4, r5, lr}
 80087fe:	4d06      	ldr	r5, [pc, #24]	@ (8008818 <_sbrk_r+0x1c>)
 8008800:	2300      	movs	r3, #0
 8008802:	4604      	mov	r4, r0
 8008804:	4608      	mov	r0, r1
 8008806:	602b      	str	r3, [r5, #0]
 8008808:	f7f8 fafa 	bl	8000e00 <_sbrk>
 800880c:	1c43      	adds	r3, r0, #1
 800880e:	d102      	bne.n	8008816 <_sbrk_r+0x1a>
 8008810:	682b      	ldr	r3, [r5, #0]
 8008812:	b103      	cbz	r3, 8008816 <_sbrk_r+0x1a>
 8008814:	6023      	str	r3, [r4, #0]
 8008816:	bd38      	pop	{r3, r4, r5, pc}
 8008818:	20004e5c 	.word	0x20004e5c

0800881c <_realloc_r>:
 800881c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008820:	4607      	mov	r7, r0
 8008822:	4614      	mov	r4, r2
 8008824:	460d      	mov	r5, r1
 8008826:	b921      	cbnz	r1, 8008832 <_realloc_r+0x16>
 8008828:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800882c:	4611      	mov	r1, r2
 800882e:	f7ff bc5b 	b.w	80080e8 <_malloc_r>
 8008832:	b92a      	cbnz	r2, 8008840 <_realloc_r+0x24>
 8008834:	f7ff fbec 	bl	8008010 <_free_r>
 8008838:	4625      	mov	r5, r4
 800883a:	4628      	mov	r0, r5
 800883c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008840:	f000 f81a 	bl	8008878 <_malloc_usable_size_r>
 8008844:	4284      	cmp	r4, r0
 8008846:	4606      	mov	r6, r0
 8008848:	d802      	bhi.n	8008850 <_realloc_r+0x34>
 800884a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800884e:	d8f4      	bhi.n	800883a <_realloc_r+0x1e>
 8008850:	4621      	mov	r1, r4
 8008852:	4638      	mov	r0, r7
 8008854:	f7ff fc48 	bl	80080e8 <_malloc_r>
 8008858:	4680      	mov	r8, r0
 800885a:	b908      	cbnz	r0, 8008860 <_realloc_r+0x44>
 800885c:	4645      	mov	r5, r8
 800885e:	e7ec      	b.n	800883a <_realloc_r+0x1e>
 8008860:	42b4      	cmp	r4, r6
 8008862:	4622      	mov	r2, r4
 8008864:	4629      	mov	r1, r5
 8008866:	bf28      	it	cs
 8008868:	4632      	movcs	r2, r6
 800886a:	f7ff fbc3 	bl	8007ff4 <memcpy>
 800886e:	4629      	mov	r1, r5
 8008870:	4638      	mov	r0, r7
 8008872:	f7ff fbcd 	bl	8008010 <_free_r>
 8008876:	e7f1      	b.n	800885c <_realloc_r+0x40>

08008878 <_malloc_usable_size_r>:
 8008878:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800887c:	1f18      	subs	r0, r3, #4
 800887e:	2b00      	cmp	r3, #0
 8008880:	bfbc      	itt	lt
 8008882:	580b      	ldrlt	r3, [r1, r0]
 8008884:	18c0      	addlt	r0, r0, r3
 8008886:	4770      	bx	lr

08008888 <_init>:
 8008888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800888a:	bf00      	nop
 800888c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800888e:	bc08      	pop	{r3}
 8008890:	469e      	mov	lr, r3
 8008892:	4770      	bx	lr

08008894 <_fini>:
 8008894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008896:	bf00      	nop
 8008898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800889a:	bc08      	pop	{r3}
 800889c:	469e      	mov	lr, r3
 800889e:	4770      	bx	lr
